{"version":3,"sources":["assets/script/all_modules.js","assets/script/utils/audio.js","assets/script/ui-fx/blockAsset.js","assets/script/core/block_collision_handler.js","assets/script/canvas_init.js","assets/script/core/cell_links.js","assets/script/configs.js","assets/script/core/control.js","assets/script/logic/data.js","assets/script/utils/free_button_comp.js","assets/script/social/friend.js","assets/script/ui-fx/fx.js","assets/script/logic/game.js","assets/script/utils/inter_ad.js","assets/script/ui-fx/label_listener.js","assets/script/social/leaderboard.js","assets/script/ui-fx/load_optimize.js","assets/script/utils/localize_auto_tranform.js","assets/script/utils/localize_config.js","assets/script/utils/localize.js","assets/script/logic/login.js","assets/script/core/map_visual.js","assets/script/core/map.js","assets/script/utils/md5.js","assets/script/social/message.ts","assets/script/social/promo.js","assets/script/social/share.ts","assets/script/social/social.js","assets/script/tut/tut_bom.js","assets/script/tut/tut_relocated.js","assets/script/tut/tut_rolated.js","assets/script/tut/tut_triple.js","assets/script/tut/tut.js","assets/script/ui-fx/ui_challenge.js","assets/script/ui-fx/ui_power_item.js","assets/script/ui-fx/ui.js","assets/script/logic/user.js","assets/script/utils/utils_facebook.js","assets/script/utils/utils_instant.js","assets/script/utils/utils.js","assets/script/utils/video.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAIA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACvCA;;;;;;;;;;;;AAEO;AACH;AACA;AACA;AAEA;AAAO;;AACH;;AACA;AACI;;AACA;;AACA;AACH;;;AAGD;;AACA;AACI;;AACA;;AACA;;AACA;AAAsB;AAAF;AAChB;;AACA;AACH;AACJ;;AAED;;AACA;AACI;;AACA;;AACA;;AACA;AAAsB;AAAF;AAChB;;AACA;AACH;AACJ;AACJ;AAED;AACI;AACA;AACH;AAED;AAAa;;AACT;AACI;;AACA;AAAA;AAAsB;AAAtB;;;AAEA;AACH;AACJ;AAED;AAA4B;AAAZ;AAAY;;AACxB;AACA;AACH;AAED;AACI;AACH;AAED;AACI;AACA;;AACA;AACI;AACH;AAAa;AAA4B;AAC7C;AAED;AACI;AACH;AAED;AACI;AACA;AACH;AACD;AACI;AACA;AACH;AA/EgB;;;;;;;;;;;ACFrB;;;;;;AACA;AACI;AAEA;AACI;AACI;AACA;AAFQ;AADJ;AAHP;;;;;;;;;;ACDT;;;;;;AAEA;AACI;AACA;AACI;AACA;AACA;AACA;AAJQ;AAOZ;AACI;AACA;AACH;AAED;AACI;AACH;AAED;AACI;;AAEA;AACA;AACA;AACI;;AACA;AACI;AACA;AACH;AACJ;AAED;;AACA;;AACA;AACI;AACA;AACA;;AACA;AACI;AACA;AACH;AACJ;AACJ;AAED;AACI;AACA;AACA;AACA;;AACA;AACH;AAED;AACA;AACI;AACA;AACH;AAED;AACI;;AACA;AACH;AAED;AAAkB;;AACd;AAAkC;AAAA;AACrC;AAjEI;;;;;;;;;;ACDT;;;;;;AAEA;AACI;AACA;AAEA;AAEI;;AAGA;AACI;AACI;AAEH;AACJ;;AACD;;AACA;;AACA;;;AAGA;AACI;AAA6B;AAAA;AAChC;;;AAGD;AACA;AAGH;AA7BI;;;;;;;;;;ACHT;AACI;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AA7Da;;;;;;;;;;;;;ACAjB;;;;;;AAEO;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AADU;AAId;AACA;AAAqB;AAErB;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AAJM;AAMV;AACI;;AACA;AACI;AACA;AACH;;AACD;AACH;AAED;AACI;AADS;AAGT;AACA;AACA;AACJ;AACI;;AACA;AACI;AACA;AACH;;AACD;AACH;AAGD;AAEA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAPc;AAUlB;AACA;AACI;AACA;AACA;AACA;AACA;AALS;AAQb;AACI;AACH;AAhFkB;;;;;;;;;;;;;;ACDvB;;;;;;AADA;AAEA;AACO;AACH;AAEA;AAAO;;AACH;;AACA;;AACA;AACA;;AAEA;AACI;AACA;AACA;AACA;AACH;;AAED;AACI;AACA;AACA;;AACA;;AACA;;AACA;AACH;;AAED;AACI;AACA;AACA;;AACA;;AACA;;;AAGA;AAMI;AACI;AACH;;AACD;AACH;;;AAID;AAEI;AAGH;AACJ;;AAED;AACH;AAED;AACI;AACA;AACA;AACH;AAGD;AACI;AACA;AACA;;AACA;;AACA;AACA;AACH;AAGD;AACI;;AACA;AACI;AACI;AACI;AACA;AACA;AACH;;AAEL;AACA;AACI;AACI;AACA;AACA;AACH;;AAEL;AACI;AACI;AACA;AACA;AACH;AArBT;AAuBH;AApGkB;;;;;;;;;;;;;;ACHvB;;;;;;AAEO;AACH;AACI;AACH;AAED;AACA;AAEA;AACA;AACI;AACI;AACI;AACA;AAAuB;AAAoB;AAC9C;AAEJ;AACG;AACI;AACI;AACI;AACH;AAAa;AAAU;AAC3B;;AACD;AAAuB;AAAoB;AAC9C;AACJ;AACJ;AAED;AACI;AACI;AACI;AACA;AACI;AACH;AACJ;AAEJ;AACG;AACI;AACA;AACI;;AACA;AACI;AACI;AACH;AACG;AAIA;;AACH;AACJ;AACJ;;AACD;AAAuB;AAAwB;AAClD;AACJ;AACJ;AAGD;AACI;AACI;;AACA;AACI;AACH;;AACD;AAEA;AACA;AACA;AACA;AACH;AACJ;AAzEe;;;;;;;;;;;ACFpB;;;;;;AAEA;AACA;AACI;AAEA;AACI;AACI;;AACA;AACH;AACJ;AARI;;;;;;;;;;;;;ACHT;;;;;;AAEO;AACH;AACA;AACA;AACI;AAGH;AACD;AACI;AACI;AAEQ;AACA;AACI;AAAiC;AAAoB;AAAU;AAAwB;AAAxD;AAClC;AAEJ;AACR;AACJ;AACD;AACI;;AACA;AAAwE;AACpE;;;AAEA;AACI;AACI;;AACA;AACH;AACG;AACA;AAAsD;AAAA;;AACtD;AACI;AACA;;AACA;AACH;AACG;;AACA;AACI;AACA;AAAkD;AAAA;AAClD;;AACA;AACI;AACA;AACA;AAAA;AAAA;AACA;AACH;AACJ;AACJ;AACJ;AACJ;AA7BmE;;AAAA;AA8BvE;;AACD;AACH;AACD;AACI;AACA;AACA;AACH;AA3DgB;;;;;;;;;;;;;;ACFrB;;;;;;AACA;;AACO;AACH;AACI;;AAEH;AAED;AAAoF;AAAhE;AAAgE;;AAAA;AAAhD;AAAgD;;AAAA;AAArC;AAAqC;;AAAA;AAApB;AAAoB;;AAChF;;AACA;AAAsB;AAA2B;;AACjD;AACA;AAOH;AACD;AAAyF;AAAhE;AAAgE;;AAAA;AAAhD;AAAgD;;AAAA;AAArC;AAAqC;;AAAA;AAApB;AAAoB;;AACrF;;AACA;AAAsB;AAA2B;;AACjD;AACA;AAOH;AACD;AAAuF;AAAhE;AAAgE;;AAAA;AAAhD;AAAgD;;AAAA;AAArC;AAAqC;;AAAA;AAApB;AAAoB;;AACnF;;AACA;AAAsB;AAA2B;;AACjD;AACA;AAOQ;AACH;AAER;AAED;AAAkE;AAAd;AAAc;;AAC9D;;AACA;AACI;AACA;AACA;;AACA;;AACA;;AACA;AACA;AAGQ;;AAEA;AACH;AAER;AACJ;AAGD;AAAgE;AAAd;AAAc;;AAC5D;;AACA;AACA;AACA;AACI;;AACA;;AACA;AACA;AACA;AACH;;AAED;AACI;AAIA;AAIQ;AACA;AACH;AAGL;AACA;AAEA;;AACA;AACH;;AACD;;AAEA;AACI;AACA;AAA+D;AAAA;AAE/D;AAAsB;AAAA;AACzB;AACJ;AAKD;AACA;AACA;AAAuH;;AAAA;AAApF;AAAoF;;AAAA;AAA7D;AAA6D;;AAAA;AAA/C;AAA+C;;AAAA;AAAjC;AAAiC;;AAAA;AAAf;AAAe;;AACnH;;AACA;;AACA;;AACA;;AACA;AAEA;AACA;AACA;AACA;AAQQ;;AACA;;AACA;AACH;AAER;AAED;AACA;AAAyD;;AAAA;AAAd;AAAc;;AACrD;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;AACA;;AACA;;AACA;AAGQ;;AACA;AACH;AAER;AAED;AAAyD;;AACrD;;AACA;;AACA;AACI;;AACA;AACI;AACH;AACJ;;AACD;AAAuB;AAAA;AAC1B;AAED;AAA2E;;AACvE;;AACA;;AAEA;AACI;AACI;AACH;AACJ;;AACD;AAAuB;AAAA;AAC1B;AAED;AACI;AACA;AACA;AAOH;AACD;AACI;AACI;AACA;AAGH;AACJ;AACD;AACI;AACI;AACA;AACI;AACA;AACA;AASA;AACH;AACJ;AACJ;AACD;AACI;AACA;AACA;AACA;AAG2B;AAAF;AACI;AAAF;AAG9B;AACD;AACI;AACA;AAGQ;AACH;AACU;AAAa;AAAf;AAAgC;AAAF;AAC5B;AAAW;AAAb;AAEhB;AACD;AACI;AACI;AAEQ;;AACA;AACI;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACJ;AACJ;AACQ;AAAD;AAGf;AACJ;AACD;AACI;;AACA;AACI;;AAEA;;AACA;;AACA;;AACA;AACH;AACG;AACA;AACA;AACA;;AACA;AACH;AAEJ;AACD;AACI;AACA;;AACA;AACI;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AACA;AACI;AACI;AACA;AACH;AACG;AACA;AACH;;AAED;AACH;AAEJ;AACJ;AACD;AACI;AACI;AACI;AAEA;;;AACA;AACA;;AACA;;AACA;;AAGA;;AACA;AAAyC;AAA0E;;AACnH;AAEA;;AACA;AACA;AAAoC;AAAsB;AAC1D;AACA;AAEA;AACA;;AACA;AACI;AACH;AACJ;AACJ;AACJ;AACD;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAIgB;AACA;AACH;AAEgC;AAAD;AACC;AAAD;AAIrB;AAA8H;AAK7I;AACI;AAEqC;AAAD;AACC;AAAD;AAG5B;AACH;AAER;AACG;AACH;AACJ;AAGR;AACD;AACI;AACI;AAE8B;AAAD;AACC;AAAD;AAGhB;AAAD;AAGA;AACA;AACH;AAGZ;AACJ;AAxZa;;;;;;;;;;;;;;ACFlB;;;;;;AACO;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAO;;AACH;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AACI;AAAsB;AAAF;;;AAGpB;AAEC;;AACA;;AACA;;AACD;;AACA;;;AAGA;;AAGA;;AAKA;AACI;AAAsB;AAAF;;;AAEpB;AACH;AAJD;AAOI;AACI;AACH;AACG;AAA4C;AAAA;AAAA;AAAA;;AAExC;AACH;AACG;AACI;AACH;AACJ;AACJ;;;AAGD;;AACA;AACI;AADJ;;AAEA;;;AAEA;AACI;AACA;;AACA;AACI;;AACA;AACI;AACH;AACJ;;AACD;AACI;AACI;AACH;AACJ;AACJ;;AACD;AACI;;AACA;;AACA;AACI;;AACA;AACI;AACH;AACJ;;AACD;AACI;AACI;AACH;AACJ;AACJ;AACJ;;AACD;;AACA;AACI;AACI;AACI;AACH;AACJ;AACJ;;AACD;AAEH;;AACD;AACH;AAED;AACI;AACA;AACA;;AACA;;;AAJS;AAAA;AAAA;;;AAQT;AAAyC;AAAA;AACzC;AACA;AACA;;AAGA;;AACA;;AACA;;AACA;AAAsC;AAAtC;;;AAEA;AACA;;AACA;AAAsB;AAAe;AAAa;AAAU;AAAzB;AAAf;AACvB;AAED;AACA;AACI;AACA;;AACA;AAAsB;AAAe;AAAgB;AAA0B;AAA5C;AAAf;AACvB;AAID;AAAgE;AAAxD;AAAwD;;AAAA;AAAvC;AAAuC;;AAC5D;AACA;;AACA;;AACA;AACA;AAAkB;AAAe;AAAgB;AAAjC;AAChB;AACA;;AAOA;AACI;AACI;AACH;AACJ;;AACD;AACA;AAAoC;AAAA;AACpC;AAEA;AACA;AAEA;;AACA;;AACA;AACA;AACA;AAEA;;AACA;AACI;;AACA;;AACA;AACH;;AAED;;AACA;AACI;AACA;AACA;AACA;AACH;;AAED;AAAuB;AAAA;;AACvB;;AACA;AAGH;AAKD;AAAoB;;AAChB;;AACA;;;AAEA;;;AAEA;AACA;;AAGA;AAEA;AACA;AACA;AACA;;AAEA;AACI;AACA;AACA;AAEA;AACA;;AAEA;;AACA;AACH;;AAED;AAEH;AACD;AACI;AACA;AACA;;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AAN2B;AAQ/B;AACH;AAGA;AACG;AACI;AACA;AACA;AACA;AACA;AACA;AANI;AAQX;AAGD;AAA2D;;AACvD;;AACA;;AACA;AAEA;AACA;AACA;;;AACA;;AACA;;;AAGA;;AACA;AAAsB;AAAF;;AAEpB;;AACA;AAAgD;AAAvB;AAAuB;;AAC5C;AACA;AACA;AACA;;AAEA;;;AAGA;AAAsB;AAAF;AAGpB;;;AACA;AACI;AACH;AAFD;AAMI;AACH;AAFI;AAMD;AACH;AAFI;AAMD;AACH;;;AAGD;AACI;AACH;AAFD;AAMI;;AACA;AACH;AACJ;;;AAGD;;AACA;AACI;AACI;AACA;AACH;AACJ;;AACD;;AACA;AACI;AACA;;AACA;AACI;;AACA;AACI;AACH;AACJ;;AACD;AACI;AACI;AACH;AACJ;AACJ;;AACD;AACI;;AACA;;AACA;AACI;;AACA;AACI;AACH;AACJ;;AACD;AACI;AACI;AACH;AACJ;AACJ;AACJ;AAGD;AACA;AACI;AACA;;AACA;;AACA;AAAsB;AAAF;;AACpB;AAIH;AAED;AACI;;AACA;AAAsB;AAAF;;AACpB;AAAsB;AAAF;AACvB;AAED;AACI;;AACA;;AACA;;AACA;;AACA;;AACA;AAAsB;AAAF;AACvB;AAED;AACI;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACI;AAGI;AACI;AAEH;;;AAGT;AAAsB;AAAF;AAEvB;AAED;AACA;AAAiC;AAApB;AAAoB;;AAC7B;AACA;;AACA;AACI;;AACA;AAAsB;AAAF;AACvB;;;AAED;AAAsB;AAAqB;AAAc;AAAc;AAAnD;;;AAEpB;;AAEA;AACI;AAAyB;AAAA;AAC5B;;AACD;AACI;AACH;;AAED;;AACA;AACH;AAED;AACI;;;AAEA;;AACA;;AACA;AACI;;AACA;;AACA;AACH;AACG;AACH;;AACD;AACH;AAGD;AAA2F;;AACvF;AACA;AACA;AACA;;AACA;;AACA;AACI;AACA;AACA;;AACA;AACI;;AAGA;;AAEA;AACH;AACJ;;;AAGD;AACA;;AAEA;;AAEA;AACI;AACI;;AACA;;AACA;AAGgB;AAAA;AAEnB;;AACD;;AACA;AACI;AACH;;AACD;AAAuB;AAAA;AAE1B;AACG;;AACA;AAA8C;AAAA;;AAC9C;AAAuB;AAAA;AAC1B;;AACD;AACH;AAGD;AACI;;AAEA;AACI;;AACA;AAAsB;AAAF;;AACpB;AACH;;AACD;AAAsB;AAAF;;AACpB;;AACA;AACI;AACI;AACI;AACI;AAEH;AACJ;AACJ;AACJ;AACJ;AAGD;AACI;;AACA;;AACA;;AACA;;AACA;;AAEA;AAAsB;AAAqB;AAAc;AAArC;;AACpB;;AACA;AACH;AAGD;AACA;AACI;AACA;;AACA;;AACA;;AACA;AACH;AACD;AACI;AACI;AACA;AACA;AACA;AACA;;AALsB;AAOlB;;AACA;AACI;AAAgD;AAAA;AAChD;AACA;AACA;AACA;AACA;AACH;AAfiB;;AAMtB;AAAwB;AAUvB;;AACD;AACI;;AACA;AACH;AAEG;AACI;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACJ;AACJ;AACA;AACJ;;;AACG;AACK;AACI;AACA;AACI;;;AAEA;;AACA;;AAEA;AAAsB;AAAqB;AAAc;AAArC;;;AAExB;AAER;;AAIP;AACJ;AACD;AACI;AACA;;AACA;AACQ;AACA;;AACA;;AACA;AACP;;AARuB;AAUpB;;AAEA;;AACA;AACI;AACI;AACI;AACI;AACH;;AACD;AACH;AACJ;AACJ;AACG;AACI;AACH;AACJ;AA1BmB;;AASxB;AAAuD;AAkBtD;;AAIJ;AACD;AACI;AAEI;AACA;;AACI;AACI;AACH;;AACD;;AACA;AACI;AACH;AAEL;AACJ;;AAEH;AACD;AACI;AACI;;AAEA;AACA;AACA;AACA;AACA;;AAPsB;AASlB;;AACA;AACI;AAAgD;AAAA;AAChD;AACA;AACA;AACA;AACA;AACA;AACH;AAlBiB;;AAQtB;AAAwB;AAWvB;;AACD;AACI;;AACA;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACI;AACI;AACA;AACA;;;AACQ;;AACA;;AACA;;AACA;AACI;;AACA;AACI;AACI;AACH;;AACD;AACI;AACA;;AACA;;AACA;;AACA;AAAsB;AAAF;;AACpB;AACH;AACJ;AACJ;AAET;AACA;AACJ;AACJ;;AAEH;AACJ;AACD;AACI;AACI;AACA;;AACA;AACI;;AACA;AACI;AACI;AACA;AACH;AACG;AACH;AACJ;AACJ;;;AAED;AAEH;AACJ;AACD;AACI;AACA;;AACA;AACI;;AACA;AACI;AACA;AACI;;AACA;;AACA;AACI;AACA;AACH;;AACD;AACI;AACH;AACJ;;AACD;AACI;AACA;AACA;;;AAEA;AACI;AACH;AACJ;AACJ;AACJ;;AACD;AACI;AACA;;;AAEA;AACH;AACJ;AACD;AACI;;AAEA;;;AAEA;AACI;AACI;AACA;AAAsB;AAAF;;AACpB;AACH;AACJ;AACJ;AACD;AACI;AACA;;AACA;AACI;AACI;AACI;;AACA;AACI;AACH;AACG;AACH;;AACD;AACI;AACH;AACJ;AACJ;AACJ;;AACD;AACH;AACD;AACI;AACA;AACA;AACI;AACI;AACH;AACG;AACI;AACI;;AACA;AACI;AACI;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;AACD;AACH;AAl1Be;;;;;;;;;;;;;;ACDpB;;;;;;AAEO;AACH;AACI;AACH;AAED;AACA;AAAkB;;AACd;AAA8C;AAC9C;;AACA;;AACA;AAEA;AACA;AAEA;AACI;AACI;AACA;AACH;AACG;AACA;AACH;AACJ;AACG;AACA;AACH;AACJ;AAED;AAAmC;;AAC/B;AAA8C;AAC9C;;AACA;AACI;AACA;AACH;;AACD;AAEA;AACI;;AACA;;AACA;;AACH;AACG;;AACA;;AACA;AACA;AACH;AACJ;AAED;AAAuC;AAAf;AAAe;;AACnC;AACA;AACI;AACA;AACA;AAHgC;;AAKpC;AACI;;AACA;AACH;AACJ;AAGD;AACA;AACA;AACI;;AACA;AACI;AACH;AACJ;AAvEkB;;;;;;;;;;;ACFvB;AACA;AACA;AACA;AACA;AACA;AAEA;AACI;AAEA;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfQ;AAkBZ;AAEA;AAEA;;AAzBK;;;;;;;;;;;;;ACPT;;;;;;AAEO;AACH;AACA;AACA;AACA;AACA;AAEA;AACI;AACA;;AACA;AACI;AACM;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAiB;AAAgB;AAAnC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAiB;AAAgB;AAAnC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAiB;AAAgB;AAAnC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AAEJ;AAEA;AACM;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAiB;AAAgB;AAAnC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAiB;AAAgB;AAAnC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAiB;AAAgB;AAAnC;AACE;AAAkB;AAAoB;AAAxC;AACE;AAAkB;AAAoB;AAAxC;AAEJ;AACH;AAlCD;AAsCI;AACI;;AAEA;AACI;AACA;AACI;AAAwD;AAAA;AAC3D;AACJ;AAEJ;AAAW;AAAA;AAEf;;;AAID;AAAsB;AAAA;;AACtB;AAAsB;AAAA;AACzB;AAKD;AAAa;;AACT;AACA;AAGQ;AACA;AACH;AACS;AAAA;;AAGd;AAGQ;AACA;AACH;AACS;AAAA;AACjB;AAED;AACI;;AACA;AACI;AACA;AACI;AACA;AACA;AACA;AACA;AALW;AAOlB;;AACD;AACH;AAGD;AACI;;AACA;AACI;;;AAEA;AACI;;AACA;AACA;;AACA;AACH;;AACD;AACI;AAEH;;AACD;;AACA;;AAEH;AAAW;AAAA;AAKf;AAED;AAAoC;AAA7B;AAA6B;;AAChC;;AAGA;AACA;AACA;;AAEA;AACQ;;AAEA;;AAEA;AAEA;AACA;AAEA;;AACA;AACI;AACI;;AACA;;AACA;AAA0B;AAAuB;AAAzB;AACxB;;AAGA;AACI;AACA;AACH;;AACD;AACH;AACJ;;;AAGD;;AACA;;AACA;;;AAGA;AACA;;AAEA;AAGQ;AAAgE;AAAF;;AAC9D;AACH;;AAGL;AAGQ;AAA+D;AAAF;;;AAE7D;AAGQ;;AACA;;AACA;;;AAEA;AAAkB;AAA4C;AAAA;AAA5C;AACrB;AAEG;AACH;AAER;AAER;AAED;AACA;AACA;AACA;AAEP;AAID;AAIA;AACA;AACA;AACI;AACA;;AACA;AACQ;AACA;;AAGA;AACH;;AACD;AAA8B;AAAA;;AAGlC;AACI;;AACA;AACH;AACJ;AAED;AACI;AAIH;AArPsB;;;;;;;;;;;ACF3B;;;;;;AACA;AACI;AAEA;AAEA;AACI;;AACA;AACI;AACA;AACA;AACA;;AACA;AACI;AACH;AACJ;;AACD;AACI;AAEA;AACA;AACA;AAEA;AACA;;AACA;AACI;AACA;AACA;AACH;AACJ;AACJ;AA/BI;;;;;;;;;;ACDT;;;;;;AACA;AACI;AAEA;AACA;AACI;AACA;AACH;AACD;AACI;AACH;AACD;AACI;AACA;AACH;AACD;AACA;AACA;AACA;AACA;AACI;AACA;AACI;AACI;;AACA;;AACA;AACI;AACA;AACH;AAED;;;AACA;;AAEA;AACH;AACJ;AAEJ;AArCI;;;;;;;;;;;;;ACDT;;;;;;AACO;AACH;AACI;AACN;AACD;AACA;AACA;AACC;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXQ;AAaT;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXS;AAaV;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXW;AAaZ;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXY;AAab;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXO;AAaR;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXqB;AAatB;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXY;AAab;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXW;AAaZ;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXU;AAaX;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXU;AAaX;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXQ;AAaT;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXO;AAaR;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXkB;AAanB;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXsB;AAavB;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXS;AAaV;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXS;AAaV;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXO;AAaR;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXQ;AAaT;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXO;AAaR;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXK;AAaN;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXsB;AAgBvB;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXO;AAaR;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXmB;AAapB;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXiB;AAalB;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXuB;AAaxB;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXU;AAaX;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAX8B;AAtVtB;AAoWV;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3Ba;AA1We;;;;;;;;;;;;;;ACA9B;;;;;;AACA;;AACO;AACH;AACA;AAAM;;AACF;AACA;;AACA;;AACA;AACI;AAEI;;AACA;AACI;AACH;;AAED;;AACA;AACI;AACH;;AACD;AACH;AACJ;AACJ;AACD;AAAmB;;AACf;AACA;AACA;AACK;AACJ;;AACD;AACI;AACA;;AACA;AACI;;AACA;AACI;;AACA;AACI;AACA;AACA;AACH;AACJ;AACJ;;AACD;AACH;;AAGJ;AACD;AACI;AACI;AACA;AACA;AACA;AACH;AACJ;AACD;AAAuC;;AACnC;AACI;AACA;AACI;;AAEA;AACI;AACH;AACJ;;AACD;AACI;AACH;AACG;AACA;AACH;AACJ;AACG;AACA;AACH;AAEJ;AAED;AACI;AACA;AACH;AACD;AACI;;AACA;AACI;AACA;AACA;;AACA;AACI;AACA;AACA;;AACA;AACI;AACH;AACJ;AACJ;;AACD;AACH;AACD;AACI;;AACA;AACI;AACI;AACI;AACI;AAEH;AACG;AACI;AACH;AACJ;AACJ;AACJ;AACJ;;AACD;AACH;AACD;AACI;AACA;AACA;;AACA;AAAqB;AAAD;;AACpB;AACH;AACD;AACI;;AAEA;AAEH;AACD;AACI;AACH;AACD;AACI;AACH;AAvImB;;;;;;;;;;;;;;ACHxB;;;;;;AAEA;AASA;AAEO;AACH;AACI;AACI;;AACA;AACH;AACJ;AAGD;AACI;AACI;AACH;AACJ;AAGD;AACI;AACI;AACH;AACG;AACH;AACJ;AAED;AACA;AACA;AAEA;AACI;AACI;;AAEA;AACI;;AACA;;;AACA;;AACA;AAAsB;AAAF;;AACpB;;AACA;AACH;;;AAED;;AACA;AACH;AACJ;AAGD;AACA;AACA;AACA;AACI;AACA;AAAqC;AAAS;;AAC9C;AACA;AACA;;AAGA;AACI;AACI;AACH;AACG;AACH;AACJ;AAEJ;AAlEgB;;;;;;;;;;;;;;ACbrB;;;;;;AACA;;AACO;AACH;AACI;;AAGA;AACI;;AACA;AACA;AACH;;AAGD;AACI;AACI;;AACA;AACH;AACJ;AACJ;AAED;AACI;AACA;AACA;AACA;AACA;AACH;AAED;AAAW;;AACP;AAAiD;AAAA;AACpD;AAED;AACI;AACA;;AACA;AACI;AACH;AACG;AACA;;AACA;AACH;;AAED;AACH;AAED;AACI;AACA;AACA;AACH;AAED;AACI;;AACA;AAAiC;AAAjC;AACH;AAvDoB;;;;;;;;;;;;;;ACFzB;;;;;;AACO;AACH;AACA;AACA;AACA;AACA;AAEA;AACI;AACA;AACI;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACH;AACJ;AAED;AACI;;AACA;AACH;AAED;AACI;;AACA;AACH;AAED;AACI;;AACA;AACH;AAED;AAA0B;;AACtB;AACI;AACH;AACJ;AAED;AAA4B;;AACxB;AACI;AACH;AACJ;AAGD;AAEA;AACI;AACA;;AAGA;;AAEA;AAEA;AACA;;AACA;AACI;AACI;AACA;AACH;AACJ;;AACD;AACA;;AAGA;AACH;AAGD;AACA;AACI;AACA;AACH;AAED;AACA;AACI;AACA;;AAEA;AACI;AACA;;AACA;AACI;AACA;AACA;;AAEA;AACH;AACJ;;AAED;AAAS;AAAY;AAAd;AACV;AAED;AACI;AACA;AAAmD;AAAA;AACtD;AAGD;AACA;AAA4B;AAAA;;AAExB;AACA;AACA;AACA;AAGA;;AACA;;AACA;;AACA;AACI;AACA;;AAEA;AACI;AACA;AACA;;AAGA;AACA;AACA;AACH;;AACD;AAA+B;AAAA;AAClC;;AACD;AAGA;;AACA;AACA;AACA;AACH;AAlJc;;;;;;;;;;;ACDnB;AACI;AAEI;AACI;AACH;;AAED;AACI;AACA;AACA;AACA;AACA;AACA;;AACA;AACI;AACH;;AACD;AACI;AACI;AACH;AACG;AACH;AACJ;AACG;AACH;AACJ;;AAED;AAAsB;AAA8B;;AACpD;AAAsB;AAA8B;;AACpD;AAAsB;AAAqB;;AAC3C;AAAsB;AAA0B;;AAEhD;AACI;AACA;AACH;;AAAA;;AAED;AACI;AACA;AACH;;AAAA;;AAED;AACI;AACA;AACH;;AAAA;;AAED;AACI;AACA;AACH;;AAAA;;AAED;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACI;AACA;AACA;AACA;AACH;;AACD;AACA;AACA;AACA;AACA;AACA;AACH;;AAAA;;AAED;AACI;AAAA;AAAA;AAAA;;AACA;AACI;AACA;AACA;AACH;;AACD;AACH;;AAAA;;AAED;AACI;AACA;;AAEA;AAEI;;AAEA;AACI;AACH;AAEG;AACA;AACH;AAEG;AACA;AACA;AACH;AAEJ;;AAED;AACH;;AAAA;AAED;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAgB;AAAgB;AAAgB;;AAEhD;AACI;AAAQ;AAAQ;AAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACD;AACA;AACH;AApMY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAjB;AAEM;AAGN;AAAqC;AAArC;AAAA;AAEuB;;AA8FnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AA/GI;AACI;AACA;AACA;AACA;AACJ;AACM;;;;AACF;AACI;AACA;AACH;AAGK;AACN;AACA;AACI;AACJ;AACI;AACJ;AACA;AACA;AAGI;AACA;AACA;AACJ;AACA;AAEI;AACJ;AACI;AAGA;AACJ;AACQ;AACA;AACA;AACJ;AACH;AACG;AAEJ;AACA;;;AACH;AAEK;;;;;;;AAEsB;;AAAd;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACD;;;AAEA;;;;;AAEP;AACK;;;;;;;AASQ;AACN;AACA;AAEM;AACN;AAEM;AACA;AACU;;AAAV;AACN;;AAAA;;;;AAEA;;;;;;AAEP;AA5FkB;AAAlB;AAAoD;AAFpC;AADpB;AACoB;AAkHrB;AAlHA;AAAqB;;;;;;;;;;;;;ACLrB;;;;;;AAEO;AACH;AACA;AACI;AACA;;AACA;AACH;AACD;AACI;;AACA;AACI;AACI;AACI;AACI;AAAqD;AAAF;;AACnD;AACH;AAEJ;AACJ;AACJ;AAID;;AACH;AACD;AAAkB;;AACd;AACA;;AACA;AACI;AACI;AACI;AACA;;AACA;AACH;AACJ;AACJ;AACJ;AArCgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAf;AAGN;AAAmC;AAAnC;AAAA;AACuB;;AAsEvB;AApEU;;;;AACF;AACI;AACA;AACH;AAEK;AACN;AACA;AACI;AACJ;AACI;AACJ;AACA;AACA;AAGI;AACA;AACA;AACJ;AACA;AAEI;AACJ;AACI;AAGA;AACJ;AACQ;AACA;AACA;AACJ;AACH;AACG;AACJ;AAEA;AAEA;;;AACH;AAEK;;;;;;;AAEsB;;AAAd;AACA;AACF;AACA;AACA;AACA;AACH;AACD;;;AAEA;;;;;AAEP;AAEK;;;;;;;AAEkB;;AAAV;AACN;AACA;;AAAA;;;;AAEA;;;;;;AAEP;AApEkB;AAAlB;AAAoD;AADpC;AADpB;AACoB;AAuErB;AAvEA;AAAqB;;;;;;;;;;;;;ACLrB;;AACA;;AACA;;;;;;;;AAEO;AACH;AAAO;;AACH;;AACA;;AACA;AACI;AACA;AACH;AACJ;AAED;AACI;;AACA;;AAIA;AACH;AACD;AACI;AACA;AACH;AAED;AAA0B;;AACtB;AACA;AAAsB;AAAA;;AACtB;AACA;AACA;AACA;;AACA;AAAsB;AAAF;;AAEpB;AACI;AACA;AACI;;AACA;AAAsB;AAAF;;AACpB;AAEH;AAAS;AAAA;AACb;AAAS;AAAA;AACb;AAGD;AAAsB;;AAClB;AACA;AAAsB;AAAA;;AACtB;AACA;AACA;AACA;;AACA;AAAsB;AAAF;;AAEpB;AACI;AACA;AACI;;AACA;AAAsB;AAAF;;AACpB;AAEH;AAAQ;AAAA;AACZ;AAAQ;AAAA;AACZ;AAGD;AACI;AACA;AACA;;AACA;;AACA;AACH;AAGD;AACI;;AACA;AACI;AAAuB;AAAoB;;AAC3C;AACH;;AAED;AACI;AACA;AACH;;AACD;AAEQ;AAAuB;AAAoB;;AAC3C;AACH;AAEG;AAAoB;AAAkB;;AACtC;AACH;AAER;AACD;AACI;AACI;AACI;AACA;AACH;AACG;;AACA;AACH;AACJ;AACG;;AACA;AACH;AACJ;AACD;AACI;AACI;AACA;AACH;AACJ;AAnHiB;;;;;;;;;;;;;;ACJtB;;;;;;AACO;AAEH;AAAM;;AACF;AACI;AACH;AACJ;AACD;AACI;AACI;AACH;;AAED;AACH;AACD;AACI;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AACH;AACD;AACI;AACA;;AACA;;AACA;;AACA;;AACA;AACA;AAQH;AACD;AAAS;;AACL;AACA;;AACA;;AACA;AACI;;;AAEA;AACA;;AACA;AAAsB;AAAF;AACvB;AACJ;AAGD;AACI;AACA;AACA;AACA;AACH;AAED;AACI;AACA;;AACA;AACH;AACD;AACI;AACA;;AACA;AACH;AACD;AACI;AACA;AACH;AACD;AACI;AACA;;AACA;;AACA;AACA;AACA;AAoBY;AACA;AACH;AAGZ;AAzGgB;;;;;;;;;;;;;;ACDrB;;;;;;AACO;AACH;AAAM;;AACF;AACI;AACH;AACJ;AACD;AACI;AACA;AACH;AACD;AACI;AACA;AACA;;AACA;;AACA;;AACA;;AACA;AACH;AACD;AACI;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AACA;AAQH;AACD;AAAS;;AACL;;AACA;;;AAEA;AACI;AAGA;AACA;;;AACA;;AAEA;;AACA;AAAsB;AAAF;AACvB;AACJ;AAGD;AACI;AACA;AACA;AACA;AACH;AAED;AACI;AACA;;AACA;AACH;AACD;AACI;AACA;;AACA;AACH;AACD;AACI;AACA;AACH;AACD;AACI;AACA;;AACA;;AACA;AACA;AACA;AAoBY;AACA;AACH;AAGZ;AA1HuB;;;;;;;;;;;;;;ACD5B;;;;;;AAEO;AAEH;AAAM;;AACF;AACI;AACH;AACJ;AACD;AACI;AACA;AACH;AACD;AACI;AACA;AACA;;AACA;;AACA;;AACA;;AACA;AACH;AACD;AACI;AACA;AACA;;AACA;;AACA;;AAEA;AAQH;AACD;AAAS;;AACL;;AACA;;;AAEA;AACI;AAGA;AACA;;;AACA;;AAEA;;AACA;AAAsB;AAAF;AACvB;AACJ;AAGD;AACI;AACA;AACA;AACA;AACH;AAED;AACI;AACA;;AACA;AACH;AACD;AACI;AACA;;AACA;AACH;AACD;AACI;AACA;AACH;AACD;AACI;AACA;;AACA;;AACA;AACA;AACA;AAoBY;AACA;AACH;AAGZ;AA1GqB;;;;;;;;;;;;;;ACF1B;;;;;;AACO;AACH;AACA;AAAM;;AACF;AACI;AACH;AACJ;AACD;AACI;AACI;AACH;;AACG;AACP;AACD;AACI;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AAEH;AACD;AACI;AACA;AACA;;AACA;;AACA;;AACA;;AACA;AACA;AAQH;AACD;AAAS;;AACL;AACA;;AACA;;AACA;AACI;AAGA;AACA;AAEA;;;AACA;AACA;;AACA;AAAsB;AAAF;AACvB;AACJ;AAGD;AACI;AACA;AACA;AACA;AACH;AAED;AACI;AACA;;AACA;AACH;AACD;AACI;AACA;;AACA;AACH;AACD;AACI;AACA;AACH;AACD;AACI;AACA;;AACA;;AACA;AACA;AACA;AAoBY;AACA;AACH;AAGZ;AA/GoB;;;;;;;;;;;;;;ACDzB;;;;;;AAEO;AAEH;AACA;AACI;AACA;AAFS;AAIb;AAEA;AAAO;;AACH;AACI;AACA;AACH;AACJ;AAED;AACI;AACA;;AACA;AACH;AAED;AACI;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;AAEA;AACA;;AAWA;AACA;AACA;AACH;AAED;AACI;;;AAGA;;;AAGA;AACA;;AAGA;;AACA;AAAsB;AAAF;AACvB;AAGD;AACI;AACA;AACA;AACA;AACH;AAED;AACI;AACA;;AACA;AACH;AAED;AACI;AACA;AACH;AAjFc;;;;;;;;;;;;;;ACFnB;;;;;;AAEO;AACH;AACA;AACI;AACA;AAFkB;AAItB;AACI;;AACA;AACI;AACI;;AACA;AAAuB;AAAA;AAAA;AAAA;;AAEnB;AACA;AACA;;AACA;AAAsB;AAAF;AACvB;AACG;;AACA;AAA+B;AAAA;AAAA;AAAA;;AAE3B;;AACA;AACA;;AACA;AAAsB;AAAF;AACvB;AACG;;AADG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAKH;AACI;AACI;AACI;AACA;AACH;AACG;AACA;AACH;AACJ;AACG;AACA;AACH;AACJ;AACG;AACA;AACH;;AAEJ;AACJ;AACJ;AACJ;AACJ;AACD;AACI;AACA;AACA;;AACA;;AACA;;AACA;;AACA;AACI;AACH;AAEA;;AACD;AACH;AACD;AACI;AACI;AACI;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;AACA;AACI;AACI;AACA;AACA;AACA;AACH;AACJ;AACJ;AACJ;AACJ;AACD;AACI;AAAwC;;AACpC;;AACA;AAEA;AACA;;AACH;AACJ;AACD;AACI;;AADc;AAAA;AAAA;AAAA;;AAGd;;AACA;AACI;AACI;;AACA;AAAsB;AAAF;AACvB;AACJ;AACJ;AACD;AACI;;AADe;AAAA;AAAA;AAAA;;AAGf;;AACA;AACI;AACI;;AACA;AAAsB;AAAF;AACvB;AACJ;AACJ;AACD;AACI;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;;AACA;;AAEA;AACA;AACA;;AACA;;AAEA;AACA;;AACA;;AACA;;AAEA;AACA;AACA;;AACA;;AACA;;AACA;AACH;AAxJoB;;;;;;;;;;;;;;ACFzB;;;;;;AAEO;AACH;AACA;AACA;AACA;AACA;AAEI;;AACA;;AACA;;AAEA;AACA;AACA;;AAEA;AACI;AACA;AACA;;AACA;AACI;AACA;AACA;AACH;AACG;AACA;AACA;AACH;;AACD;AAAqB;AAAD;;AACpB;AAAqB;AAAD;;AACpB;AAAqB;AAAD;;AACpB;AACH;;AAED;AACA;AACA;;AAEA;AAAsC;AAAA;;AACtC;AAAyC;AAAA;;AACzC;AAAyC;AAAA;;AACzC;AACI;AACA;AACA;AACH;AAEJ;AACD;AACI;AACI;AACI;AACH;;AACD;AACI;AACA;;AACA;AACH;AACG;AACA;AACH;AACJ;;AACD;AACI;AACI;AACH;;AACD;AACI;AACA;;AACA;AACH;AACG;AACA;AACH;AACJ;;AACD;AAEI;AACI;AACH;;AACD;AACI;AACA;;AACA;AACH;AACG;AACI;AACH;AACG;AACA;AACH;AACJ;AACJ;AACJ;AAED;AACI;;AACA;;AACA;AACI;;AACA;AAA8B;AAAA;AACjC;AACG;;AACA;AACI;;AACA;AAEI;AAAA;AAEP;AACG;AAEQ;;AACA;AACH;AAEG;AACI;;AACA;AAEI;AAAA;AAEP;AACG;;AACA;AAEI;AAAA;AAEP;AAGJ;AAER;AAEJ;AACJ;AACD;AACI;;AACA;AAAqB;AAAD;;AACpB;;AACA;;AACA;;AACA;AAKH;AACD;AACI;;AACA;;AACA;AACI;;AACA;AAAoC;AAAA;AAEvC;AACG;;AACA;AACI;;AACA;AAEI;AAAA;AAEP;AACG;AAEQ;;AACA;AACH;AAGG;AACA;AACI;;AACA;AAEI;AAAA;AAEP;AACG;;AACA;AAEI;AAAA;AAEP;AAEJ;AAER;AACJ;AACJ;AACD;AACI;;AACA;AAAqB;AAAD;;AACpB;;AACA;;AACA;;AACA;AAKH;AACD;AACI;;AACA;;AACA;;AACA;AACI;;AACA;AACH;AACG;;AACA;AACI;;AACA;AAEI;AAAA;AAEP;AAEG;AAEQ;;AACA;AACH;AAEG;AACA;AACI;;AACA;AAEI;AAAA;AAEP;AACG;;AACA;AAEI;AAAA;AAEP;AAGJ;AAER;AAEJ;AACJ;AACD;AACI;;AACA;AAAqB;AAAD;;AACpB;;AACA;;AAKA;AACI;AACH;AACJ;AACD;AACI;;AACA;AAAqB;AAAD;;AACpB;AACH;AACD;AACI;;AACA;AAAqB;AAAD;;AACpB;AACH;AACD;AACI;;AACA;AAAqB;AAAD;;AACpB;AACH;AACD;AACI;;AACA;AACI;AACA;;AACA;AACI;AACA;AACH;AACG;AACA;AACH;;AACD;AACA;AACA;AACA;;AACA;AACH;AACJ;AAvSsB;;;;;;;;;;;;;;ACF3B;;;;;;AAEO;AACH;AACA;AAEA;AACG;AACF;AAED;AACI;AACA;AACA;AAGQ;;AACA;AACH;;;AAIL;AAGQ;;AACA;AACH;;;AAIL;AAGQ;;AACA;;;AAEA;AACH;;;AAIL;AAGQ;;AACA;AACI;AACH;AACJ;;;AAKL;AAEI;AAAA;;;AAKJ;AAEI;AAAA;AAMJ;;;AACA;AAGQ;;AACA;AACI;;AACA;;AACA;;AACA;AACH;;AAEJ;;;AAIL;AAGQ;;AACA;AACH;;AAEL;AAGQ;;AACA;AACH;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA;AAIQ;AACA;AACA;AACA;AACA;;AACA;;AACA;AACH;AAML;;;AACA;AAGQ;;AACA;AACI;;AACA;AACI;AACH;AACJ;AACJ;AAGL;;;AACA;;AACA;AAGQ;;AACA;;AACA;;AACA;AACH;;AAEL;AAGQ;;AACA;AACH;AAGL;;;AACA;AAGQ;;AACA;AAGQ;;AACA;;;AAEA;;AACA;AACH;AAER;;AAEL;AAGQ;;AACA;AACI;;AACA;;AACA;;AAEA;;AAGA;;AAEH;AACJ;;AAEL;AAGQ;;AACA;;AACA;;AACA;;AACA;AACI;AACH;AACJ;;;AAIL;;AACA;;AACA;AAGQ;;AACA;;AACA;;AACA;AACI;AAGI;AAAA;AAAA;AAEP;AACG;AACH;AACJ;;AAGL;AAGQ;;AACA;;AACA;AACH;AAER;AAED;AACA;AACI;AACA;AACH;AAED;AACI;AACA;AAEH;AAED;AACA;AACI;;AACA;;AACA;AACH;AAED;AACI;;;AAEA;AACA;AAAuC;AAAA;AAC1C;AAED;AACI;;AACA;AACH;AAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACI;AAGA;AACA;AACA;AACH;AAED;AACI;AAEA;AACH;AAGD;AACA;AACI;AACA;AACA;AACH;AAED;AACI;AACA;AACH;AAGD;AACI;AACA;;AACA;;AACA;AACA;AACA;AAOH;AACD;AACI;AACA;AACA;AAEgB;AAAA;;AAGhB;;AACA;AAIH;AACD;AACI;AACA;AACA;AAEgB;AAAA;;AAGhB;AACH;AAjWa;;;;;;;;;;;;;;ACFlB;;;;;;AACO;AACH;AACA;AACA;AACA;AAEA;AACI;AACI;AACA;AACA;AACA;AACH;AACG;AACA;AACA;AACH;AACJ;AAED;AACI;AACI;AACA;AACA;AAHgB;;AAMpB;AACH;AA3Be;;;;;;;;;;;;;;ACDpB;;;;;;AAEO;AACH;AACI;;AACA;AACI;;AACA;AAEH;AACJ;AAGD;AAAsC;AAAvB;AAAuB;;AAClC;AACA;AACA;AAAyB;AAAS;;AAClC;AACH;AAGD;AACI;AACI;AACI;AADqB;AAG5B;AACJ;AAED;AACI;AACA;AACA;AACH;AAGD;AACA;AACI;AACI;AACA;AAAgD;AAAF;AACjD;;AACD;AACI;AACA;AAA4C;AAAF;AAC7C;;AACD;AACI;AACA;AAA6C;AAAF;AAC9C;;AACD;AACI;AACA;AAA6C;AAAF;AAC9C;;AACD;AACI;AACA;AAA6C;AAAF;AAC9C;;AACD;AACI;AACA;AAA6C;AAAF;AAC9C;;AACD;AACI;AACA;AAA6C;AAAF;AAC9C;;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACH;AACD;AACI;AACA;AACH;AACD;AACI;AACA;AACH;AACD;AACI;AACA;AACH;AACD;AACI;AACA;AACH;AACD;AACI;AACA;AACH;AACD;AACI;AACA;AACH;AACJ;AA1GkB;;;;;;;;;;;ACFvB;AAGA;;AACA;AAEA;AACA;;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACI;;AACA;AAAmB;AAAS;;AAC5B;AACA;AACH;;AAED;AAAe;AAAA;;;AACf;AAA4B;AAA+B;;AAC3D;AAA4C;AAAsF;;AAClI;AACI;AACA;AAA+B;AAC3B;AAAI;;AACA;AACH;AACJ;AACJ;;;;;;;;;;;;;ACvCD;;;;;;;;;;;;AAGA;AAEO;AACH;AAEA;AACI;AACH;AAED;AACA;AAA4C;AAAvB;AAAuB;;AACxC;AAAiB;AAAkB;AAApB;;AACf;AAA0B;AAAmB;;AAC7C;AACA;AACH;AAED;AACI;AACA;AACH;AAED;AAAoE;AAAnC;AAAmC;;AAAA;AAAlB;AAAkB;;AAChE;AACA;AAEA;AACA;AAAmB;AACf;AACI;AACH;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACI;;AACA;AACH;AACJ;AACJ;AAGD;AACI;AACA;AACA;;AACA;AACI;AAAsB;AAAQ;;AAC9B;AACA;AACH;;AACD;AACH;AAGD;AACI;AACI;AACA;AAAmC;AAA2C;AAC9E;AACH;AACG;AACA;AACH;AACJ;AAGD;AACI;AACH;AAED;AACA;AACI;AAAa;AAAQ;;AACrB;AAAoB;AAAmC;;AACvD;AACH;AAGD;AACI;AAAA;AAAA;AAAA;;AAIA;AAAe;AAA0C;;AACzD;AACI;AACA;AACA;AACH;;AACD;AACH;AAED;AACA;AACA;AACI;AAAA;AAAA;;AAGA;AACI;AACA;AACH;;AACD;AAAA;AAEA;AACI;AACA;AACH;AACD;AACH;AAED;AACI;;AACA;;AACA;AACA;AACA;AACH;;AAGD;;;;;AAMA;AAAuC;AAApB;AAAoB;;AACnC;;AACA;AACH;AAED;AAA+C;AAAvB;AAAuB;;AAC3C;AAAA;;AAEA;;AACA;AAAkB;AAAmB;;AACrC;AACH;AACD;AACQ;AACP;;AACD;;;;;;;;;AASA;;;;;;;;;;;;;AAcA;AACI;AACA;AACA;AACI;AACA;AACH;AACD;AACA;AACA;AACI;AACI;AACA;AACH;AACJ;AACD;AACH;;AAGD;;;;AAIA;AACI;AACA;AACA;AACA;AACA;AAAS;AAAM;AAAO;AAAS;AAAxB;AACV;;AAED;;;;;AAKA;AAA0B;AAAA;AAAA;AAAA;AAAA;;AAEtB;AAAgB;AAA+C;;AAC/D;AAAiB;AAAgD;;AACjE;AAAmB;AAAqD;;AACxE;AACH;;AAED;;;;;AAKA;AACI;AACI;AACH;;AAHwB;AAAA;AAAA;AAAA;AAAA;;AAKzB;AAAgB;AAA+C;;AAE/D;AACA;AACA;AACA;AACA;AACH;;AAGD;;;;;;;;AAQA;AACI;;AACA;AAAoB;AAAiB;;AACrC;AACI;AACH;;AACD;AACI;AACI;AACA;AACH;;AACD;;AACA;;AACA;;AACA;;AACA;;AAEA;AACI;;AACA;AACI;AACH;AACJ;;AAAA;AACJ;;AACD;AACA;AACH;AAID;AACA;AAAqG;AAAnE;AAAmE;;AAAA;AAA9C;AAA8C;;AACjG;AACA;AACI;AACI;AACI;AACH;AACJ;AACG;AACH;;AACD;AACA;AACA;AACH;;AAED;AACI;AACI;;AACA;AAAwC;AAAoB;AAC/D;AACJ;AACJ;AAED;AACI;AAAwB;AAA8B;AACzD;AAED;AACA;AACI;AACA;AACA;AACA;AACA;AACH;AAED;AACI;AACI;AACH;;AAED;AACI;AACI;AACA;AACH;AACG;AACA;AACH;AACJ;AACJ;AAGD;AACI;AACA;AACH;;AAGD;;;;;AAKA;AACI;;AACA;AACI;AACH;;AACD;AACH;;AAED;;;;;AAKA;AAAyE;AAAlC;AAAkC;;AACrE;AACA;AACA;;AACA;AACI;AACA;AACI;AACI;AACH;AACG;;AAEA;AAA0C;AACtC;;AACA;;AACA;AACH;AACJ;AACJ;AACJ;AACG;AACA;AACA;AACA;;AACA;;AACA;AACH;AACJ;;AAED;;;;;;;AAOA;AAAuF;AAAhD;AAAgD;;AAAA;AAA5B;AAA4B;;AACnF;AAAA;;AAEA;AAAqC;AAA+B;;;AAEpE;AACI;AACA;;AACA;AACI;AACA;AACH;AACG;AACI;AACH;;AACD;AACI;AAEH;AACJ;;AACD;AACI;AACA;AACA;AACH;AACJ;AACJ;;AAED;;;;;;;AAOA;AAAsE;AAAhD;AAAgD;;AAAA;AAA5B;AAA4B;;AAClE;AACI;AACA;AACI;AACH;AACG;AACH;AACJ;AACG;AACA;AACH;AACG;AACA;;AAEA;;AACA;AACH;AAEA;AACJ;;AAED;;;;;AAKA;AACI;AAAc;AAAS;;AACvB;AACI;AACA;AACI;AACA;AACH;;AACD;;AACA;AACI;;AACA;AACI;AACH;AACJ;;;AAED;;AACA;;AACA;AACI;AACA;AACH;AACG;AACH;AACJ;AACG;AACH;AAEJ;;AAED;;;;;AAKA;AACI;AAAc;AAAS;;AACvB;AAAkB;AAAU;;AAC5B;AACH;;AAED;;;;;;AAMA;AACI;AAAc;AAAS;;AACvB;AACA;;AACA;;AACA;AACH;AACD;AACI;AACI;AACA;AACA;AACA;AACH;AACJ;AAED;AACA;AAAoD;AAAd;AAAc;;AAChD;;AACA;AACI;AACI;AACA;AACH;AACJ;;AACD;AACH;AAED;AACI;;;AAGA;AACA;AACA;AACI;AAAA;;AAEA;;AACA;AAA0B;AAA6C;AAC1E;AAED;AACH;AAGD;AACI;AACA;AACH;AAED;AACI;;AACA;AACA;AACA;AACA;AACH;;AAED;;;;AAIA;AACI;AACH;;AAED;;;;;AAKA;AACI;AACA;AACA;;AACA;AACI;AAA6B;AACzB;;AACA;AACI;AACA;AACH;AACJ;AACJ;;AAED;AACH;AAED;AACI;AACI;AACA;AACA;AACA;AACA;;AACJ;AACH;AAGD;AACI;AACA;;AACA;AACI;AACA;AACA;AACH;;;AAGD;AACI;AAAoB;AAAS;;AAC7B;AACA;AAEH;AAED;AACI;;AACA;AACI;AACH;;AAEJ;;AAED;AACI;;AACA;AACI;AACA;AACH;;AAEJ;;AAED;AACA;AACH;AAGD;AACI;AACA;AACA;AACA;AACA;AACA;AACH;AAGD;AACI;AACA;AAEA;;AACA;AACI;AACA;AACA;AACI;AACA;;AACJ;AACA;AACA;AACI;AACA;;AACJ;AACA;AACA;AACI;AACA;AAfR;AAmBA;;;AAEA;AACA;AACA;AACA;;AACA;AACI;AACI;AACH;;AACD;AACA;AACA;AACA;AACA;AACH;;AACD;AACI;AACH;;AACD;AACA;AACA;AACH;AAhrBgB;;;;;;;;;;;;;;ACLrB;;;;;;AAEO;AACH;AACA;AACA;AAEA;AAAO;;AACH;;AACA;AACI;;AACA;AACH;AACG;AACH;AACJ;AAED;AACI;AACI;AAAiC;AAAF;AAC/B;AACH;;AAAA;;AAED;AACI;AAAiC;AAAF;AAC/B;AACH;;AAED;AACI;AAAiC;AAAF;AAC/B;AACH;;AAAA;AAED;AACA;AAEQ;AACI;AACA;AACA;AACH;AACG;AACA;AACA;AACH;AACJ;AACG;AACA;AACA;AACH;AACR;AAED;AAA8D;AAAf;AAAe;;AAC1D;AACI;AACA;AACH;;AACD;AACI;AACA;AACH;;;AAED;;AAEA;AACI;;AACA;AACI;;AAEA;AAA0C;AAAF;;AACxC;;AAEA;;AACA;AACH;AACG;;AACA;AACI;AACH;AACG;AACH;;AACD;;AACA;AACH;AACJ;AACG;AAAuB;AAAA;AAC1B;AACG;AAAe;AAAF;AAChB;AACJ;AAED;AACI;AACH;AA3FgB","sourcesContent":["export * from './configs';\nexport * from './utils/utils';\nexport * from './utils/utils_facebook';\n\nexport * from './utils/video';\nexport * from './utils/inter_ad';\n// export * from './utils/leaderboard';\nexport * from './social/friend';\nexport * from './utils/audio';\n\nexport * from './ui-fx/ui';\nexport * from './ui-fx/fx';\nexport * from './ui-fx/ui_challenge';\nexport * from './ui-fx/ui_power_item';\n\nexport * from './tut/tut';\nexport * from './tut/tut_rolated';\nexport * from './tut/tut_bom';\nexport * from './tut/tut_relocated';\nexport * from './tut/tut_triple';\n\n// export * from './popup/popup';\n\nexport * from './logic/login';\nexport * from './logic/data';\nexport * from './logic/game';\nexport * from './logic/user';\n\n\nexport * from './core/control';\nexport * from './core/map';\nexport * from './core/map_visual';\n\nexport * from './social/social';\n\n\nexport * from './social/promo';\nexport * from './social/leaderboard';\nexport * from './utils/localize';\nexport * from './utils/localize_config';\n\n","import * as _GAME from '../all_modules';\n\nexport const audio = {\n    audioList: {},\n    playingIdList: {},\n    isSoundOff: true,\n\n    init() {\n        _GAME.login.addLoginDataField(\"isSoundOff\");\n        _GAME.login.addCallback(data => {\n            this.isSoundOff = data.isSoundOff;\n            this.renderBtnSound();\n            this.loadAudios();\n        });\n\n        // bind event for btn sound on/off\n        const btnSoundOff = cc.find('Canvas/layer_pause/btn_sound_off');\n        _GAME.utils.addButtonComp(btnSoundOff, () => {\n            this.isSoundOff = false;\n            this.playMusic();\n            _GAME.ui.showNagScreen();\n            _GAME.data.saveData({ isSoundOff: false }, () => {\n                this.renderBtnSound();\n                _GAME.ui.hideNagScreen();\n            });\n        });\n\n        const btnSoundOn = cc.find('Canvas/layer_pause/btn_sound_on');\n        _GAME.utils.addButtonComp(btnSoundOn, () => {\n            this.isSoundOff = true;\n            this.stopMusic();\n            _GAME.ui.showNagScreen();\n            _GAME.data.saveData({ isSoundOff: true }, () => {\n                this.renderBtnSound();\n                _GAME.ui.hideNagScreen();\n            });\n        });\n    },\n\n    renderBtnSound(isSoundOff) {\n        cc.find('Canvas/layer_pause/btn_sound_off').active = this.isSoundOff;\n        cc.find('Canvas/layer_pause/btn_sound_on').active = !this.isSoundOff;\n    },\n\n    loadAudios() {\n        cc.resources.loadDir('audios', cc.AudioClip, (err, res) => {\n            if (err) return _log(err);\n            for (let clip of res) this.audioList[clip.name] = clip;\n            // _log(`audio.js >> all audio loaded !`);\n            this.playMusic();\n        });\n    },\n\n    playSound(name, volume = 1) {\n        if (this.isSoundOff) return;\n        this.playingIdList[name] = cc.audioEngine.play(this.audioList[name], false, volume);\n    },\n\n    stopSound(name) {\n        if (this.playingIdList[name]) cc.audioEngine.stopEffect(this.playingIdList[name]);\n    },\n\n    playMusic() {\n        if (this.isSoundOff) return;\n        if (cc.audioEngine.isMusicPlaying()) return;\n        try {\n            this.playingIdList[\"back_ground_music\"] = cc.audioEngine.playMusic(this.audioList[\"back_ground_music\"], true, 1);\n        } catch (e) { _log(`playMusic err `, e); }\n    },\n\n    stopMusic() {\n        if (cc.audioEngine.isMusicPlaying()) cc.audioEngine.stopMusic();\n    },\n\n    playSoundClickButton() {\n        if (this.isSoundOff) return;\n        this.playSound(\"click\", 0.2);\n    },\n    updateUiSoundButton(){\n        let btn_sound_on = cc.find('Canvas/layer_pause/btn_sound_on');\n        let btn_sound_off = cc.find('Canvas/layer_pause/btn_sound_off');\n    }\n}","import * as _GAME from '../all_modules';\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        assetBlock :{\n            default:[],\n            type:[cc.SpriteFrame]\n        }\n    },\n\n    \n});\n","import * as _GAME from '../all_modules';\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        collidingCellArr: [],\n        newItemPosDiff: cc.v2(0, 0),\n        cellPosDiff: cc.v2(0, 0),\n        highlightCellArr: [],\n    },\n\n    onLoad() {\n        const manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n    },\n\n    onCollisionEnter(other, self) {\n        this.collidingCellArr.push(other.node);\n    },\n\n    onCollisionStay(other, self) {\n        const newItemPosDiff = _GAME.utils.global2LocalPosDiff(this.node, 0, 0);\n\n        let selectedCell;\n        let nearestDistance = 999;\n        this.collidingCellArr.map(cell => {\n            const distance = _GAME.utils.global2LocalPosDiff(cell, 0, 0).sub(newItemPosDiff).mag();\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                selectedCell = cell;\n            }\n        });\n\n        const cellNumber = selectedCell.name.replace('Image_HexBlock_', '');\n        const minorCellNumber = _GAME.map.checkNewItemDroppableAtCell(cellNumber)\n        if (minorCellNumber) {\n            this.unfocusAllCells();\n            this.highlightCell(selectedCell);\n            _GAME.map.selectedCell = selectedCell;\n            if (_GAME.game.currentItemBiasType != 'single_block') {\n                const minorCell = _GAME.map.minorCell = cc.find(`Canvas/play_area/map/Image_HexBlock_${minorCellNumber}`);\n                this.highlightCell(minorCell);\n            }\n        }\n    },\n\n    onCollisionExit(other, self) {\n        if (_GAME.map.selectedCell) this.unfocusCell(_GAME.map.selectedCell);\n        if (_GAME.map.minorCell) this.unfocusCell(_GAME.map.minorCell);\n        _GAME.map.selectedCell = null;\n        _GAME.map.minorCell = null;\n        _removeArrItem(this.collidingCellArr, other.node);\n    },\n\n    //------- highlight & unfocus cells ----------------\n    highlightCell(cellNode) {\n        cellNode.getChildByName('bg').opacity = 128;\n        this.highlightCellArr.push(cellNode);\n    },\n\n    unfocusCell(cellNode) {\n        cellNode.getChildByName('bg').opacity = 51;\n        _removeArrItem(this.highlightCellArr, cellNode);\n    },\n\n    unfocusAllCells() {\n        this.highlightCellArr.map(cellNode => this.unfocusCell(cellNode));\n    },\n\n});\n","\nimport * as _GAME from './all_modules';\n\ncc.Class({\n    extends: cc.Component,\n    // editor: { executeInEditMode: true },\n\n    onLoad() {\n        \n        window._GAME = _GAME;\n\n        // call init for all modules that has init function\n        for (let moduleName in _GAME) {\n            if (_GAME[moduleName].init) {\n                _GAME[moduleName].init();\n               \n            }\n        }\n        _GAME.utilsFB.log('ev_game_load_time', performance.now());\n        _GAME.cocosLoadTime = (performance.now() / 1000).toFixed(2);\n        _GAME.utils.setLabelText(cc.find('Canvas/layer_pause/label_load_time'), _GAME.cocosLoadTime);\n\n        // subscribe bot\n        _GAME.utils.setTimeout(() => {\n            _GAME.social.askBotSubscribe(() => _GAME.social.askShortcut());\n        }, 1000);\n\n        // remove loading bg: htmlLoadingBackground (html div tag)\n        const loadingBg = document.getElementById('htmlLoadingBackground');\n        if (loadingBg) loadingBg.style.display = 'none';\n\n\n    },\n  \n});","module.exports = {\n    // right_bias\n    '8_4': 'right_bias',\n    '4_1': 'right_bias',\n    \n    '13_9': 'right_bias',\n    '9_5': 'right_bias',\n    '5_2': 'right_bias',\n    \n    '17_14': 'right_bias',\n    '14_10': 'right_bias',\n    '10_6': 'right_bias',\n    '6_3': 'right_bias',\n    \n    '18_15': 'right_bias',\n    '15_11': 'right_bias',\n    '11_7': 'right_bias',\n    \n    '19_16': 'right_bias',\n    '16_12': 'right_bias',\n    \n    '8_13': 'left_bias',\n    '13_17': 'left_bias',\n\n    '4_9': 'left_bias',\n    '9_14': 'left_bias',\n    '14_18': 'left_bias',\n\n    '1_5': 'left_bias',\n    '5_10': 'left_bias',\n    '10_15': 'left_bias',\n    '15_19': 'left_bias',\n\n    '2_6': 'left_bias',\n    '6_11': 'left_bias',\n    '11_16': 'left_bias',\n\n    '3_7': 'left_bias',\n    '7_12': 'left_bias',\n    \n\n    // horizontal\n    \n\n    '1_2': 'horizontal',\n    '2_3': 'horizontal',\n\n    '4_5': 'horizontal',\n    '5_6': 'horizontal',\n    '6_7': 'horizontal',\n\n    '8_9': 'horizontal',\n    '9_10': 'horizontal',\n    '10_11': 'horizontal',\n    '11_12': 'horizontal',\n\n    '13_14': 'horizontal',\n    '14_15': 'horizontal',\n    '15_16': 'horizontal',\n\n    '17_18': 'horizontal',\n    '18_19': 'horizontal',\n}","import * as _GAME from './all_modules';\n\nexport const configs = {\n    //  =================================================\n    // leaderboard\n    off_inter_ads: false,\n    off_power_item:false,\n    leaderboardName: 'score_global',\n    leaderboardPlayerCount: 15,\n    isShowPromoGames: (cc.sys.os == cc.sys.OS_IOS) ? false : true,\n    listIdPromoGame: ['1290260324506853', '227806484682918', '617940745660759'],\n    totalTurnAds: 3,\n    canShowAndLoadInter:false,\n    //  =================================================\n    // --- interstitial ads\n    interAdId: '1039089903197791_1060209887752459',\n    interAdRatio: {\n        gameOverReplay: 1,\n    },\n\n    videoRewardId: '1039089903197791_1045666869206761',\n    videoContinueTime:1, // times to watch viedeo continue each game\n\n    //challenge \n    maxCountCancelChallenge : 3,\n    showInterAdAfterEveryReplayTime:3,\n    // ===== biasType & blockNumbers config from stepCount to generate new items \n    biasType: {\n        1: ['right_bias', 'left_bias', 'single_block'],\n        2: ['right_bias', 'horizontal', 'single_block'],\n        3: ['right_bias', 'left_bias', 'horizontal'],\n        4: ['right_bias', 'left_bias', 'horizontal', 'single_block'],\n    },\n    stepCount2BiasTypeArr(stepCount) {\n        let lastStep = 0;\n        for (let i in this.biasType) {\n            if (i > stepCount) return this.biasType[lastStep];\n            if (i <= stepCount) lastStep = i;\n        }\n        return this.biasType[lastStep];\n    },\n\n    blockNumber: {\n        1: [1, 2, 3, 4, 5, 6],\n    },\n        // blockNumber: {\n        //     1: [6],\n        // },\n    stepCount2BlockNumerArr(stepCount) {\n        let lastStep = 0;\n        for (let i in this.blockNumber) {\n            if (i > stepCount) return this.blockNumber[lastStep];\n            if (i <= stepCount) lastStep = i;\n        }\n        return this.blockNumber[lastStep];\n    },\n\n\n    // ===== scoring point calculation\n\n    // single point of single block\n    singleBlockPoint: {\n        1: 2,\n        2: 4,\n        3: 8,\n        4: 16,\n        5: 32,\n        6: 64,\n        7: 128,\n    },\n\n    // multiple block scoring factor\n    scoreFactor: {\n        3: 3,\n        4: 3.5,\n        5: 5,\n        6: 6.5,\n        7: 8,\n    },\n\n    calculateScore(blockNumber, blockCount) {\n        return parseInt(_GAME.configs.singleBlockPoint[blockNumber] * (_GAME.configs.scoreFactor[blockCount] || 1));\n    },\n\n\n}","const EXTRA_POS = cc.v2(0, 150);\nimport * as _GAME from '../all_modules';\ncc.RotateBy._reverse = true;\nexport const control = {\n    newItemNode: null,\n\n    init() {\n        const newItem = this.newItemNode = cc.find('Canvas/play_area/new_item_container/new_item');\n        const posDiff = _GAME.utils.global2LocalPosDiff(newItem, 0, 0);\n        let lastTouchStartPos;\n        let lastTouchStartTime;\n\n        const touchStartFunc = (pos, eventObj) => {\n            // console.log(`touchStartFunc called, pos = ${pos}`);\n            newItem.isBeingDragged = true;\n            lastTouchStartPos = pos;\n            lastTouchStartTime = _time();\n        }\n\n        const touchMoveFunc = (pos, eventObj) => {\n            // console.log(`touchMoveFunc called, pos = ${pos}`);\n            // console.log('pos.sub(lastTouchStartPos).mag()  ',pos.sub(lastTouchStartPos).mag());\n            if (pos.sub(lastTouchStartPos).mag() < 20) return;\n            this.setArrowsActive(false);\n            _GAME.tut.checkHideTutHand();\n            if (newItem.isBeingDragged) newItem.position = pos.add(posDiff).add(EXTRA_POS);\n        }\n\n        const touchEndFunc = (pos, eventObj) => {\n            // console.log(`touchEndFunc called, pos = ${pos}`);\n            newItem.isBeingDragged = false;\n            newItem.position = cc.v2(0, 0);\n            _GAME.tut.checkShowTutHand();\n            this.setArrowsActive(false);\n\n            // handle touchEvent to swap block\n            if (\n                _GAME.game.currentItemBiasType != 'single_block'\n                && lastTouchStartPos.sub(pos).mag() < 10\n                && _time() - lastTouchStartTime < 400\n                && newItem.position.mag() < 10\n            ) {\n                if(!_GAME.tutRolated.checkDoneTutRolated()){\n                    _GAME.tutRolated.endTut();\n                }\n                _GAME.game.swapNewItemBlocks();\n            }\n\n            // handle drop new item to map\n           \n            if (_GAME.map.selectedCell) \n            {\n                _GAME.game.dropNewItemAtCell(\n                    _GAME.map.selectedCell.cellNumber,\n                    (_GAME.map.minorCell ? _GAME.map.minorCell.cellNumber : null));\n            }\n        }\n\n        _GAME.utils.singleTouchSet(newItem, touchStartFunc, touchMoveFunc, touchEndFunc);\n    },\n\n    setArrowsActive(isActive) {\n        const arrows = cc.find(`Canvas/play_area/new_item_container/new_item/arrows`);\n        arrows.active = isActive;\n        return arrows;\n    },\n\n\n    setKeyBlock(blockNode) {\n        const isParentRotated = _abs(blockNode.parent.angle % 360) > 90;\n        const posExtra = isParentRotated ? blockNode.position.mul(2) : cc.v2()\n        const keyBlockCollider = cc.find('Canvas/play_area/new_item_container/new_item/key_block_collider');\n        _GAME.utils.setGlobalPositionToNode(keyBlockCollider, blockNode);\n        keyBlockCollider.x -= posExtra.x;\n        keyBlockCollider.y -= posExtra.y;\n    },\n\n\n    setControlTouchArea(itemType) {\n        const touchNode = cc.find('Canvas/play_area/new_item_container/new_item');\n        switch (itemType) {\n            case 'single_block':\n                {\n                    touchNode.width = 280;\n                    touchNode.height = 300;\n                    break;\n                }\n\n            case 'left_bias':\n            case 'right_bias':\n                {\n                    touchNode.width = 240;\n                    touchNode.height = 380;\n                    break;\n                }\n\n            case 'horizontal':\n                {\n                    touchNode.width = 300;\n                    touchNode.height = 300;\n                    break;\n                }\n        }\n    },\n\n}\n","import * as _GAME from '../all_modules';\n\nexport const data = {\n    init: () => {\n        _GAME.data.isUserReady = true;\n    },\n\n    // ==============================================================================\n    //  SAVE/LOAD DATA TO/FROM FACEBOOK (LOCAL-STORAGE)\n\n    // save/ load data =========================================================\n    saveData(dataObj, callbackSuccess, calbackFail) {\n        if (window.FBInstant) {\n            FBInstant.player.setDataAsync(dataObj).then(() => {\n                // _log(' _GAME.pseudoAPI.saveData :: dataObj = ', dataObj);\n                if (callbackSuccess) { callbackSuccess(); }\n            });\n\n        } else {\n            _GAME.utils.setTimeout(() => {\n                for (let key in dataObj) {\n                    try {\n                        localStorage.setItem(key, JSON.stringify(dataObj[key]));\n                    } catch (e) { _log(e); }\n                }\n                if (callbackSuccess) { callbackSuccess(); }\n            }, 500);\n        }\n    },\n\n    loadData(keyArr, callbackSuccess) {\n        if (window.FBInstant) {\n            FBInstant.player.getDataAsync(keyArr).then((data) => {\n                // _log(' _GAME.pseudoAPI.loadData :: data = ', data);\n                if (callbackSuccess) {\n                    callbackSuccess(data);\n                }\n            });\n\n        } else {\n            _GAME.utils.setTimeout(() => {\n                const data = {};\n                keyArr.map((key) => {\n                    const strData = localStorage.getItem(key);\n                    if (strData) {\n                        try {\n                            data[key] = JSON.parse(strData);\n                        } catch (e) {\n                            if (key == 'Field') {\n\n                            }\n                            // _log(e);\n                            // _log(`strData = ${strData} // key=${key}`);\n                        }\n                    }\n                });\n                if (callbackSuccess) { callbackSuccess(data); }\n            }, 500);\n        }\n    },\n\n\n    loadEntryPointData() {\n        if (window.FBInstant) {\n            const data = FBInstant.getEntryPointData();\n            if (data && data.player_sent_id) {\n                _GAME.user.playerIdShare = data.player_sent_id;\n            }\n            _GAME.user.entryPointData = data;\n            // _GAME.user.entryPointData = {\n            //     clanId: \"540f598f-f5f0-49d9-a200-0e660534f069\",\n            //     playerInviteId: \"07540897-c785-45eb-8be9-bac87874be13\"\n            // };\n            // _log(\"ENTRY POINT DATA\", data);\n        }\n    }\n\n}","import * as _GAME from '../all_modules';\n\n// free component with open handler to help adding button component in script (_GAME.utils.addButtonComp)\ncc.Class({\n    extends: cc.Component,\n\n    freeHandler(e) {\n        if (e.target.freeButtonHandlerFunc) {\n            e.target.freeButtonHandlerFunc(e.target);\n            _GAME.audio.playSoundClickButton();\n        }\n    },\n\n});","import * as _GAME from '../all_modules'\n\nexport const friend ={\n    listFrienlds: [],\n    cacheFriend: [],\n    init(){\n        _GAME.utils.setTimeout(()=>{\n        });\n       \n    },\n    loadDataFrienld() {\n        if (window.FBInstant) {\n            FBInstant.player.getConnectedPlayersAsync()\n                .then(function(players) {\n                    _GAME.friend.listFrienlds = [];\n                    players.map(function(player) {\n                        _GAME.friend.listFrienlds.push({ id: player.getID(), score: 0, name: player.getName(), photo: player.getPhoto() });\n                    });\n                    // console.log('_GAME.friend.listFrienlds  ',_GAME.friend.listFrienlds);\n                });\n        }\n    },\n    getRandomFriendInList() {\n        let result = null;\n        if (_GAME.friend.listFrienlds && _GAME.friend.listFrienlds.length != 0) {\n            let friendRandom = _GAME.utils.randomArrItem(_GAME.friend.listFrienlds);\n            // console.log('friendRandom   ', friendRandom);\n            if (friendRandom) {\n                if (_GAME.friend.cacheFriend.length == 0) {\n                    result = friendRandom;\n                    _GAME.friend.cacheFriend.push(friendRandom);\n                } else {\n                    // console.log('_GAME.friend.cacheFriend  ', _GAME.friend.cacheFriend);\n                    let isPassFrienld = _GAME.friend.cacheFriend.find(user => user.id == friendRandom.id);\n                    if (!isPassFrienld) {\n                        // console.log('Vao day nhan tiep af');\n                        result = friendRandom;\n                        _GAME.friend.cacheFriend.push(friendRandom);\n                    } else {\n                        let total = 10;\n                        while (isPassFrienld) {\n                            friendRandom = _GAME.utils.randomArrItem(_GAME.friend.listFrienlds);\n                            isPassFrienld = _GAME.friend.cacheFriend.find(user => user.id == friendRandom.id);\n                            total--;\n                            if (!isPassFrienld || total == 0) {\n                                // console.log('friendRandom  while ', friendRandom);\n                                result == isPassFrienld;\n                                return result;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    },\n    validatePanelCanShow(){\n        if(_GAME.friend.cacheFriend.length == _GAME.friend.listFrienlds.length) return false;\n        if(_GAME.configs.maxCountCancelChallenge <= _GAME.uiChallenge.countCancelChallenge)return false;\n        return true;      \n    }\n        \n}","import * as _GAME from '../all_modules';\nconst BlockAsset = require('blockAsset');\nexport const fx = {\n    init() {\n        _GAME.fx.bubbleForever(cc.find('Canvas/layer_leaderboard/header/btn_brag'));\n        // this.shiningStar();\n    },\n\n    bubbleForever(node, timespan = 0.5, delay = 0, saleFactor1 = 1, scaleFactor2 = 1.2) {\n        const orgScale = node.orgScale || node.scale;\n        if (!node.orgScale) { node.orgScale = orgScale; }\n        node.stopAllActions();\n        node.runAction(cc.repeatForever(cc.sequence(\n            cc.delayTime(delay),\n            cc.scaleTo(timespan, orgScale * scaleFactor2),\n            cc.scaleTo(timespan, orgScale * saleFactor1),\n            cc.scaleTo(timespan, orgScale * scaleFactor2),\n            cc.scaleTo(timespan, orgScale * saleFactor1),\n        )));\n    },\n    bubbleForeverLabel(node, timespan = 0.5, delay = 0, saleFactor1 = 1, scaleFactor2 = 1.1) {\n        const orgScale = node.orgScale || node.scale;\n        if (!node.orgScale) { node.orgScale = orgScale; }\n        node.stopAllActions();\n        node.runAction(cc.repeatForever(cc.sequence(\n            cc.delayTime(delay),\n            cc.scaleTo(timespan, orgScale * scaleFactor2),\n            cc.scaleTo(timespan, orgScale * saleFactor1),\n            cc.scaleTo(timespan, orgScale * scaleFactor2),\n            cc.scaleTo(timespan, orgScale * saleFactor1),\n        )));\n    },\n    bubble(node, callback, timespan = 0.5, delay = 0, saleFactor1 = 1, scaleFactor2 = 1.2) {\n        const orgScale = node.orgScale || node.scale;\n        if (!node.orgScale) { node.orgScale = orgScale; }\n        node.stopAllActions();\n        node.runAction(cc.sequence(\n            cc.delayTime(delay),\n            cc.scaleTo(timespan, orgScale * scaleFactor2),\n            cc.scaleTo(timespan, orgScale * saleFactor1),\n            cc.scaleTo(timespan, orgScale * scaleFactor2),\n            cc.scaleTo(timespan, orgScale * saleFactor1),\n            cc.callFunc(() => {\n                if (callback) callback();\n            })\n        ));\n    },\n\n    fxScoreNormal(keyCellNode, scoredCellArr, callback, fxTime = 0.3) {\n        const globalPos = _GAME.utils.getGlobalPosition(keyCellNode);\n        scoredCellArr.map((linkedCellNumber, index) => {\n            // run action to make cell flies to keyCell\n            const orgCellNode = cc.find(`Canvas/play_area/map/Image_HexBlock_${linkedCellNumber}`);\n            const fxContainer = cc.find(`Canvas/play_area/fx_container`);\n            const cellNode = _GAME.utils.copyNodeTo(orgCellNode, fxContainer);\n            const posDiff = _GAME.utils.global2LocalPosDiff(cellNode, globalPos.x, globalPos.y);\n            cellNode.getChildByName('bg').active = false;\n            cellNode.runAction(cc.sequence(\n                cc.moveBy(fxTime, posDiff).easing(cc.easeIn(2)),\n                cc.callFunc(() => {\n                    cellNode.removeFromParent(true);\n                    // only call once when 3 cells flew to center cell\n                    if (!index && callback) callback();\n                })\n            ));\n        });\n    },\n\n\n    fxScore7(keyCellNode, orgScoredCellArr, callback, fxTime = 0.3) {\n        _GAME.audio.playSound('catch_seven');\n        const fxContainer = cc.find(`Canvas/play_area/fx_container`);\n        let keyFxNode;\n        const scoredCellNodeArr = orgScoredCellArr.map(sCellNum => {\n            const orgCellNode = cc.find(`Canvas/play_area/map/Image_HexBlock_${sCellNum}`);\n            const cellNode = _GAME.utils.copyNodeTo(orgCellNode, fxContainer);\n            cellNode.getChildByName('bg').active = false;\n            if (orgCellNode == keyCellNode) keyFxNode = cellNode;\n            return cellNode;\n        });\n\n        const fxForSingleCell = (cellNode, index) => {\n            cellNode.runAction(cc.sequence(\n                cc.scaleTo(fxTime, 1.2),\n                cc.scaleTo(fxTime, 1),\n            ));\n            cellNode.runAction(cc.sequence(\n                cc.delayTime(fxTime),\n                cc.fadeOut(fxTime),\n                cc.callFunc(() => {\n                    cellNode.removeFromParent(true);\n                    if (!index && callback) callback();\n                }),\n            ));\n\n            const blockNode = cellNode.getChildByName('sample_block');\n            blockNode.getChildByName('Image_HexBlock').runAction(cc.tintTo(fxTime, 255, 255, 255))\n            // blockNode.getChildByName('Image_HexBlock_Shadow').runAction(cc.tintTo(fxTime, 255, 255, 255))\n            // blockNode.getChildByName('block7stroke').runAction(cc.fadeOut(fxTime));\n            blockNode.getChildByName('label').runAction(cc.fadeOut(fxTime));\n        };\n        fxForSingleCell(keyFxNode, 1);\n\n        _GAME.utils.setTimeout(() => {\n            keyFxNode.stopAllActions();\n            keyFxNode.getChildByName('sample_block').children.map(childNode => childNode.stopAllActions());\n\n            scoredCellNodeArr.map((cellNode, index) => fxForSingleCell(cellNode, index))\n        }, parseInt(fxTime * 1000 / 2))\n    },\n\n\n\n\n    // // show tooltip\n    freeToolTipNodeArr: [],\n    showScoreToolTip(text, targetNode, extraY = 60, callback, rangeY = 100, fxTime = 1.6, fadeInTime = 0.2, delayTime = 0) {\n        const sampleNode = cc.find('Canvas/play_area/fx_container/sample_score_tool_tip');\n        const labelNode = this.freeToolTipNodeArr.pop() || _GAME.utils.copyNodeTo(sampleNode, cc.find('Canvas/play_area/fx_container'));\n        _GAME.utils.setLabelText(labelNode, text)\n        _GAME.utils.setGlobalPositionToNode(labelNode, targetNode);\n        labelNode.y += extraY;\n\n        labelNode.active = true;\n        labelNode.zIndex = 999;\n        labelNode.opacity = 0;\n        labelNode.runAction(cc.sequence(\n            cc.fadeIn(fadeInTime),\n            cc.delayTime(delayTime),\n            cc.spawn(\n                cc.moveBy(fxTime, cc.v2(0, rangeY)),\n                cc.fadeOut(fxTime),\n            ),\n            cc.callFunc(() => {\n                labelNode.active = false;\n                this.freeToolTipNodeArr.push(labelNode);\n                if (callback) callback();\n            })\n        ))\n    },\n\n    freeFlyScoreNodeArr: [],\n    singleScoreLabelFly(sourceNode, scoreText, fxTime = 0.3) {\n        const sampleNode = cc.find('Canvas/play_area/fx_container/sample_label_fly_score');\n        const labelNode = this.freeFlyScoreNodeArr.pop() || _GAME.utils.copyNodeTo(sampleNode, cc.find('Canvas/play_area/fx_container'));\n        _GAME.utils.setLabelText(labelNode, scoreText);\n        _GAME.utils.setGlobalPositionToNode(labelNode, sourceNode);\n\n        const targetNode = cc.find('Canvas/play_area/labels/label_score');\n        const targetGPos = _GAME.utils.getGlobalPosition(targetNode);\n\n        labelNode.active = true;\n        labelNode.zIndex = 999;\n        const posDiff = _GAME.utils.global2LocalPosDiff(labelNode, targetGPos.x, targetGPos.y);\n        labelNode.runAction(cc.sequence(\n            cc.moveBy(fxTime, posDiff).easing(cc.easeIn(1.4)),\n            cc.callFunc(() => {\n                labelNode.active = false;\n                this.freeFlyScoreNodeArr.push(labelNode);\n            })\n        ))\n    },\n\n    multiScoreLabelFly7(scoredCellArr, totalScore, callback) {\n        const timeStep = 0.07;\n        const scoreText = '+' + _GAME.utils.localizeNumber(parseInt(totalScore / scoredCellArr.length));\n        scoredCellArr.map((sCellNum, index) => {\n            const cellNode = cc.find(`Canvas/play_area/map/Image_HexBlock_${sCellNum}`);\n            _GAME.utils.setTimeout(() => {\n                this.singleScoreLabelFly(cellNode, scoreText)\n            }, timeStep * 1000 * index);\n        });\n        _GAME.utils.setTimeout(() => callback && callback(), timeStep * scoredCellArr.length * 1000);\n    },\n\n    multiScoreLabelFlyNormal(keyCellNode, scoredCellArr, totalScore, callback) {\n        const timeStep = 0.07;\n        const scoreText = '+' + _GAME.utils.localizeNumber(parseInt(totalScore / scoredCellArr.length));\n\n        scoredCellArr.map((sCellNum, index) => {\n            _GAME.utils.setTimeout(() => {\n                this.singleScoreLabelFly(keyCellNode, scoreText)\n            }, timeStep * 1000 * index);\n        });\n        _GAME.utils.setTimeout(() => callback && callback(), timeStep * scoredCellArr.length * 1000);\n    },\n\n    shiningStar() {\n        const nodeStar = cc.find('Canvas/bg/Image_Background_Stars');\n        nodeStar.stopAllActions();\n        nodeStar.runAction(\n            cc.sequence(\n                cc.fadeTo(1.5, 63.5),\n                cc.fadeTo(3, 255),\n                cc.fadeTo(1.5, 127.5),\n            ).repeatForever()\n        )\n    },\n    showTextGreate(node){\n        if(node){\n            node.scale = 1;\n            node.runAction(\n                cc.scaleTo(0.3,1)\n            )\n        }\n    },\n    animStar(arrayNode){\n        if(arrayNode && arrayNode.length != 0){\n            let timeDelay = 0;\n            arrayNode.map((item)=>{\n                item.lastScale = item.scale;\n                item.scale = 0;\n                item.runAction(\n                    cc.sequence(\n                        cc.delayTime(timeDelay),\n                        cc.spawn(\n                            cc.rotateTo(0.5,-360),\n                            cc.scaleTo(0.5,item.lastScale)\n                        ),\n                    )\n                );\n                timeDelay+=1;\n            });\n        }\n    },\n    effectForInfo(target, posBonus) {\n        target.opacity = 0;\n        target.x += posBonus;\n        let posMove = target.x - posBonus;\n        cc.tween(target)\n            .delay(0.5)\n            .parallel(\n                cc.tween().to(1, { opacity: 255 }),\n                cc.tween().to(0.5, { position: cc.v2(posMove, target.y) })\n            )\n            .start();\n    },\n    effectForButton(target, timeDelay) {\n        target.active = false;\n        cc.tween(target)\n            .delay(timeDelay)\n            .call((node) => {\n                node.active = true;\n            })\n            .to(0.2, { scaleX: 1.3, scaleY: 1.3 }, { easing: \"backOut\" })\n            .to(0.2, { scaleX: 1, scaleY: 1 })\n            .start();\n    },\n    effectBoom(node,callback){\n        if(node){\n            cc.tween(node)\n                .call(()=>{\n                    let anim = node.getChildByName('sample_block').getChildByName('anim');\n                    if(anim){\n                        if(anim.active == false)anim.active = true;\n                        let component = anim.getComponent(cc.Animation);\n                        component.play(component._clips[0].name);\n                        component.on('lastframe', ()=>{});\n                        component.on('finished',()=>{\n                            // let bg = node.getChildByName('sample_block').getChildByName('Image_HexBlock');\n                            // let number = node.getChildByName('sample_block').getChildByName('label');\n                            // let special = node.getChildByName('sample_block').getChildByName('x');\n                            // if(special.active == true)special.active = false;\n                            // bg.active = false;\n                            // number.active = false;\n                            // anim.active = false;\n                            if(callback)callback();\n                        });\n                    }\n                })\n                .to(0.2,{opacity : 0})\n                .start();\n            \n        }\n    },\n    effectTriple(isActive,callback){\n        const lableTripple = cc.find('Canvas/play_area/triple');\n        if(isActive){\n            if(lableTripple.active == false) lableTripple.active =true;\n            // lableTripple.color = new cc.Color().fromHEX('#33FF00');\n            lableTripple.stopAllActions();\n            _GAME.fx.bubbleForeverLabel(lableTripple);\n            if(callback) callback();\n            _GAME.fx.fxBtnTriple(isActive);\n        }else{\n            // lableTripple.color = new cc.Color().fromHEX('#ffffff');\n            lableTripple.stopAllActions();\n            if(lableTripple.active == true)lableTripple.active =false;\n            lableTripple.scale = 1;\n            _GAME.fx.fxBtnTriple(isActive);\n        }\n        \n    },\n    fxBtnTriple(isActive){\n        const btnTriple = cc.find('Canvas/play_area/btn_triple');\n        let color = (isActive)?'#525252':'#ffffff';\n        if(btnTriple){\n            btnTriple.color = new cc.Color().fromHEX(color);\n\n            let icon = btnTriple.getChildByName('icon');\n            icon.color = new cc.Color().fromHEX(color);\n\n            let label = btnTriple.getChildByName('bg_total_triple').getChildByName('total');\n            label.color = new cc.Color().fromHEX(color);\n            \n            let iconVideo = btnTriple.getChildByName('bg_total_triple').getChildByName('video');\n            iconVideo.color = new cc.Color().fromHEX(color);\n            if(!_GAME.game.triplePoint){\n                if(_GAME.uiPowerItem.totalTriple <= 0){\n                    label.active =false;\n                    iconVideo.active =true;\n                }else{\n                    label.active =true;\n                    iconVideo.active =false;\n                }\n               \n                btnTriple.getChildByName('bg_total_triple').active = true;\n            }\n            \n        }\n    },\n    showAnimRelocated(arrayAnim,arrayMainNode,callback){\n        if(arrayAnim.length != 0){\n            arrayAnim.map((node,index)=>{\n                let mainBlockNumber = _GAME.utils.randomArrItem(_GAME.configs.blockNumber[1]);\n                // _GAME.utils.randomArrItem([3,5]);\n                //set node number\n                let mainNode = arrayMainNode[index];\n                let sampleBlock = mainNode.getChildByName('sample_block');\n                _GAME.mapVisual.decorBlock(sampleBlock,mainBlockNumber);\n                _GAME.map.currentState[mainNode.cellNumber] = mainBlockNumber;\n                \n                //set anim number\n                let arrayNumber = [];\n                for (let index = 0; index < 3; index++) {arrayNumber.push(_GAME.utils.randomArrItem(_GAME.configs.blockNumber[1]))}\n                arrayNumber.push(mainBlockNumber);\n                // console.log('node', index ,'/',arrayNumber);\n                //reset child\n                let sample_block = node.getChildByName('sample_block');\n                sample_block.children.map((child)=>{child.active = false;})\n                let nodeMark = sample_block.getChildByName('anim_relocated');\n                if(nodeMark.active == false) nodeMark.active = true;\n\n                let nodeImageAnim = sample_block.getChildByName('anim_relocated').getChildByName('Image_Anim');\n                let nodeLabel = sample_block.getChildByName('anim_relocated').getChildByName('label');\n                _GAME.fx.rollingItem(nodeLabel,nodeImageAnim,arrayNumber,()=>{\n                    if(callback) callback();\n                });\n            });\n        }\n    },\n    rollingItem(nodeLabel,nodeImageAnim,arrayNumber,callback){\n        let centerPoint = cc.v2(0,2);\n        let topPoint = cc.v2(0,80);\n        let botPoint = cc.v2(0,-80);\n        nodeLabel.position = topPoint;\n        nodeLabel.opacity = 0;\n        let pointShow = arrayNumber.shift();\n        cc.tween(nodeLabel)\n            .parallel(\n                cc.tween(nodeLabel)\n                    .call(()=>{\n                        // nodeLabel.getComponent(cc.Label).string = pointShow;\n                        _GAME.utils.setLabelText(nodeLabel,pointShow);\n                    })\n                    .parallel(\n                        cc.tween(nodeLabel).to(0.15,{position:centerPoint}).start(),\n                        cc.tween(nodeLabel).to(0.15,{opacity:255}).start(),\n                    )\n                    .start(),\n                cc.tween(nodeImageAnim)\n                    .call(()=>{nodeImageAnim.getComponent(cc.Sprite).spriteFrame = nodeImageAnim.getComponent(BlockAsset).assetBlock[parseInt(pointShow)-1] })\n                    .start()\n            )\n            .delay(0.15)\n            .call(()=>{\n                if(arrayNumber.length != 0){\n                    cc.tween(nodeLabel)\n                        .parallel(\n                            cc.tween(nodeLabel).to(0.15,{position:botPoint}).start(),\n                            cc.tween(nodeLabel).to(0.15,{opacity:0}).start(),\n                        )\n                        .call(()=>{\n                            _GAME.fx.rollingItem(nodeLabel,nodeImageAnim,arrayNumber,callback);\n                        })\n                        .start();\n                }else{\n                    if(callback)callback();\n                }\n            })\n            .start();\n\n    },\n    nodeMoveAndHidden(clone,callback){\n        if(clone){\n            cc.tween(clone)\n                .parallel(\n                    cc.tween(clone).to(1,{position:cc.v2(0,140)}),\n                    cc.tween(clone).to(1,{opacity:200})\n                )\n                .delay(0.5)\n                .to(0.2,{opacity:0})\n                .call(\n                    ()=>{\n                        if(callback)callback();\n                        clone.destroy();\n                    }\n                )\n                .start()\n        }\n    }\n};","import * as _GAME from '../all_modules';\nexport const game = {\n    cellLinks: require('cell_links'),\n    currentItemBiasType: null,\n    currentItemNode: null,\n    currentKeyBlockNumber: 0,\n    currentMinorBlockNumber: 0,\n    stepCount: 0,\n    videoContinueLeft: 0,\n    gameStartTime: 0,\n    lastKeyCellNumber: 0,\n\n    init() {\n        _GAME.login.addLoginDataField('isOldToMap3x3');\n        _GAME.login.addLoginDataField('lastNewItem');\n        _GAME.login.addLoginDataField('stepCount');\n        _GAME.login.addLoginDataField('videoContinueLeft');\n        _GAME.login.addLoginDataField('lastScore');\n        _GAME.login.addLoginDataField('bestScore');\n        _GAME.login.addLoginDataField('currentMapState');\n        _GAME.login.addLoginDataField('isAskingVideoContinue');\n        _GAME.login.addCallback(data => {\n            _GAME.data.saveData({ isOldToMap3x3: true });\n\n            // retrieve last score\n            _GAME.user.score = data.lastScore || 0;\n            // _log(` _GAME.user.score = ${_GAME.user.score} `);\n             // update bestScore\n             _GAME.user.bestScore = data.bestScore || 0;\n             _GAME.leaderboard.updateScoreLabel();\n            _GAME.ui.updateScore(_GAME.user.score);\n            _GAME.ui.updateHighScore();\n\n            // retrieve last stepCount\n            this.stepCount = data.stepCount || 0;\n\n            // retrieve last videoContinueLeft\n            this.videoContinueLeft = data.videoContinueLeft || _GAME.configs.videoContinueTime;\n\n           \n\n            // user failed last time but quit game when asking video continue\n            if (data.isAskingVideoContinue) {\n                _GAME.data.saveData({ isAskingVideoContinue: false });\n                // _GAME.game.replay(() => _GAME.interAd.checkRequireMentShowAdd(() => _GAME.interAd.show('gameOverReplay')));\n                _GAME.game.replay();\n            }\n            // else re-generate last new item / or get a brand new one (for new user)\n            else {\n                if (!data.isTutDone) {\n                    this.newItem(1, 'single_block', [1]);\n                }else {\n                    if (data.lastNewItem && data.isOldToMap3x3) {\n                        const { blockNumber, biasType, blockInfoArr } = data.lastNewItem;\n                        this.newItem(blockNumber, biasType, blockInfoArr);\n                    } else {\n                        _GAME.utils.waitToRun(() => {\n                            this.genNewItem();\n                        }, 'currentState', _GAME.map);\n                    }\n                }\n\n                // re-render the last map of user \n                _GAME.map.currentState = data.isTutDone ? (data.currentMapState || {}) : _GAME.tut.tutMapState;\n                for (let cellNum in _GAME.map.currentState)\n                    if (!_GAME.map.cellLinkMap[cellNum]) _GAME.map.currentState[cellNum] = null;\n                _GAME.mapVisual.renderMap(_GAME.map.currentState);\n                //check tut bomm\n                if(!data.isDoneTutBom){\n                    let nodeMap = cc.find('Canvas/play_area/map');\n                    let count = 0;\n                    for (let key in _GAME.map.currentState) {\n                        let element = _GAME.map.currentState[key];\n                        if(element){\n                            count++;\n                        }  \n                    }\n                    if(count > Math.floor(nodeMap.children.length/2)){\n                        if(data.TotalBom > 0){\n                            _GAME.tutBom.startTut();\n                        }\n                    }\n                }\n                if(!data.isDoneTutRelocated){\n                    let nodeMap = cc.find('Canvas/play_area/map');\n                    let count = 0;  \n                    for (let key in _GAME.map.currentState) {\n                        let element = _GAME.map.currentState[key];\n                        if(element){\n                            count++;\n                        }  \n                    } \n                    if((count/nodeMap.children.length)*100  > 70){\n                        if(data.TotalRelocated > 0){\n                            _GAME.tutRelocated.startTut();\n                        }\n                    }  \n                }\n            }\n            _GAME.data.countTurnAdsInter = 0;\n            if(_GAME.user.photo.length != 0){\n                cc.assetManager.loadRemote(_GAME.user.photo, (err, texture) => {\n                    if (!err) {\n                        window.user_avata = new cc.SpriteFrame(texture);\n                    }\n                });\n            }\n            this.check2LogTimeToGameOver();\n\n        });\n        _GAME.game.triplePoint = false;\n    },\n\n    genNewItem() {\n        // _log(`game >> genNewItem() callled !!!!! `);\n        // const blockNumberArr = [1, 2, 3, 4, 5, 6, 7];\n        const blockNumberArr = _GAME.configs.stepCount2BlockNumerArr(this.stepCount + 1).slice(0);\n        const biasTypeArrByStepCount = _GAME.configs.stepCount2BiasTypeArr(this.stepCount + 1);\n\n        // check available blockNumber & biasType\n        let { blockCount, biasTypeArr } = _GAME.map.checkAvailableNewItemInfo(); // biasTypeArr = ['horizontal', 'left_bias', 'right_bias'];\n        biasTypeArr = biasTypeArr.filter(biasType => biasTypeArrByStepCount.includes(biasType));\n        const blockNumArr = [];\n        blockNumArr.push(blockCount);\n        if (biasTypeArrByStepCount.includes('single_block')) blockNumArr.push(1);\n\n        // generate newItem that fit available itemType\n        const blockNumber = _GAME.utils.randomArrItem(blockNumArr);\n        const biasType = _GAME.utils.randomArrItem(biasTypeArr);\n        const blockInfoArr = [];\n        for (let i = 0; i < blockNumber; i++) blockInfoArr.push(_GAME.utils.randomArrItem(blockNumberArr, true))\n        // _log(` blockNumber=${blockNumber}, biasType=${biasType}, blockInfoArr=`, blockInfoArr);\n        this.newItem(blockNumber, biasType, blockInfoArr);\n        this.isNewItemRotated = false;\n        _GAME.data.saveData({ lastNewItem: { blockNumber, biasType, blockInfoArr } });\n    },\n\n    // used for power item video\n    genItemBlock7() {\n        this.newItem(1, 'single_block', [7]);\n        this.isNewItemRotated = false;\n        _GAME.data.saveData({ lastNewItem: { blockNumber: 1, biasType: 'single_block', blockInfoArr: [7] } });\n    },\n\n\n\n    newItem(blockNumber = 1, biasType = 'horizontal', blockInfoArr) {\n        const itemTypeName = blockNumber == 1 ? 'single_block' : biasType;\n        const itemTypeContainer = cc.find(`Canvas/play_area/new_item_container/new_item/item_types`);\n        const arrows = _GAME.control.setArrowsActive(blockNumber > 1);\n        arrows.opacity = arrows.active ? 255 : 0;\n        arrows.angle = ({ horizontal: 5, left_bias: -65, right_bias: 65 })[biasType];\n        arrows.stopAllActions();\n        arrows.runAction(cc.repeatForever(\n            cc.sequence(\n                cc.rotateBy(0.2, -25),\n                cc.rotateBy(0.2, 25),\n                cc.delayTime(0.5),\n            )\n        ));\n        if(itemTypeName != 'single_block'){\n            if(!_GAME.tutRolated.checkDoneTutRolated()){\n                _GAME.tutRolated.startTut();\n            }\n        }\n        const itemTypeNode = itemTypeContainer.getChildByName(itemTypeName);\n        itemTypeContainer.children.map(child => child.active = false);\n        itemTypeNode.active = true;\n\n        _GAME.control.newItemNode.active = true;\n        this.currentItemNode = itemTypeNode;\n\n        const keyBlockContainer = itemTypeNode.getChildByName('key_block');\n        _GAME.mapVisual.decorBlock(keyBlockContainer.getChildByName('sample_block'), blockInfoArr[0]);\n        keyBlockContainer.getChildByName('Image_HighlightStroke').active = (blockInfoArr[0] == blockInfoArr[1]);\n        this.currentKeyBlockNumber = blockInfoArr[0];\n        this.currentMinorBlockNumber = 0;\n\n        let minorBlockContainer;\n        if (blockNumber > 1) {\n            minorBlockContainer = itemTypeNode.getChildByName('minor_block');\n            _GAME.mapVisual.decorBlock(minorBlockContainer.getChildByName('sample_block'), blockInfoArr[1]);\n            this.currentMinorBlockNumber = blockInfoArr[1];\n        }\n\n        biasType = blockNumber > 1 ? biasType : 'single_block';\n        if (biasType != 'single_block') {\n            const keyBlockPos = this.getBiasTypeKeyBlockPos(biasType);\n            if (!keyBlockPos) _log(`keyBlockPos=${keyBlockPos} // biasType=${biasType}`);\n            keyBlockContainer.position = keyBlockPos;\n            if (minorBlockContainer) minorBlockContainer.position = keyBlockPos.mul(-1);\n        }\n\n        _GAME.utils.setTimeout(() => _GAME.control.setKeyBlock(keyBlockContainer), 100);\n        _GAME.control.setControlTouchArea(itemTypeName);\n        this.currentItemBiasType = biasType + (blockNumber > 1 && keyBlockContainer.x > minorBlockContainer.x ? '_dominated' : '');\n\n        // _log(`game.js >> newItem >> biasType=${biasType} // blockInfoArr=${blockInfoArr} // itemTypeNode.pos = ${itemTypeNode.position} \\n children pos = ${itemTypeNode.children.map(c => c.position)} `);\n    },\n\n\n\n\n    swapNewItemBlocks() {\n        _GAME.utilsFB.log(`ev_click_swap_blocks`);\n        _GAME.control.setArrowsActive(false);\n        // show nagScreen\n        _GAME.ui.showNagScreen()\n        // get new biasType\n        this.currentItemBiasType = this.getNextSwapBiasType(this.currentItemBiasType);\n        const nextKeyBlockPos = this.getBiasTypeKeyBlockPos(this.currentItemBiasType);\n\n        // do the swap movement & hideNag\n        const moveTime = 0.045;\n\n        this.currentItemNode.runAction(cc.rotateBy(moveTime, -60))\n        const blockArr = this.currentItemNode.children;\n        blockArr[0].runAction(cc.rotateBy(moveTime, -60))\n        blockArr[1].runAction(cc.rotateBy(moveTime, -60))\n\n        _GAME.utils.setTimeout(() => {\n            this.currentItemNode.angle = 0;\n            blockArr[0].angle = 0;\n            blockArr[1].angle = 0;\n\n            blockArr[0].position = nextKeyBlockPos;\n            blockArr[1].position = nextKeyBlockPos.mul(-1);\n\n            _GAME.control.setKeyBlock(this.currentItemNode.getChildByName('key_block'));\n            _GAME.ui.hideNagScreen();\n        }, moveTime * 1000 + 10);\n\n        this.isNewItemRotated = true;\n     \n    },\n    getBiasTypeKeyBlockPos(biasType) {\n        const baseSize = 45;\n        const x1 = baseSize * Math.cos(60 * (Math.PI / 180));\n        const y1 = baseSize * Math.sin(60 * (Math.PI / 180));\n        //console.log(`x1=${x1} // y1=${y1} // Math.cos(60 * (Math.PI / 180))=${Math.cos(60 * (Math.PI / 180))} // Math.sin(60 * (Math.PI / 180)) = ${Math.sin(60 * (Math.PI / 180))}`);\n        const biasTypeBlockPositions = {\n            'left_bias': cc.v2(-x1, y1),\n            'right_bias_dominated': cc.v2(x1, y1),\n            'horizontal_dominated': cc.v2(baseSize, 0),\n            'left_bias_dominated': cc.v2(x1, -y1),\n            'right_bias': cc.v2(-x1, -y1),\n            'horizontal': cc.v2(-baseSize, 0),\n        };\n        return biasTypeBlockPositions[biasType];\n    },\n\n\n     getNextSwapBiasType(currentBiasType) {\n        return ({\n            'horizontal': 'left_bias',\n            'left_bias': 'right_bias_dominated',\n            'right_bias_dominated': 'horizontal_dominated',\n            'horizontal_dominated': 'left_bias_dominated',\n            'left_bias_dominated': 'right_bias',\n            'right_bias': 'horizontal',\n        })[currentBiasType]\n    },\n\n\n    dropNewItemAtCell(keyCellNumber, minorCellNumber,callback) {\n        if(_GAME.tutRolated.showing)return;\n        _GAME.control.setArrowsActive(false);\n        _GAME.tut.checkDoneTut();\n        // //console.log('-------------------------------');\n        // //console.log('keyCellNumber  ',keyCellNumber);\n        // //console.log('minorCellNumber  ',minorCellNumber);\n        // call map.dropItem\n        _GAME.game.currentItemNode.active = false;\n        _GAME.map.dropNewItemAtCell(keyCellNumber, minorCellNumber);\n\n        // ============ save current stepCount\n        this.stepCount++;\n        _GAME.data.saveData({ stepCount: this.stepCount });\n\n        let scoringThreadRemaining = 1;\n        const scoringCallback = (complimentCode = 0) => {\n            // _log(` scoringThreadRemaining=${scoringThreadRemaining} `)\n            //console.log('complimentCode  ',complimentCode);\n            scoringThreadRemaining--;\n            if (scoringThreadRemaining != 0) return;\n            // _log(` dropNewItemAtCell >> scoringCallback called ????`)\n            _GAME.ui.hideNagScreen();\n\n            // ============ save current map state\n            _GAME.data.saveData({ currentMapState: _GAME.map.currentState });\n\n            // ============ show compliment text\n            // perfect: all block7\n            if (complimentCode == 7) {\n                _GAME.ui.showCompliment('PERFECT');\n            }\n\n            // great: combo x2\n            else if (complimentCode == 2) {\n                _GAME.ui.showCompliment('GREAT');\n            }\n\n            // sweet: combo x3 & above\n            else if (complimentCode > 2 && complimentCode < 7) {\n                _GAME.ui.showCompliment('SWEET');\n            }\n\n            // nice: score more than 3 blocks\n            else if (complimentCode > 10) {\n                _GAME.ui.showCompliment('NICE');\n            }\n\n            // ============ (if not lose) generate newItem\n            if (!_GAME.map.isFulled()) {\n                this.genNewItem();\n            }\n\n            // gameover \n            else {\n                this.lastKeyCellNumber = keyCellNumber;\n                this.handleGameOver();\n            }\n        }\n\n        // check if new blocks score\n        _GAME.ui.showNagScreen();\n        if (minorCellNumber) {\n            if (_GAME.map.currentState[keyCellNumber] != _GAME.map.currentState[minorCellNumber]) {\n                scoringThreadRemaining = 2;\n                this.handleBlockScoring(minorCellNumber, scoringCallback,null,null,callback);\n            }\n        }\n        this.handleBlockScoring(keyCellNumber, scoringCallback,null,null,callback);\n        if(!_GAME.tutBom.isDoneTutBom){\n            let nodeMap = cc.find('Canvas/play_area/map');\n            let count = 0;\n            for (let key in _GAME.map.currentState) {\n                let element = _GAME.map.currentState[key];\n                if(element){\n                    count++;\n                }  \n            }\n            if(count > Math.floor(nodeMap.children.length/2)){\n                if(_GAME.uiPowerItem.totalBom > 0){\n                    _GAME.tutBom.startTut();\n                }\n            }\n        }\n        if(!_GAME.tutRelocated.isDoneTutRelocated){\n            let nodeMap = cc.find('Canvas/play_area/map');\n            let count = 0;  \n            for (let key in _GAME.map.currentState) {\n                let element = _GAME.map.currentState[key];\n                if(element){\n                    count++;\n                }  \n            } \n            if((count/nodeMap.children.length)*100  > 70){\n                if(_GAME.uiPowerItem.totalRelocated > 0){\n                    _GAME.tutRelocated.startTut();\n                }\n            }  \n        }\n    },\n    \n\n    // when user is about to fail but can watch video to continue\n    handleGameOver() {\n        if (!_GAME.video.isAvailable) return this.realGameOver();\n        if (_GAME.game.videoContinueLeft <= 0) return this.realGameOver();\n        _GAME.ui.showLayer('layer_video_continue');\n        _GAME.data.saveData({ isAskingVideoContinue: true });\n        _GAME.utils.setLabelText(\n            cc.find('Canvas/layer_video_continue/btn_save_me/label_time_left'),\n            '' + _GAME.game.videoContinueLeft\n        );\n    },\n\n    onVideoContinueSuccess() {\n        _GAME.game.removeLastKeyBlockGroup();\n        _GAME.data.saveData({ currentMapState: _GAME.map.currentState });\n        _GAME.data.saveData({ isAskingVideoContinue: false });\n    },\n\n    removeLastKeyBlockGroup() {\n        const cellNumberArr = [_GAME.game.lastKeyCellNumber].concat(Object.keys(_GAME.map.cellLinkMap[_GAME.game.lastKeyCellNumber]));\n        _log(` gameover >> video continue >> removeLastKeyBlockGroup = ${cellNumberArr}`);\n        _GAME.map.clearCellGroup(cellNumberArr);\n        _GAME.game.genNewItem();\n        _GAME.game.videoContinueLeft--;\n        _GAME.data.saveData({ videoContinueLeft: _GAME.game.videoContinueLeft });\n    },\n\n    onVideoContinueFail(err) {\n        _GAME.game.realGameOver(true);\n\n        _log(` onVideoContinueFail >> err = `, err);\n        // if(_GAME.configs.off_inter_ads){\n        //     _GAME.ui.showAlert(\n        //         `Oops!\\n\\nSomething went wrong`,\n        //         //_GAME.video.isErrRewardNotCompleted(err) ? `Oops!\\n\\n Video is skipped\\n You're not saved!` : `Oops!\\n\\nSomething went wrong`,\n        //         () => {\n        //             _GAME.game.removeLastKeyBlockGroup();\n        //             _GAME.data.saveData({ currentMapState: _GAME.map.currentState });\n        //             _GAME.data.saveData({ isAskingVideoContinue: false });\n        //         }\n        //     );\n           \n        // }else{\n            _GAME.ui.showAlert(\n                `Oops!\\n\\nSomething went wrong`,\n                //_GAME.video.isErrRewardNotCompleted(err) ? `Oops!\\n\\n Video is skipped\\n You're not saved!` : `Oops!\\n\\nSomething went wrong`,\n                () => {\n                    _GAME.game.visualGameOver();\n                   \n                }\n            );\n        // }\n        _GAME.data.saveData({ isAskingVideoContinue: false });\n     \n    },\n\n    // when user really fail\n    realGameOver(isNoVisual = false) {\n        // _GAME.leaderboard.saveScore();\n        _GAME.control.newItemNode.active = false;\n        if (_GAME.user.bestScore < _GAME.user.score) {\n            _GAME.user.bestScore = _GAME.user.score;\n            _GAME.data.saveData({ bestScore: _GAME.user.bestScore });\n        }\n        // save before user quit\n        _GAME.data.saveData({ currentMapState: {}, stepCount: 0, lastScore: 0, videoContinueLeft: _GAME.configs.videoContinueTime });\n        //  log user time to game over\n        this.check2LogTimeToGameOver();\n        // ask to create shortcut & call to postSessionScore\n        _GAME.utils.setTimeout(() => {\n            _GAME.social.askShortcut(() => _GAME.social.postSessionScore());\n        }, 500);\n        if (_GAME.social.playerIdSendMessage) {\n            _GAME.social.sendMessageAfterQuit();\n        }\n        \n        if (!isNoVisual) this.visualGameOver();\n        _log('game over !');\n    },\n\n    visualGameOver() {\n        _GAME.leaderboard.updateScoreLabel();\n        //_GAME.ui.showLayer('layer_leaderboard');\n        _GAME.game.triplePoint = false;\n        _GAME.fx.effectTriple(false);\n        if(_GAME.friend.validatePanelCanShow()){\n            _GAME.uiChallenge.setDataChallenge(() => {});\n            _GAME.ui.showLayer('layer_challenge'); \n            _GAME.uiChallenge.runActionShowItem();\n        }else{\n            _GAME.ui.showLayer('layer_result'); \n        }\n        _GAME.audio.playSound('game_over');\n    },\n\n\n    handleBlockScoring(cellNumber, callback, callTimeCount, lastBlockCount,callbackLoopSearch) {\n        //console.log('callTimeCount   ',callTimeCount,'   lastBlockCount   ',lastBlockCount);\n        if (!callTimeCount) callTimeCount = 0;\n        callTimeCount++;\n        const orgBlockNumber = parseInt(_GAME.map.currentState[cellNumber]);\n        const scoredCellArr = _GAME.map.checkBlockScore(cellNumber);\n        const callbackFunc = (complimentCode) => {\n            //console.log('complimentCode  ',complimentCode);\n            let code = complimentCode || callTimeCount - 1;\n            if (code == 1) code = lastBlockCount > 3 ? lastBlockCount * 10 : 0;\n            _GAME.utils.setTimeout(() => {\n                if(code == 0){\n                    \n                }\n                if(callbackLoopSearch) callbackLoopSearch();\n                //console.log('code   ',code);\n                if (callback) callback(code);\n            }, 10);\n        }\n\n        // must set time out to let scoringThreadRemaining to be updated = 2\n        if (!scoredCellArr) return callbackFunc();\n        const keyCellNode = cc.find(`Canvas/play_area/map/Image_HexBlock_${cellNumber}`);\n\n        const totalScore = _GAME.configs.calculateScore(orgBlockNumber, scoredCellArr.length,);\n        \n        if (orgBlockNumber < 7) {\n            const scoringCallback = () => {\n                _GAME.fx.showScoreToolTip(`+${totalScore}`, keyCellNode);\n                _GAME.map.setSingleCell(cellNumber, orgBlockNumber + 1);\n                keyCellNode.runAction(cc.sequence(\n                    cc.scaleTo(0.15, 1.24),\n                    cc.scaleTo(0.15, 1),\n                    cc.callFunc(() => this.handleBlockScoring(cellNumber, callback, callTimeCount, scoredCellArr.length,callbackLoopSearch))\n                ));\n            }\n            _GAME.fx.fxScoreNormal(keyCellNode, scoredCellArr, scoringCallback);\n            _GAME.utils.setTimeout(() => {\n                _GAME.fx.multiScoreLabelFlyNormal(keyCellNode, scoredCellArr, totalScore);\n            }, 600)\n            _GAME.utils.setTimeout(() => this.score(totalScore), 1000);\n\n        } else {\n            _GAME.fx.multiScoreLabelFly7(scoredCellArr, totalScore);\n            _GAME.fx.fxScore7(keyCellNode, scoredCellArr, () => callbackFunc(7));\n            _GAME.utils.setTimeout(() => this.score(totalScore), 350);\n        }\n        _GAME.map.clearCellGroup(scoredCellArr);\n    },\n\n\n    score(scoreNumber) {\n        _GAME.user.score += (!_GAME.game.triplePoint) ? scoreNumber: scoreNumber * 3; \n        //console.log('current   ',scoreNumber ,'has triple  ===> ',_GAME.game.triplePoint, ' === ',scoreNumber * 3);\n        if(_GAME.user.bestScore < _GAME.user.score){\n            _GAME.user.bestScore = _GAME.user.score ;\n            _GAME.data.saveData({ bestScore: _GAME.user.bestScore });\n            _GAME.ui.updateHighScore();\n        }\n        _GAME.data.saveData({ lastScore: _GAME.user.score });\n        _GAME.ui.updateScore(_GAME.user.score);\n        if(!_GAME.tutTriple.checkDoneTutTriple()){\n            if(_GAME.user.score >= _GAME.tutTriple.pointToShowTut){\n                if(_GAME.uiPowerItem.totalTriple > 0){\n                    if(!_GAME.game.triplePoint){\n                        _GAME.tutTriple.startTut();\n\n                    }\n                }\n            }\n        }\n    },\n\n\n    replay(callback) {\n        this.stepCount = 0;\n        _GAME.map.resetMap();\n        _GAME.user.score = 0;\n        _GAME.ui.updateScore(0);\n        _GAME.game.videoContinueLeft = _GAME.configs.videoContinueTime;\n\n        _GAME.data.saveData({ currentMapState: {}, stepCount: 0, lastScore: 0 });\n        _GAME.game.genNewItem();\n        if (callback) callback();\n    },\n\n\n    // check to log user time for 1 game from start to game over\n    check2LogTimeToGameOver() {\n        if (!this.gameStartTime) return this.gameStartTime = _time();\n        const timeRange = _time() - this.gameStartTime;\n        _log(` timeRange gameover = ${timeRange} `);\n        _GAME.utilsFB.log(`ev_game_over_time`, parseInt(timeRange / 1000));\n        this.gameStartTime = _time();\n    },\n    actionPowerItemBom(callback){\n        if(_GAME.map.currentState){\n            let object = _GAME.map.currentState;\n            const nodeMap = cc.find('Canvas/play_area/map');\n            const nodeAnimMap = cc.find('Canvas/layer_anim/content/anim_boom/map');\n            let size = 0;\n            let arrayAnim = [];\n            for (let key in object) {\n                let element = object[key];\n                if(element && element != 0){\n                    let nodeToCloneAnim = nodeMap.children.find(item=>item.name == `Image_HexBlock_${key}`);\n                    let cloneOb=  cc.instantiate(nodeToCloneAnim);\n                    cloneOb.position = nodeToCloneAnim.position;\n                    nodeAnimMap.addChild(cloneOb);\n                    arrayAnim.push(cloneOb);\n                    size++;\n                }\n            }\n            if(size == 0 ){\n                _GAME.ui.hideLayer('layer_anim');\n                return;\n            }\n            // if(callback){\n                // _GAME.uiPowerItem.flyingMove(\n                    // cc.find('Canvas/play_area/btn_bomb'),\n                    // ()=>{\n                        // _GAME.game.showAnim(arrayAnim,callback);\n                        // // _GAME.utils.setTimeout(()=>{\n                        // _GAME.map.resetMap();\n                        // if(callback) callback();\n                        // // },1000);\n                        // _GAME.data.saveData({ currentMapState: {}, stepCount: 0, lastScore: 0 });\n                    // },\n                //     'minus'\n                // ) \n            // }else{\n               _GAME.utils.setTimeout(()=>{\n                    // _GAME.uiPowerItem.flyingMove(\n                        // cc.find('Canvas/play_area/btn_bomb'),\n                        // ()=>{\n                            _GAME.game.showAnim(arrayAnim,callback);\n                            // _GAME.utils.setTimeout(()=>{\n                            _GAME.map.resetMap();\n                            if(callback) callback();\n                            // },1000);\n                            _GAME.data.saveData({ currentMapState: {}, stepCount: 0, lastScore: 0 });\n                        // },\n                        'minus'\n                    // ) \n               },200);\n            // }\n                      \n            \n        }\n    },\n    showAnim(arrayAnim,callback){\n        let time = 1;\n        let stepTime = 20;\n        let callBack = ()=>{\n                const nodeAnimMap = cc.find('Canvas/layer_anim/content/anim_boom/map');\n                nodeAnimMap.removeAllChildren();\n                _GAME.ui.hideLayer('layer_anim');\n                _GAME.uiPowerItem.validateBoomSuccess();\n        };\n        for (let index = 0; index < arrayAnim.length; index++) {\n            let itemShow = arrayAnim[index];\n            // console.log(`${index}=>>>> ${time}`);\n            time += (index) * stepTime;\n            if(index == (arrayAnim.length - 1)){\n                _GAME.utils.setTimeout(()=>{\n                    _GAME.fx.effectBoom(itemShow,()=>{\n                        if(!_GAME.tutBom.checkDoneTutBom()){\n                            _GAME.tutBom.endTut();\n                        }\n                        callBack();\n                    });\n                },time);\n            }else{\n                _GAME.utils.setTimeout(()=>{\n                    _GAME.fx.effectBoom(itemShow);\n                },time);\n            }\n        }\n        \n        // console.log('total Time   ',time);\n        \n    },\n    actionPowerItemTriple(){\n        _GAME.game.triplePoint = true;\n        // _GAME.uiPowerItem.flyingMove(\n            // cc.find('Canvas/play_area/btn_triple'),\n            // ()=>{\n                if(!_GAME.tutTriple.checkDoneTutTriple() && _GAME.tutTriple.showing){\n                    _GAME.tutTriple.endTut();\n                }   \n                _GAME.ui.hideLayer('layer_anim');\n                _GAME.fx.effectTriple(true,()=>{\n                    _GAME.uiPowerItem.validateTripleSuccess();\n                });\n            // }\n            // 'minus'\n        // ) \n      \n    },\n    actionPowerItemRelocated(callback){\n        if(_GAME.map.currentState){\n            let object = _GAME.map.currentState;\n            // //console.log('object  ',object);\n            const nodeMap = cc.find('Canvas/play_area/map');\n            const nodeAnimMap = cc.find('Canvas/layer_anim/content/anim_relocated/map');\n            let size = 0;\n            let arrayAnim = [];\n            let arrayMainNode = [];\n            for (let key in object) {\n                let element = object[key];\n                if(element && element != 0){\n                    let nodeToCloneAnim = nodeMap.children.find(item=>item.name == `Image_HexBlock_${key}`);\n                    let cloneOb=  cc.instantiate(nodeToCloneAnim);\n                    cloneOb.position = nodeToCloneAnim.position;\n                    nodeAnimMap.addChild(cloneOb);\n                    arrayAnim.push(cloneOb);\n                    arrayMainNode.push(nodeToCloneAnim);\n                    size++;\n                }\n            }\n            if(size == 0 ){\n                _GAME.ui.hideLayer('layer_anim');\n                return;\n            }\n            // if(callback){\n            //     // _GAME.uiPowerItem.flyingMove(\n            //         // cc.find('Canvas/play_area/btn_relocated'),\n            //         // ()=>{\n            //             let count = 0;\n            //             _GAME.map.resetMap();\n            //             if(callback)callback();\n            //             _GAME.fx.showAnimRelocated(arrayAnim,arrayMainNode,()=>{\n            //                 count++;\n            //                 if(count == size){\n            //                     _GAME.utils.setTimeout(()=>{\n            //                         const nodeMap = cc.find('Canvas/layer_anim/content/anim_relocated/map');\n            //                         nodeMap.removeAllChildren();\n            //                         _GAME.ui.hideLayer('layer_anim');\n            //                         _GAME.uiPowerItem.validateRelocatedSuccess();\n            //                         _GAME.data.saveData({ currentMapState: _GAME.map.currentState});\n            //                         _GAME.game.searchMapItem();\n            //                     },500);\n            //                 }\n            //             });\n            //         // },\n            //     //     'minus'\n            //     // );\n                \n            // }else{\n                // _GAME.utils.setTimeout(()=>{\n                    // _GAME.uiPowerItem.flyingMove(\n                    //     cc.find('Canvas/play_area/btn_relocated'),\n                    //     ()=>{\n                            let count = 0;\n                            _GAME.map.resetMap();\n                            if(callback)callback();\n                            _GAME.fx.showAnimRelocated(arrayAnim,arrayMainNode,()=>{\n                                count++;\n                                if(count == size){\n                                    if(!_GAME.tutRelocated.checkDoneTutRelocated()){\n                                        _GAME.tutRelocated.endTut();\n                                    }\n                                    _GAME.utils.setTimeout(()=>{\n                                        const nodeMap = cc.find('Canvas/layer_anim/content/anim_relocated/map');\n                                        nodeMap.removeAllChildren();\n                                        _GAME.ui.hideLayer('layer_anim');\n                                        _GAME.uiPowerItem.validateRelocatedSuccess();\n                                        _GAME.data.saveData({ currentMapState: _GAME.map.currentState});\n                                        _GAME.game.searchMapItem();\n                                    },500);\n                                }\n                            });\n                    //     },\n                    //     'minus'\n                    // );\n                // },1000);\n            // }\n            \n        }\n    },\n    searchMapItem(){\n        if(_GAME.map.currentState){\n            let obCheck = {};\n            let object = _GAME.map.currentState;\n            for (let key in object) {\n                let element = object[key];\n                if(element){\n                    if(!obCheck[element]){\n                        obCheck[element] = [];\n                        obCheck[element].push(key);\n                    }else{\n                        obCheck[element].push(key);\n                    }\n                }\n            }\n            // console.log('obCheck    ',obCheck);\n            _GAME.game.seachToAutoMerge(obCheck);\n           \n        }\n    },\n    seachToAutoMerge(obCheck){\n        let resultCount = [];\n        let totalArray = [];\n        for (let key in obCheck) {\n            let element = obCheck[key];\n            if(element.length >= 3){\n                // console.log(key , '   resultCount   ',element);\n                for (let index = 0; index < element.length; index++) {\n                    let id = element[index];\n                    let arr = _GAME.game.loopSearch(id,element);\n                    arr.sort((a,b)=>{\n                        if(a<b)return -1;\n                        return 1;\n                    });\n                    if(arr.length >=3){\n                        resultCount.push(arr);  \n                    }\n                }\n                if(resultCount.length != 0){\n                    // console.log('resultCount   ',resultCount);\n                    // console.log('============================');\n                    let arrResult = _GAME.game.compareArr(key,resultCount);\n                    // console.log('arrResult   ',arrResult);\n                    if(arrResult.length >= 3){\n                        totalArray.push(arrResult);\n                    }\n                }\n            }\n        }\n        if(totalArray.length != 0){\n            // console.log('totalArray   ',totalArray);\n            let arrayShowAnim = _GAME.utils.randomArrItem(totalArray);\n            // console.log('arrayShowAnim ',arrayShowAnim );\n            _GAME.game.loopAnim(arrayShowAnim);\n        }\n    },\n    loopAnim(arrResult){\n        let arrFirst = arrResult; \n        // console.log('AN arrFirst     ',arrFirst);\n        let keyCellNumber = _GAME.utils.randomArrItem(arrFirst);\n        // console.log('key cell AN   ',keyCellNumber , _GAME.map.currentState[keyCellNumber]);\n        _GAME.utils.setTimeout(()=>{\n            _GAME.game.handleBlockScoring(keyCellNumber,null,null,null,()=>{\n                // console.log('_GAME.map.currentState   ',_GAME.map.currentState);\n                _GAME.data.saveData({ currentMapState: _GAME.map.currentState });\n                _GAME.game.searchMapItem();\n            });\n        },500);\n    },\n    loopSearch(item,array){\n        let arr=  [];\n        arr.push(item);\n        if(this.cellLinks){\n            for (let key in this.cellLinks) {\n                if(key.indexOf(item) != -1){\n                    let nextPost = null;\n                    if(key.indexOf(`_${item}`) != -1){\n                        nextPost = key.replace(`_${item}`,'');\n                    }else if(key.indexOf(`${item}_`) != -1){\n                        nextPost = key.replace(`${item}_`,'');\n                    }\n                    if(array.indexOf(nextPost) != -1){\n                        arr.push(nextPost);\n                    }\n                } \n            }\n        }\n        return arr;\n    },\n    compareArr(key,resultCount){\n        if(resultCount.length == 0)return null;\n        let result = null;\n        resultCount.map((array)=>{\n            if(!result) { \n                result = array;\n            }else{\n                array.map((id)=>{\n                    if(result.indexOf(id) == -1){\n                        let value = _GAME.map.currentState[id];\n                        if(value && value != 0){\n                            if(value == key){\n                                result.push(id);\n                            }\n                        }\n                    }\n                });\n            }\n        })\n        return result;\n    }\n}","import * as _GAME from '../all_modules';\n\nexport const interAd = {\n    init() {\n        this.preloadInterAds();\n    },\n\n    interAdObj: null,\n    preloadInterAds() {\n        if(!_GAME.configs.canShowAndLoadInter) return;s\n        if (!window.FBInstant) return\n        _log(` preloadInterAds 1111 `);\n        if (this.isLoading) return;\n\n        this.interAdObj = null;\n        this.isLoading = true;\n\n        FBInstant.getInterstitialAdAsync(_GAME.configs.interAdId).then(interAdObj => {\n            interAdObj.loadAsync().then(() => {\n                this.interAdObj = interAdObj;\n                this.isLoading = false;\n            }).catch((e) => {\n                console.warn(e);\n                this.isLoading = false;\n            });\n        }).catch((e) => {\n            console.warn(e);\n            this.isLoading = false;\n        });\n    },\n\n    showInterAds(adPosition, callBack) {\n        if(!_GAME.configs.canShowAndLoadInter) return;s\n        console.log(` showInterAds 1111 `);\n        if (!_GAME.configs.openInterAds) {\n            callBack && callBack();\n            return;\n        }\n        if (!window.FBInstant || !this.interAdObj) return callBack && callBack();\n\n        this.interAdObj.showAsync().then(() => {\n            _GAME.interAd.log(adPosition, 1);\n            if (callBack) callBack()\n            this.preloadInterAds() // load another ads\n        }).catch((e) => {\n            console.warn(e);\n            _GAME.interAd.log(adPosition, 0, e.code);\n            callBack && callBack();\n            if (e.code != 'RATE_LIMITED') this.preloadInterAds();\n        })\n    },\n\n    log(adPosition, result, err_code = '') {\n        // _log(` .... interstitial loggggg ... adPosition=${adPosition} // err_code= `, err_code);\n        _GAME.utilsFB.log(`ev_inter_ad`, 1, {\n            position: adPosition,\n            watched_success: result,\n            err_code: err_code\n        });\n        if (result) {\n            _GAME.utilsFB.log(`Ads-Total-Inter`);\n            _GAME.utilsFB.log(`Ads-Total`);\n        }\n    },\n\n\n    // ===================================\n    replayCount2ShowAd: 0,\n    checkToShowReplayAd() {\n        this.replayCount2ShowAd++;\n        if (this.replayCount2ShowAd % _GAME.configs.showInterAdAfterEveryReplayTime == 1) {\n            this.showInterAds('gameOverReplay');\n        }\n    },\n\n}","// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    // update (dt) {},\n});\n","import * as _GAME from '../all_modules';\n\nexport const leaderboard = {\n    leaderboard: null,\n    globalPlayerArr: [],\n    isEntriesLoadedGlobal: false,\n    friendsPlayerArr: [],\n    isEntriesLoadedFriends: false,\n\n    init() {\n        // fake data\n        let self = this;\n        if (!window.FBInstant) {\n            self.globalPlayerArr = [\n                { id: 'xxxxaa111x', name: 'Global 123', score: 222 },\n                { id: 'xxxxaa111x', name: 'Global 456', score: 676 },\n                { id: 'xxxxaa111', name: 'Global', score: 1235 },\n                { id: 'xxxxaa111x', name: 'Global 789', score: 4354 },\n                { id: 'xxxxaa111x', name: 'Global 100', score: 3455 },\n                { id: 'xxxxaa111x', name: 'Global 456', score: 676 },\n                { id: 'xxxxaa111', name: 'Global', score: 1235 },\n                { id: 'xxxxaa111x', name: 'Global 789', score: 4354 },\n                { id: 'xxxxaa111x', name: 'Global 100', score: 3455 },\n                { id: 'xxxxaa111x', name: 'Global 456', score: 676 },\n                { id: 'xxxxaa111', name: 'Global', score: 1235 },\n                { id: 'xxxxaa111x', name: 'Global 789', score: 4354 },\n                { id: 'xxxxaa111x', name: 'Global 100', score: 3455 },\n            ];\n            _GAME.leaderboard.isEntriesLoadedGlobal = true;\n\n            self.friendsPlayerArr = [\n                { id: 'xxxxaa111x', name: 'Friend 123', score: 222 },\n                { id: 'xxxxaa111x', name: 'Friend 456', score: 676 },\n                { id: 'xxxxaa111', name: 'Friend', score: 1235 },\n                { id: 'xxxxaa111x', name: 'Friend 789', score: 4354 },\n                { id: 'xxxxaa111x', name: 'Friend 100', score: 3455 },\n                { id: 'xxxxaa111x', name: 'Friend 456', score: 676 },\n                { id: 'xxxxaa111', name: 'Friend', score: 1235 },\n                { id: 'xxxxaa111x', name: 'Friend 789', score: 4354 },\n                { id: 'xxxxaa111x', name: 'Friend 100', score: 3455 },\n                { id: 'xxxxaa111x', name: 'Friend 456', score: 676 },\n                { id: 'xxxxaa111', name: 'Friend', score: 1235 },\n                { id: 'xxxxaa111x', name: 'Friend 789', score: 4354 },\n                { id: 'xxxxaa111x', name: 'Friend 100', score: 3455 },\n            ];\n            _GAME.leaderboard.isEntriesLoadedFriends = true;\n        }\n\n        // real data\n        else {\n            FBInstant.getLeaderboardAsync(_GAME.configs.leaderboardName).then(leaderboard => {\n                self.leaderboard = leaderboard;\n                // _log('this.leaderboard   ', leaderboard);\n                self.leaderboard.getPlayerEntryAsync().then(entry => {\n                    // _log('entry    ', entry);\n                    if (!entry) {\n                        self.leaderboard.setScoreAsync(_GAME.user.exp, \"\").then(() => self.getEntries());\n                    } else self.getEntries();\n                });\n\n            }).catch(err => _log(` error getting leaderboard `, err));\n            // _log('get Real Data    ', _GAME.leaderboard);\n        }\n\n        // render\n\n        _GAME.utils.waitToRun(() => self.render('friends'), 'isEntriesLoadedFriends', _GAME.leaderboard);\n        _GAME.utils.waitToRun(() => self.render('global'), 'isEntriesLoadedGlobal', _GAME.leaderboard);\n    },\n\n\n\n\n    getEntries() {\n        // global\n        this.leaderboard\n            .getEntriesAsync(_GAME.configs.leaderboardPlayerCount, 0)\n            .then(entries => {\n                this.globalPlayerArr = this.entriesToArr(entries);\n                _GAME.leaderboard.isEntriesLoadedGlobal = true;\n            })\n            .catch(err => _log(`Error getting leaderboard global entries `, err));\n\n        // friends\n        this.leaderboard\n            .getConnectedPlayerEntriesAsync(_GAME.configs.leaderboardPlayerCount, 0)\n            .then(entries => {\n                this.friendsPlayerArr = this.entriesToArr(entries);\n                _GAME.leaderboard.isEntriesLoadedFriends = true;\n            })\n            .catch(err => _log(`Error getting leaderboard global entries `, err));\n    },\n\n    entriesToArr(entries) {\n        const playerArr = []\n        for (let i = 0; i < entries.length; i++) {\n            const entry = entries[i];\n            playerArr.push({\n                id: entry.getPlayer().getID(),\n                photo: entry.getPlayer().getPhoto(),\n                name: entry.getPlayer().getName(),\n                score: entry.getScore(),\n                rank: entry.getRank(),\n            })\n        }\n        return playerArr;\n    },\n\n\n    saveScore() {\n        _GAME.ui.showNagScreen();\n        this.leaderboard.setScoreAsync(_GAME.user.score, \"\").then(() => {\n            _log(`saveScore :: >>> saved score to leaderboard-- - _GAME.user.exp = ${_GAME.user.score} `);\n            // _log('_GAME.user.bestScore     ', _GAME.user.bestScore, '_GAME.user.score     ', _GAME.user.score);\n            if (_GAME.user.bestScore <= _GAME.user.score) {\n                _log('_GAME.user.bestScore < _GAME.user.scoree     ');\n                _GAME.leaderboard.isEntriesLoadedFriends = false;\n                _GAME.leaderboard.isEntriesLoadedGlobal = false;\n                _GAME.leaderboard.init();\n            }\n            if (_GAME.social.playerIdSendMessage) {\n                _GAME.social.sendMessageAfterQuit();\n\n            }\n            _GAME.promo.renderButtonByIcon();\n            _GAME.ui.hideNagScreen();\n            // if user has new best => reload leaderboard\n        }).catch(err => _log(`saveScore err `, err));\n\n\n\n\n    },\n\n    render(leaderboardName = 'friends') {\n        let playerArr = _GAME.leaderboard[`${leaderboardName}PlayerArr`];\n        // _log(` leaderboard >> render called // leaderboardName=${leaderboardName} // playerArr= `, playerArr);\n\n        const sampleRow = cc.find('Canvas/layer_leaderboard/content_bg/middle_container/leaderboard/leaderboard_content/sample_row');\n        const container = cc.find(`Canvas/layer_leaderboard/content_bg/middle_container/leaderboard/leaderboard_content/scrollview_${leaderboardName}/view/content`);\n        container.removeAllChildren();\n        // _log('Nó đã đến đoạn gen lại      ', leaderboardName);\n        playerArr.map((player, index) => {\n                const newRow = _GAME.utils.copyNodeTo(sampleRow, container);\n\n                newRow.active = true;\n                // bg\n                newRow.getChildByName('bg2').active = (index % 2); //alternative bg\n\n                // photo border\n                // for (let i = 0; i < 3; i++) _GAME.utils.getChildByPath(newRow, `avatar/LeaderBoardStrokeAvatar_${i + 1}`).active = (i == index); //avatar bg\n\n                // avatar\n                if (player.photo) {\n                    cc.loader.load(player.photo, (err, texture) => {\n                        if (err) return _log(err);\n                        const avarNode = _GAME.utils.getChildByPath(newRow, 'avatar/real_avatar');\n                        const avarNodeOrgSize = { width: avarNode.width, height: avarNode.height };\n                        avarNode.getComponent(cc.Sprite).spriteFrame = new cc.SpriteFrame(texture);\n\n                        // **** reset size of node because STUPID FUCKING COCOS will set node size to size of image loaded from url no matter what \n                        avarNode.setSizeFunc = () => {\n                            avarNode.width = avarNodeOrgSize.width;\n                            avarNode.height = avarNodeOrgSize.height;\n                        }\n                        setTimeout(avarNode.setSizeFunc, 100);\n                    });\n                }\n\n                // text\n                _GAME.utils.setLabelText(newRow.getChildByName('label_rank'), (index + 1) + '.');\n                _GAME.utils.setLabelText(newRow.getChildByName('label_user_name'), player.name);\n                _GAME.utils.setLabelText(newRow.getChildByName('label_score'), _GAME.utils.localizeNumber(player.score));\n\n                // buttons\n                newRow.getChildByName('btn_brag').active = (player.id == _GAME.user.id);\n                newRow.getChildByName('btn_play').active = (leaderboardName == 'friends');\n\n                _GAME.utils.addButtonComp(\n                    newRow.getChildByName('btn_brag'),\n                    () => {\n                        _GAME.utilsFB.log('ev_click_button_share_in_leader_board', 1, { Position: index });\n                        _GAME.social.share(player.score);\n                    }\n                );\n\n                _GAME.utils.addButtonComp(\n                    newRow.getChildByName('btn_play'),\n                    () => {\n                        _GAME.utilsFB.log('ev_click_button_play_in_leader_board', 1, { Position: index });\n                        // _GAME.social.invite();\n                        _GAME.social.createContext(\n                            player.id,\n                            () => {\n                                _GAME.social.playerIdSendMessage = player.id;\n                                _log('Successs    ');\n                                _GAME.ui.hideLayer('layer_leaderboard');\n                                // _GAME.interAd.show('gameOverReplay');\n                                _GAME.game.replay(() => _GAME.interAd.checkRequireMentShowAdd(() => _GAME.interAd.show('gameOverReplay')));\n                            },\n                            () => {\n                                _log('fail  ');\n                            }\n                        )\n                    }\n                );\n            })\n            // _log('---------------------------------');\n            // _log('container   active  ', container.active);\n            // container.children.map((child) => {\n            //     _log('child   acitve  ', child.active);\n            // });\n\n    },\n\n\n\n    btnBragClick() {\n\n    },\n\n    //  tab switching\n    currentTabName: 'friends',\n    onClickTab(tabName) {\n        if (tabName == this.currentTabName) return;\n        this.currentTabName = tabName;\n        const setTabActive = (myTabName, isActive) => {\n                // the tab\n                cc.find(`Canvas/layer_leaderboard/content_bg/middle_container/leaderboard/tabs/${myTabName}/active`).active = isActive;\n\n                // the leaderboard content\n                cc.find(`Canvas/layer_leaderboard/content_bg/middle_container/leaderboard/leaderboard_content/scrollview_${myTabName}`).active = isActive;\n            }\n            ['global', 'friends'].map(name => setTabActive(name, (name == tabName)));\n\n        // HANDLE THE FUCKING RESIZE BUG OF COCOS 2.4 WITH IMAGE LOADED FROM URL\n        cc.find(`Canvas/layer_leaderboard/content_bg/middle_container/leaderboard/leaderboard_content/scrollview_${tabName}/view/content`).children.map(row => {\n            const setSizeFunc = _GAME.utils.getChildByPath(row, 'avatar/real_avatar').setSizeFunc;\n            if (setSizeFunc) setSizeFunc();\n        })\n    },\n\n    updateScoreLabel() {\n        _GAME.utils.setLabelText(\n            cc.find('Canvas/layer_leaderboard/header/label_score'),\n            _GAME.utils.localizeNumber(_GAME.user.score)\n        )\n    },\n\n}","import * as _GAME from '../all_modules';\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n    },\n    onLoad(){\n        const bg_real = cc.find('Canvas/bg');\n        _GAME.utils.setTimeout(()=>{\n            bg_real.active =true;\n            const nodeBgLoad2 = cc.find('Canvas/bg_load2');\n            nodeBgLoad2.active = true;\n            console.log('load bg2');\n            _GAME.utils.setTimeout(() => {\n                nodeBgLoad2.active = false;\n            }, 5000);\n        },1000);\n        _GAME.utils.setTimeout(()=>{\n            const nodeLoad2 = cc.find('Canvas/load2');\n            \n            const nodeShare = cc.find('Canvas/shares');\n            const nodeMessage = cc.find('Canvas/messages');\n            nodeLoad2.active = true;\n           \n            nodeShare.active = true;\n            nodeMessage.active = true;\n            _GAME.utils.setTimeout(() => {\n                nodeLoad2.active = false;\n                nodeShare.active = false;\n                nodeMessage.active = false;\n            }, 2000);\n        },5000);\n    }\n});\n","import * as _GAME from '../all_modules';\ncc.Class({\n    extends: cc.Component,\n\n    properties: {},\n    onLoad(){\n        this.nodeProxy = _GAME.localize.getProxyNode();\n        this.nodeProxy.on('TRANFORM_TEXT',this.changeText,this);\n    },\n    onDestroy(){\n        this.nodeProxy.off('TRANFORM_TEXT',this.changeText,this);\n    },\n    onEnable(){\n        this.nodeProxy.on('TRANFORM_TEXT',this.changeText,this);\n        this.changeText();\n    },\n    // onDisable(){\n    //     const nodeProxy = _GAME.localize.getProxyNode();\n    //     nodeProxy.off('TRANFORM_TEXT',this.changeText,this);\n    // },\n    changeText(){\n        // console.log(this.node.name ,' ==> ',_GAME.localize.pointerLang,'/',_GAME.localize.currentLanguage);\n        if(_GAME.localize.pointerLang != 0 && _GAME.localize.currentLanguage){\n            if(this.node.getComponent(cc.Label)){\n                if(this.node.getComponent(cc.Label).overflow != 2)this.node.getComponent(cc.Label).overflow = 2;\n                let cache = this.node.getComponent(cc.Label)._cache;\n                if(!cache){\n                    this.node.getComponent(cc.Label)._cache =  this.node.getComponent(cc.Label).string;\n                    cache = this.node.getComponent(cc.Label)._cache;\n                }\n                // console.log('Cache  ',cache);\n                // console.log('Cache   ',cache);\n                let valueCompare = cache.replaceAll(' ','').toUpperCase();\n                // console.log('valueCompare   ',valueCompare);\n                _GAME.utils.setLabelText(this.node,_GAME.localize.convertPosition(valueCompare));\n            }\n        }\n       \n    }\n});\n","import * as _GAME from '../all_modules';\nexport const localizeConfig = {\n    init(){\n        console.log('LOAD module localizeConfig');\n\t},\n\ttotalLocalLang:['en_US','vi_VN','th_TH','fr_FR','pt_PT','es_ES','ar_AR','tr_TR','de_DE','zh_CN'],\n\tmeaningLocalLang:['English','Tiếng Việt','ไทย','français','Português','Español','عربى','Türk','Deutsche','中文'],\t\n\tlocalize: {\n\t\t\"PAUSE\": {\n\t\t\t\"ar_AR\": \"وقفة\",\n\t\t\t\"pl_PL\": \"Pauza\",\n\t\t\t\"en_US\": \"Pause\",\n\t\t\t\"tr_TR\": \"Duraklat\",\n\t\t\t\"vi_VN\": \"Tạm dừng\",\n\t\t\t\"es_ES\": \"Pausa\",\n\t\t\t\"zh_CN\": \"暫停\",\n\t\t\t\"th_TH\": \"หยุด\",\n\t\t\t\"fr_FR\": \"Pause\",\n\t\t\t\"pt_PT\": \"Pausa\",\n\t\t\t\"de_DE\": \"Pause\"\n\t\t},\n\t\t\"CANCEL\": {\n\t\t\t\"ar_AR\": \"استقال\",\n\t\t\t\"pl_PL\": \"Porzucić\",\n\t\t\t\"en_US\": \"Cancel\",\n\t\t\t\"tr_TR\": \"Çık\",\n\t\t\t\"vi_VN\": \"Bỏ\",\n\t\t\t\"es_ES\": \"Dejar\",\n\t\t\t\"zh_CN\": \"放棄\",\n\t\t\t\"th_TH\": \"เลิก\",\n\t\t\t\"fr_FR\": \"Quitter\",\n\t\t\t\"pt_PT\": \"Sair\",\n\t\t\t\"de_DE\": \"Verlassen\"\n\t\t},\n\t\t\"GAMEOVER\": {\n\t\t\t\"ar_AR\": \"انتهت اللعبة\",\n\t\t\t\"pl_PL\": \"Koniec gry\",\n\t\t\t\"en_US\": \"Game over\",\n\t\t\t\"tr_TR\": \"Oyun bitti\",\n\t\t\t\"vi_VN\": \"Thua cuộc\",\n\t\t\t\"es_ES\": \"Juego terminado\",\n\t\t\t\"zh_CN\": \"遊戲結束\",\n\t\t\t\"th_TH\": \"จบเกม\",\n\t\t\t\"fr_FR\": \"Jeu terminé\",\n\t\t\t\"pt_PT\": \"Fim de jogo\",\n\t\t\t\"de_DE\": \"Spiel ist aus\"\n\t\t},\n\t\t\"YOURSCORE\": {\n\t\t\t\"ar_AR\": \"درجاتك\",\n\t\t\t\"pl_PL\": \"Twój wynik\",\n\t\t\t\"en_US\": \"Your score\",\n\t\t\t\"tr_TR\": \"Puanın\",\n\t\t\t\"vi_VN\": \"Điểm\",\n\t\t\t\"es_ES\": \"Tu puntuación\",\n\t\t\t\"zh_CN\": \"你的分數\",\n\t\t\t\"th_TH\": \"คะแนนของคุณ\",\n\t\t\t\"fr_FR\": \"ton score\",\n\t\t\t\"pt_PT\": \"Sua pontuação\",\n\t\t\t\"de_DE\": \"Ihre Punktzahl\"\n\t\t},\n\t\t\"BRAG\": {\n\t\t\t\"ar_AR\": \"تفاخر\",\n\t\t\t\"pl_PL\": \"Przechwalać\",\n\t\t\t\"en_US\": \"Brag\",\n\t\t\t\"tr_TR\": \"Övünmek\",\n\t\t\t\"vi_VN\": \"Chia sẻ\",\n\t\t\t\"es_ES\": \"Jactarse\",\n\t\t\t\"zh_CN\": \"吹牛\",\n\t\t\t\"th_TH\": \"โม้\",\n\t\t\t\"fr_FR\": \"Se vanter\",\n\t\t\t\"pt_PT\": \"Gabar-se\",\n\t\t\t\"de_DE\": \"Prahlen\"\n\t\t},\n\t\t\"PLAYANOTHERFRIENDS\": {\n\t\t\t\"ar_AR\": \"العب مع الاصدقاء\",\n\t\t\t\"pl_PL\": \"Grać z przyjaciółmi\",\n\t\t\t\"en_US\": \"Play with friends\",\n\t\t\t\"tr_TR\": \"Arkadaşlarla oynamak\",\n\t\t\t\"vi_VN\": \"Chơi cùng bạn\",\n\t\t\t\"es_ES\": \"Jugar con amigas\",\n\t\t\t\"zh_CN\": \"與朋友一起玩\",\n\t\t\t\"th_TH\": \"เล่นกับเพื่อน\",\n\t\t\t\"fr_FR\": \"jouer avec des amis\",\n\t\t\t\"pt_PT\": \"Jogar com amigos\",\n\t\t\t\"de_DE\": \"Mit Freunden spielen\"\n\t\t},\n\t\t\"OUTOFMOVE\": {\n\t\t\t\"ar_AR\": \"خارج الحركة\",\n\t\t\t\"pl_PL\": \"Brak ruchu\",\n\t\t\t\"en_US\": \"Out of move\",\n\t\t\t\"tr_TR\": \"Hareket dışı\",\n\t\t\t\"vi_VN\": \"Hết nước đi\",\n\t\t\t\"es_ES\": \"Fuera de movimiento\",\n\t\t\t\"zh_CN\": \"搬走\",\n\t\t\t\"th_TH\": \"ไม่เคลื่อนไหว\",\n\t\t\t\"fr_FR\": \"Hors de mouvement\",\n\t\t\t\"pt_PT\": \"Fora de movimento\",\n\t\t\t\"de_DE\": \"Außer Bewegung\"\n\t\t},\n\t\t\"CONTINUE\": {\n\t\t\t\"ar_AR\": \"استمر\",\n\t\t\t\"pl_PL\": \"Kontyntynuj\",\n\t\t\t\"en_US\": \"Continue\",\n\t\t\t\"tr_TR\": \"Devam et\",\n\t\t\t\"vi_VN\": \"Tiếp tục\",\n\t\t\t\"es_ES\": \"Seguir\",\n\t\t\t\"zh_CN\": \"繼續\",\n\t\t\t\"th_TH\": \"ดำเนินการต่อ\",\n\t\t\t\"fr_FR\": \"Continuer\",\n\t\t\t\"pt_PT\": \"Continuar\",\n\t\t\t\"de_DE\": \"Fortsetzen\"\n\t\t},\n\t\t\"RESTART\": {\n\t\t\t\"ar_AR\": \"إعادة بدء\",\n\t\t\t\"pl_PL\": \"Uruchom ponownie\",\n\t\t\t\"en_US\": \"Restart\",\n\t\t\t\"tr_TR\": \"Tekrar başlat\",\n\t\t\t\"vi_VN\": \"Chơi lại\",\n\t\t\t\"es_ES\": \"Reiniciar\",\n\t\t\t\"zh_CN\": \"重新開始\",\n\t\t\t\"th_TH\": \"เริ่มต้นใหม่\",\n\t\t\t\"fr_FR\": \"Redémarrer\",\n\t\t\t\"pt_PT\": \"Reiniciar\",\n\t\t\t\"de_DE\": \"Neustart\"\n\t\t},\n\t\t\"PERFECT\": {\n\t\t\t\"ar_AR\": \"في احسن الاحوال\",\n\t\t\t\"pl_PL\": \"Idealny\",\n\t\t\t\"en_US\": \"Perfect\",\n\t\t\t\"tr_TR\": \"Mükemmel\",\n\t\t\t\"vi_VN\": \"Tuyệt vời\",\n\t\t\t\"es_ES\": \"Perfecta\",\n\t\t\t\"zh_CN\": \"完美\",\n\t\t\t\"th_TH\": \"สมบูรณ์แบบ\",\n\t\t\t\"fr_FR\": \"Parfait\",\n\t\t\t\"pt_PT\": \"impecável\",\n\t\t\t\"de_DE\": \"Perfekt\"\n\t\t},\n\t\t\"GREAT\": {\n\t\t\t\"ar_AR\": \"عظيم\",\n\t\t\t\"pl_PL\": \"Świetny\",\n\t\t\t\"en_US\": \"Great\",\n\t\t\t\"tr_TR\": \"Harika\",\n\t\t\t\"vi_VN\": \"Tuyệt\",\n\t\t\t\"es_ES\": \"Excelente\",\n\t\t\t\"zh_CN\": \"非常好\",\n\t\t\t\"th_TH\": \"เยี่ยมมาก\",\n\t\t\t\"fr_FR\": \"génial\",\n\t\t\t\"pt_PT\": \"Ótimo\",\n\t\t\t\"de_DE\": \"Toll\"\n\t\t},\n\t\t\"PLAY\": {\n\t\t\t\"ar_AR\": \"لعب\",\n\t\t\t\"pl_PL\": \"Grać\",\n\t\t\t\"en_US\": \"Play\",\n\t\t\t\"tr_TR\": \"Oyna\",\n\t\t\t\"vi_VN\": \"Chơi\",\n\t\t\t\"es_ES\": \"Tocar\",\n\t\t\t\"zh_CN\": \"玩\",\n\t\t\t\"th_TH\": \"เล่น\",\n\t\t\t\"fr_FR\": \"Jouer\",\n\t\t\t\"pt_PT\": \"Jogar \",\n\t\t\t\"de_DE\": \"abspielen\"\n\t\t},\n\t\t\"WANTMORECHANCE?\": {\n\t\t\t\"ar_AR\": \"تريد المزيد من الفرص\",\n\t\t\t\"pl_PL\": \"Chcesz więcej szans\",\n\t\t\t\"en_US\": \"Want more chance\",\n\t\t\t\"tr_TR\": \"Daha fazla şans istiyor\",\n\t\t\t\"vi_VN\": \"Chơi thêm \",\n\t\t\t\"es_ES\": \"Quiero más oportunidad\",\n\t\t\t\"zh_CN\": \"想要更多機會\",\n\t\t\t\"th_TH\": \"ต้องการโอกาสมากขึ้น\",\n\t\t\t\"fr_FR\": \"Je veux plus de chance\",\n\t\t\t\"pt_PT\": \"Quer mais chance\",\n\t\t\t\"de_DE\": \"Willst du mehr Chance\"\n\t\t},\n\t\t\"VIDEOISNOTAVAILABLE\": {\n\t\t\t\"ar_AR\": \"الفيديو غير متوفر\",\n\t\t\t\"pl_PL\": \"Film jest niedostępny\",\n\t\t\t\"en_US\": \"Video is not available\",\n\t\t\t\"tr_TR\": \"Video mevcut değil\",\n\t\t\t\"vi_VN\": \"Video không khả dụng\",\n\t\t\t\"es_ES\": \"El video no está disponible\",\n\t\t\t\"zh_CN\": \"視頻不可用\",\n\t\t\t\"th_TH\": \"ไม่มีวิดีโอ\",\n\t\t\t\"fr_FR\": \"La vidéo n'est pas disponible\",\n\t\t\t\"pt_PT\": \"O vídeo não está disponível\",\n\t\t\t\"de_DE\": \"Video ist nicht verfügbar\"\n\t\t},\n\t\t\"NOTICE\": {\n\t\t\t\"ar_AR\": \"تنويه\",\n\t\t\t\"pl_PL\": \"Ogłoszenie\",\n\t\t\t\"en_US\": \"Notice\",\n\t\t\t\"tr_TR\": \"farkına varmak\",\n\t\t\t\"vi_VN\": \"Chú ý\",\n\t\t\t\"es_ES\": \"darse cuenta\",\n\t\t\t\"zh_CN\": \"注意\",\n\t\t\t\"th_TH\": \"แจ้งให้ทราบล่วงหน้า\",\n\t\t\t\"fr_FR\": \"Remarquer\",\n\t\t\t\"pt_PT\": \"Aviso prévio\",\n\t\t\t\"de_DE\": \"Beachten\"\n\t\t},\n\t\t\"REPLAY\": {\n\t\t\t\"ar_AR\": \"إعادة\",\n\t\t\t\"pl_PL\": \"Powtórna rozgrywka\",\n\t\t\t\"en_US\": \"Replay\",\n\t\t\t\"tr_TR\": \"Tekrar oynat\",\n\t\t\t\"vi_VN\": \"Chơi lại\",\n\t\t\t\"es_ES\": \"Repetición\",\n\t\t\t\"zh_CN\": \"重玩\",\n\t\t\t\"th_TH\": \"เล่นซ้ำ\",\n\t\t\t\"fr_FR\": \"Rejouer\",\n\t\t\t\"pt_PT\": \"Replay\",\n\t\t\t\"de_DE\": \"Wiederholung\"\n\t\t},\n\t\t\"NICE\": {\n\t\t\t\"ar_AR\": \"لطيف\",\n\t\t\t\"pl_PL\": \"Ładny\",\n\t\t\t\"en_US\": \"Nice\",\n\t\t\t\"tr_TR\": \"Güzel\",\n\t\t\t\"vi_VN\": \"Tốt\",\n\t\t\t\"es_ES\": \"Niza\",\n\t\t\t\"zh_CN\": \"好\",\n\t\t\t\"th_TH\": \"ดี\",\n\t\t\t\"fr_FR\": \"agréable\",\n\t\t\t\"pt_PT\": \"bom\",\n\t\t\t\"de_DE\": \"nett\"\n\t\t},\n\t\t\"WATCH\": {\n\t\t\t\"ar_AR\": \"راقب\",\n\t\t\t\"pl_PL\": \"Zegarek\",\n\t\t\t\"en_US\": \"Watch\",\n\t\t\t\"tr_TR\": \"İzlemek\",\n\t\t\t\"vi_VN\": \"Xem\",\n\t\t\t\"es_ES\": \"Reloj\",\n\t\t\t\"zh_CN\": \"看\",\n\t\t\t\"th_TH\": \"ดู\",\n\t\t\t\"fr_FR\": \"Regarder\",\n\t\t\t\"pt_PT\": \"Ver\",\n\t\t\t\"de_DE\": \"Uhr\"\n\t\t},\n\t\t\"BEST\": {\n\t\t\t\"ar_AR\": \"الأفضل\",\n\t\t\t\"pl_PL\": \"Najlepsza\",\n\t\t\t\"en_US\": \"Best\",\n\t\t\t\"tr_TR\": \"En iyi\",\n\t\t\t\"vi_VN\": \"Điểm cao\",\n\t\t\t\"es_ES\": \"superior\",\n\t\t\t\"zh_CN\": \"最好\",\n\t\t\t\"th_TH\": \"ดีที่สุด\",\n\t\t\t\"fr_FR\": \"le plus\",\n\t\t\t\"pt_PT\": \"Melhor\",\n\t\t\t\"de_DE\": \"Beste\"\n\t\t},\n\t\t\"OK\": {\n\t\t\t\"ar_AR\": \"OK\",\n\t\t\t\"pl_PL\": \"ok\",\n\t\t\t\"en_US\": \"OK\",\n\t\t\t\"tr_TR\": \"OK\",\n\t\t\t\"vi_VN\": \"OK\",\n\t\t\t\"es_ES\": \"OK\",\n\t\t\t\"zh_CN\": \"好\",\n\t\t\t\"th_TH\": \"OK\",\n\t\t\t\"fr_FR\": \"OK\",\n\t\t\t\"pt_PT\": \"OK\",\n\t\t\t\"de_DE\": \"OK\"\n\t\t},\n\t\t\"TRYTHISTOCLEARBLOCK\": {\n\t\t\t\"ar_AR\": \"جرب هذا لكتلة واضحة\",\n\t\t\t\"pl_PL\": \"Spróbuj to do jasnej bloku\",\n\t\t\t\"en_US\": \"Try this to clear block\",\n\t\t\t\"tr_TR\": \"berrak bloğa bu deneyin\",\n\t\t\t\"vi_VN\": \"Hãy thử điều này với khối rõ ràng\",\n\t\t\t\"es_ES\": \"Prueba esto al bloque clara\",\n\t\t\t\"zh_CN\": \"尝试使用此方法明确块\",\n\t\t\t\"th_TH\": \"ลองนี้เพื่อป้องกันที่ชัดเจน\",\n\t\t\t\"fr_FR\": \"Essayez ceci au bloc clair\",\n\t\t\t\"pt_PT\": \"Tente isto para bloco clara\",\n\t\t\t\"de_DE\": [\n\t\t\t\t\"Versuchen Sie\",\n\t\t\t\t\" dies zu klaren Block\"\n\t\t\t]\n\t\t},\n\t\t\"GOOD\": {\n\t\t\t\"ar_AR\": \"حسن\",\n\t\t\t\"pl_PL\": \"DOBRY\",\n\t\t\t\"en_US\": \"GOOD\",\n\t\t\t\"tr_TR\": \"İYİ\",\n\t\t\t\"vi_VN\": \"TỐT\",\n\t\t\t\"es_ES\": \"BUENO\",\n\t\t\t\"zh_CN\": \"好\",\n\t\t\t\"th_TH\": \"ดี\",\n\t\t\t\"fr_FR\": \"BIEN\",\n\t\t\t\"pt_PT\": \"BOA\",\n\t\t\t\"de_DE\": \"GUT\"\n\t\t},\n\t\t\"TOOHARD?TRYTHIS!\": {\n\t\t\t\"ar_AR\": \"صعب جدا ؟ جرب هذا !\",\n\t\t\t\"pl_PL\": \"Zbyt trudne ? Spróbuj tego !\",\n\t\t\t\"en_US\": \"Too hard ? Try this !\",\n\t\t\t\"tr_TR\": \"Çok zor ? Bunu dene !\",\n\t\t\t\"vi_VN\": \"Quá khó ? Thử đi !\",\n\t\t\t\"es_ES\": \"Demasiado duro ? Prueba esto !\",\n\t\t\t\"zh_CN\": \"太难 ？试试这个 ！\",\n\t\t\t\"th_TH\": \"ยากเกินไป ? ลองนี้!\",\n\t\t\t\"fr_FR\": \"Trop dur ? Essaye ça !\",\n\t\t\t\"pt_PT\": \"Demasiado difícil ? Tente isto!\",\n\t\t\t\"de_DE\": \"Zu schwer ? Versuche dies !\"\n\t\t},\n\t\t\"TRYX3YOURSCORE\": {\n\t\t\t\"ar_AR\": \"محاولة X3 درجاتك\",\n\t\t\t\"pl_PL\": \"Spróbuj X3 swój wynik\",\n\t\t\t\"en_US\": \"Try X3 your score\",\n\t\t\t\"tr_TR\": \"X3 puanınızı deneyin\",\n\t\t\t\"vi_VN\": \"Hãy thử điểm số của bạn X3\",\n\t\t\t\"es_ES\": \"Trate X3 su puntuación\",\n\t\t\t\"zh_CN\": \"尝试X3你的分数\",\n\t\t\t\"th_TH\": \"ลอง X3 คะแนนของคุณ\",\n\t\t\t\"fr_FR\": \"Essayez votre score X3\",\n\t\t\t\"pt_PT\": \"Tente X3 sua pontuação\",\n\t\t\t\"de_DE\": \"Versuchen X3 Ihre Gäste\"\n\t\t},\n\t\t\"TABHERETOSWITCHBLOCK\": {\n\t\t\t\"ar_AR\": \"التبويب هنا للتبديل كتلة\",\n\t\t\t\"pl_PL\": \"Tab tutaj aby przełączyć blok\",\n\t\t\t\"en_US\": \"Tab here to switch block\",\n\t\t\t\"tr_TR\": \"Sekme burada blok geçmek için\",\n\t\t\t\"vi_VN\": \"Tab đây để chuyển khối\",\n\t\t\t\"es_ES\": \"Pestaña aquí para cambiar el bloque\",\n\t\t\t\"zh_CN\": \"标签此处切换块\",\n\t\t\t\"th_TH\": \"แท็บที่นี่เพื่อสลับบล็อก\",\n\t\t\t\"fr_FR\": \"Tab ici pour basculer bloc\",\n\t\t\t\"pt_PT\": \"Tab aqui para alternar bloco\",\n\t\t\t\"de_DE\": \"Tab hier zu Block wechseln\"\n\t\t},\n\t\t\"X3SCORE\": {\n\t\t\t\"ar_AR\": \"النتيجة X3\",\n\t\t\t\"pl_PL\": \"wynik x3\",\n\t\t\t\"en_US\": \"x3 score\",\n\t\t\t\"tr_TR\": \"x3 puanı\",\n\t\t\t\"vi_VN\": \"điểm x3\",\n\t\t\t\"es_ES\": \"puntuación x3\",\n\t\t\t\"zh_CN\": \"X3得分\",\n\t\t\t\"th_TH\": \"คะแนน x3\",\n\t\t\t\"fr_FR\": \"Le score x3\",\n\t\t\t\"pt_PT\": \"pontuação x3\",\n\t\t\t\"de_DE\": \"x3 Punktzahl\"\n\t\t},\n\t\t\"OOPS!\\n\\nSOMETHINGWENTWRONG\": {\n\t\t\t\"ar_AR\": \"وجه الفتاة! \\n\\n هناك خطأ ما\",\n\t\t\t\"pl_PL\": \"Ups! \\n\\n Coś poszło nie tak\",\n\t\t\t\"en_US\": \"Oops!\\n\\n Something went wrong\",\n\t\t\t\"tr_TR\": \"Hata! \\n\\n Bir şeyler ters gitti\",\n\t\t\t\"vi_VN\": \"Oops! \\n\\n Một cái gì đó đã đi lỗi\",\n\t\t\t\"es_ES\": \"¡Huy! \\n\\n Algo salió mal\",\n\t\t\t\"zh_CN\": \"糟糕！\\n\\n出了错\",\n\t\t\t\"th_TH\": \"อ๊ะ! \\n\\n บางอย่างผิดพลาด\",\n\t\t\t\"fr_FR\": \"Oops! \\n\\n Quelque chose a mal tourné\",\n\t\t\t\"pt_PT\": \"Ops! \\n\\n Algo deu errado\",\n\t\t\t\"de_DE\": \"Oops! \\n\\n ging etwas schief\"\n\t\t},\n\t},\n\tlinkParameter:{\n\t\t\"Canvas/play_area/triple\" : \"x3 score\",\n\t\t\"Canvas/play_area/labels/compliment/label\" : \"NICE\",\n\t\t\"Canvas/play_area/labels/game_over/sample_score_tool_tip\" : \"OUT OF MOVES!\",\n\t\t\"Canvas/layer_pause/label_pause\" : \"Pause\",\n\t\t\"Canvas/layer_pause/btn_continue/label_continue\" : \"CONTINUE\",\n\t\t\"Canvas/layer_pause/btn_restart/label_restart\" : \"RESTART\",\n\t\t\"Canvas/layer_pause/btn_localize/lb_lang\" : \"English\",\n\t\t\"Canvas/layer_tut/hinding\" : \"Label\",\n\t\t\"Canvas/layer_tut/text_motivate\" : \"Label\",\n\t\t\"Canvas/layer_video_continue/label_continue\" : \"Out of move\",\n\t\t\"Canvas/layer_video_continue/label_content\" : \"Want more chance ?\",\n\t\t\"Canvas/layer_video_continue/btn_save_me/label_continue\" : \"WATCH\",\n\t\t\"Canvas/layer_video_continue/btn_cancel/label_restart\" : \"GAME OVER\",\n\t\t\"Canvas/layer_result/lb_best_score\" : \"BEST\",\n\t\t\"Canvas/layer_result/lb_score\" : \"YOUR SCORE\",\n\t\t\"Canvas/layer_result/btn_replay/label_replay\" : \"REPLAY\",\n\t\t\"Canvas/layer_result/btn_brag/label_brag\" : \"BRAG\",\n\t\t\"Canvas/layer_leaderboard/header/label_score_intro\" : \"SCORE\",\n\t\t\"Canvas/layer_leaderboard/header/btn_brag/label_continue\" : \"BRAG\",\n\t\t\"Canvas/layer_leaderboard/content_bg/bottom_container/btn_replay/label_restart\" : \"REPLAY\",\n\t\t\"Canvas/layer_challenge/content/lb_static\" : \"Your Score\",\n\t\t\"Canvas/layer_challenge/content/header/lb_top\" : \"Great\",\n\t\t\"Canvas/layer_challenge/content/btn_c_play/Background/Label\" : \"PLAY\",\n\t\t\"Canvas/layer_challenge/content/btn_c_play_another/Background/Label\" : \"Play another friends\",\n\t\t\"Canvas/layer_challenge/content/btn_c_cancel/Background/Label\" : \"Cancel\",\n\t\t\"Canvas/layer_alert/label_header\" : \"Notice\",\n\t\t\"Canvas/layer_alert/btn_ok/label_restart\" : \"OK\",\n\n\t}\n}","\nimport * as _GAME from '../all_modules';\nconst LocalizeAutoTranform = require('localize_auto_tranform');\nexport const localize = {\n    default_language :'ar_AR',\n    init(){\n        this.checkNodeHasLabel(); \n        this.currentLanguage = this.default_language;\n        _GAME.login.addLoginDataField('CurrentLanguage');\n        _GAME.login.addCallback(data=>{\n            if(!data.currentLanguage){\n                \n                this.currentLanguage = this.default_language;\n                if(data.CurrentLanguage){\n                    this.currentLanguage = data.CurrentLanguage;\n                }\n                \n                this.pointerLang = 0;\n                if(_GAME.localizeConfig.totalLocalLang.indexOf(this.currentLanguage) != -1){\n                    this.pointerLang = _GAME.localizeConfig.totalLocalLang.indexOf(this.currentLanguage);\n                }\n                this.updateCurrentLang();\n            }\n        });\n    },\n    checkNodeHasLabel(){\n        this.ob ={};\n        let nodeCanvas = cc.find('Canvas');\n        nodeCanvas.children.map((nodeRoot)=>{\n             this.searchArrayChildenNode(nodeRoot);\n        });\n        for (let key in this.ob) {\n            let obSon = this.ob[key];\n            let newObHasLabel = {};\n            for (let k in obSon) {\n                let element = obSon[k];\n                if(this.validateNode(element)){\n                    let value = element.getComponent(cc.Label).string;\n                    if(parseInt(value).toString() == 'NaN'){\n                        // console.log(k,'==>>>',value);\n                        newObHasLabel[this.getNodePath(element)] = element;\n                        element.addComponent(LocalizeAutoTranform);\n                    }\n                }\n            }\n            this.ob[key] = newObHasLabel;\n        }\n        // console.log('this new ob ',this.ob);\n        \n    },\n    searchArrayChildenNode(node){\n        if(node){\n            let currentOb = {};\n            currentOb[this.getNodePath(node)] = node;\n            this.loopSearch(node.children, currentOb);\n            this.ob[node.name] = currentOb;\n        }\n    },\n    loopSearch(listChildrenClone,currentOb){\n        if(listChildrenClone.length > 0){\n            let lateNode = [];\n            listChildrenClone.map((child)=>{\n                if(!currentOb[this.getNodePath(child)]) currentOb[this.getNodePath(child)] = child;\n                    \n                if(child.children.length > 0 ){\n                    lateNode = lateNode.concat(child.children);\n                }\n            });\n            if(lateNode.length > 0 ){\n                this.loopSearch(lateNode,currentOb);\n            }else{\n                // console.log('=================================');\n                return currentOb;\n            }\n        }else{\n            // console.log('=================================');\n            return currentOb;\n        }\n        \n    },\n    \n    validateNode(node){\n        if(node.getComponent(cc.Label)) return true;\n        return false;\n    },\n    getNodePath(node){\n        let path = '';\n        if(node){\n            let string = node.name;\n            let parentnode = node.parent;\n            path = parentnode.name+'/'+string;\n            while(parentnode.name != 'Canvas'){\n                let lastPath = path;\n                parentnode = parentnode.parent;\n                path = parentnode.name+'/'+lastPath;\n                if(parentnode.name == 'Canvas'){\n                    break;\n                }\n            }\n        }\n        return path;\n    },\n    convertPosition(cacheValue){\n        let result = '';\n        if(cacheValue.length != 0){\n            if(_GAME.localizeConfig.localize){\n                if(this.currentLanguage){\n                    if(_GAME.localizeConfig.localize[cacheValue]){\n                        result = _GAME.localizeConfig.localize[cacheValue][this.currentLanguage];\n                        // console.log(cacheValue,' =====>>>>>> ',result);    \n                    }else{\n                        if(cacheValue == 'ENGLISH'){\n                            result = _GAME.localizeConfig.meaningLocalLang[this.pointerLang];\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    },\n    onClickChangeLocalize(){\n        this.pointerLang++;\n        if(this.pointerLang >=_GAME.localizeConfig.totalLocalLang.length) this.pointerLang = 0;\n        this.currentLanguage =_GAME.localizeConfig.totalLocalLang[this.pointerLang];\n        _GAME.data.saveData({'CurrentLanguage': this.currentLanguage});\n        this.emitProxyNode();\n    },\n    emitProxyNode(){\n        const canvas = cc.find ('Canvas');\n        // console.log(canvas);\n        canvas.emit('TRANFORM_TEXT');\n        \n    },\n    getProxyNode(){\n        return cc.find('Canvas');\n    },\n    updateCurrentLang(){\n        this.emitProxyNode();\n    }\n}\n","import * as _GAME from '../all_modules';\n\nconst loginDataFieldArr = [\n    'LoginTime',\n    'IsOldUser',\n    'isTutDone',\n    'isDoneTutRolated',\n    'isDoneTutBom',\n    'isDoneTutRelocated',\n    'isDoneTutTriple'\n];\nconst callbackArr = [];\n\nexport const login = {\n    init() {\n        _GAME.utils.waitToRun(() => {\n            _GAME.data.loadEntryPointData();\n            _GAME.login.getFBData();\n        }, 'isUserReady', _GAME.data);\n    },\n\n\n    addLoginDataField(fieldName) {\n        if (!loginDataFieldArr.includes(fieldName)) {\n            loginDataFieldArr.push(fieldName);\n        }\n    },\n\n\n    addCallback(callbackFunc) {\n        if (!_GAME.login.loginData) {\n            callbackArr.push(callbackFunc);\n        } else {\n            callbackFunc(_GAME.login.loginData);\n        }\n    },\n\n    //  ==============================================================================================\n    //  logic to handle input data from real_server / facebook\n    //  ==============================================================================================\n\n    getFBData() {\n        _GAME.data.loadData(loginDataFieldArr, (data) => {\n            data.isNewUser = !data.IsOldUser;\n\n            if (data.isNewUser) {\n                _GAME.utilsFB.log('ev_login_new_user_incoming');\n                _GAME.user.initNewUser(data); // check to handle data for new user\n                _GAME.login.initLogin(data);\n                _GAME.data.saveData({ 'IsOldUser': true });\n                _GAME.friend.loadDataFrienld();\n                return;\n            }\n            // _log(`login :: getFBData :: data =  `, data);\n            _GAME.login.initLogin(data);\n            _GAME.friend.loadDataFrienld();\n        });\n    },\n\n\n    //  ==============================================================================================\n    //  logic to init all features \n    //  ==============================================================================================\n    initLogin(data) {\n        // call initLogin only once\n        if (_GAME.login.isInitLoginCalled) { return; }\n        _GAME.login.isInitLoginCalled = true;\n        _GAME.login.loginData = data;\n        _GAME.user.lastLoginTime = data.LoginTime || _time();\n\n        // call all the loginCallback\n        callbackArr.map((func, index) => {\n            try {\n                func(data);\n            } catch (e) {\n                _log('loginCallback func error', e);\n            }\n        });\n\n    },\n\n\n}","import * as _GAME from '../all_modules';\nconst BlockAsset = require('blockAsset');\nexport const mapVisual = {\n    init() {\n        const sampleBlock = cc.find('Canvas/sample_block');\n\n        // add sample blocks to all cells of map\n        cc.find(`Canvas/play_area/map`).children.map(cell => {\n            const newBlock = _GAME.utils.copyNodeTo(sampleBlock, cell);\n            newBlock.active = false;\n            cell.cellNumber = cell.name.replace('Image_HexBlock_', '');\n        });\n\n        // add sample blocks to all newItem blocks\n        cc.find('Canvas/play_area/new_item_container/new_item/item_types').children.map(typeNode => {\n            typeNode.children.map(blockContainer => {\n                const newBlock = _GAME.utils.copyNodeTo(sampleBlock, blockContainer);\n                newBlock.active = false;\n            })\n        })\n    },\n\n    resetSingleCell(cellNumber) {\n        const block = cc.find(`Canvas/play_area/map/Image_HexBlock_${cellNumber}/sample_block`);\n        if (!block) return;\n        block.active = false;\n        block.x = block.y = 0;\n        return block;\n    },\n\n    resetMap() {\n        cc.find(`Canvas/play_area/map`).children.map(cell => this.resetSingleCell(cell.name.replace('Image_HexBlock_', '')));\n    },\n\n    decorBlock(blockNode, blockNumber) {\n        blockNode.getChildByName('x').active = false;\n        blockNode.getChildByName('Image_HexBlock').getComponent(cc.Sprite).spriteFrame = blockNode.getChildByName('Image_HexBlock').getComponent(BlockAsset).assetBlock[parseInt(blockNumber)-1];\n        if(blockNumber != 7){\n            _GAME.utils.setLabelText(blockNode.getChildByName('label'),  blockNumber);\n        }else{\n            // blockNode.getChildByName('block7stroke').active = true;\n            blockNode.getChildByName('x').active = true;\n            _GAME.utils.setLabelText(blockNode.getChildByName('label'),  '');\n        }\n        \n        blockNode.active = true;\n    },\n\n    renderSingleCell(cellNumber, blockNumber) {\n        if (!blockNumber) return;\n        const block = this.resetSingleCell(cellNumber);\n        this.decorBlock(block, blockNumber);\n    },\n\n    renderMap(mapState) {\n        this.resetMap();\n        for (let cellNumber in mapState) this.renderSingleCell(cellNumber, mapState[cellNumber]);\n    },\n}\n\n\n","import * as _GAME from '../all_modules';\nexport const map = {\n    cellLinks: require('cell_links'),\n    cellLinkMap: {},\n    currentState: null,\n    selectedCell: null,\n    minorCell: null,\n\n    init() {\n        // parse the cellLinks to a version that can check each single cell => easier to user & save performance at runtime\n        for (let linkName in this.cellLinks) {\n            const cellArr = linkName.split('_');\n\n            const cellNode0 = cc.find(`Canvas/play_area/map/Image_HexBlock_${cellArr[0]}`);\n            const cellNode1 = cc.find(`Canvas/play_area/map/Image_HexBlock_${cellArr[1]}`);\n            const isCell0Dominated = cellNode0.x > cellNode1.x;\n\n            this.cellLinkMap[cellArr[0]] = this.cellLinkMap[cellArr[0]] || {};\n            this.cellLinkMap[cellArr[0]][cellArr[1]] = this.cellLinks[linkName] + (isCell0Dominated ? '_dominated' : '');\n\n            this.cellLinkMap[cellArr[1]] = this.cellLinkMap[cellArr[1]] || {};\n            this.cellLinkMap[cellArr[1]][cellArr[0]] = this.cellLinks[linkName] + (!isCell0Dominated ? '_dominated' : '');\n        }\n    },\n\n    resetMap() {\n        this.currentState = {}\n        _GAME.mapVisual.resetMap();\n    },\n\n    setSingleCell(cellNumber, blockNumber) {\n        this.currentState[cellNumber] = blockNumber;\n        _GAME.mapVisual.renderSingleCell(cellNumber, blockNumber);\n    },\n\n    clearSingleCell(cellNumber) {\n        this.currentState[cellNumber] = null;\n        _GAME.mapVisual.resetSingleCell(cellNumber);\n    },\n\n    setCellGroup(cellInfoArr) {\n        cellInfoArr.map(cellInfo => {\n            this.setSingleCell(cellInfo.cellNumber, cellInfo.blockNumber);\n        })\n    },\n\n    clearCellGroup(cellInfoArr) {\n        cellInfoArr.map(cellNumber => {\n            this.clearSingleCell(cellNumber);\n        })\n    },\n\n\n    // ----------------------\n\n    checkNewItemDroppableAtCell(cellNumber) {\n        // check if cell is still free\n        if (this.currentState[cellNumber]) return;\n\n        // get current bias type to get minorCell\n        const biasType = _GAME.game.currentItemBiasType;\n        // _log(` biasType = ${biasType} `);\n        if (biasType == 'single_block') return true;\n\n        const biasLinks = this.cellLinkMap[cellNumber];\n        let minorCellNumber;\n        for (let otherCellNumber in biasLinks) {\n            if (biasLinks[otherCellNumber] == biasType) {\n                minorCellNumber = otherCellNumber;\n                break;\n            }\n        }\n        if (!minorCellNumber) return;\n        if (this.currentState[minorCellNumber]) return;\n        // _log(` checkNewItemDroppableAtCell >>  cellNumber = ${cellNumber} // minorCellNumber=${minorCellNumber} // this.currentState=`, this.currentState);\n\n        return minorCellNumber;\n    },\n\n\n    // ----------------------\n    dropNewItemAtCell(keyCellNumber, minorCellNumber) {\n        this.setSingleCell(keyCellNumber, _GAME.game.currentKeyBlockNumber);\n        if (minorCellNumber) this.setSingleCell(minorCellNumber, _GAME.game.currentMinorBlockNumber);\n    },\n\n    // check available blockNumber of new item\n    checkAvailableNewItemInfo() {\n        let blockCount = 1;\n        const biasTypeSet = new Set;\n        // _log(` checkAvailableNewItemInfo >>>>> this.currentState =  `, this.currentState);\n        for (let cellNumber in this.cellLinkMap) {\n            if (this.currentState[cellNumber + '']) continue;\n            const linkedCells = this.cellLinkMap[cellNumber];\n            for (let linkedCellNumber in linkedCells) {\n                if (this.currentState[linkedCellNumber + '']) continue;\n                blockCount = 2;\n                const biasTypeName = linkedCells[linkedCellNumber].replace('_dominated', '');\n                // if (!biasTypeSet.has(biasTypeName)) _log(`checkAvailableNewItemInfo >> biasTypeName=${biasTypeName} // added by cellNumber(${cellNumber}) linked to ${linkedCellNumber}// orgLinkName = ${linkedCells[linkedCellNumber]} `);\n                biasTypeSet.add(biasTypeName);\n            }\n        }\n\n        return { blockCount, biasTypeArr: Array.from(biasTypeSet) };\n    },\n\n    isFulled() {\n        // return Object.values(this.currentState).filter(item => !!item).length == 37;   // for map 4x4\n        return Object.values(this.currentState).filter(item => !!item).length == 19;      // for map 3x3\n    },\n\n\n    // checkBlockScore()\n    checkBlockScore(cellNumber) {\n\n        // get array of cells that linked \n        const blockNumber = this.currentState[cellNumber];\n        const checkedCellNumber = { [cellNumber]: true };\n        const scoredCellArr = [cellNumber];\n        // _log(`map >> ------------- checkBlockScore // cellNumber=${cellNumber} // blockNumber=${blockNumber} `);\n\n        // let safeCount = 37; // for map 4x4\n        let safeCount = 19;  // for map 3x3\n        const cellLinkMap = this.cellLinkMap;\n        const recursiveFunc = (cellNumber) => {\n            if (--safeCount <= 0) return;\n            const expandingCellArr = [];\n            // _log(` this.cellLinkMap =  `, cellLinkMap);\n            for (let linkedCellNumber in cellLinkMap[cellNumber]) {\n                // _log(` checkedCellNumber[${linkedCellNumber}] = ${checkedCellNumber[linkedCellNumber]} `);\n                if (checkedCellNumber[linkedCellNumber]) continue;\n                checkedCellNumber[linkedCellNumber] = true;\n\n                // _log(`checking linkedCellNumber(${linkedCellNumber}).block = ${this.currentState[linkedCellNumber]}`);\n                if (this.currentState[linkedCellNumber] != blockNumber) continue;\n                scoredCellArr.push(linkedCellNumber);\n                expandingCellArr.push(linkedCellNumber);\n            }\n            expandingCellArr.map(cellNumber => recursiveFunc(cellNumber));\n        }\n        recursiveFunc(cellNumber);\n        // _log(`map >> checkBlockScore // safeCount=${safeCount} // scoredCellArr=${scoredCellArr} // checkedCellNumber=${Object.keys(checkedCellNumber)} `);\n\n        // check block scores\n        const minLinkedCellToScore = 3;\n        if (scoredCellArr.length < minLinkedCellToScore) return false;\n        return scoredCellArr;\n    },\n}","module.exports = {\n    MD5(string) {\n\n        function RotateLeft(lValue, iShiftBits) {\n            return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));\n        }\n\n        function AddUnsigned(lX, lY) {\n            var lX4, lY4, lX8, lY8, lResult;\n            lX8 = (lX & 0x80000000);\n            lY8 = (lY & 0x80000000);\n            lX4 = (lX & 0x40000000);\n            lY4 = (lY & 0x40000000);\n            lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);\n            if (lX4 & lY4) {\n                return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\n            }\n            if (lX4 | lY4) {\n                if (lResult & 0x40000000) {\n                    return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\n                } else {\n                    return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\n                }\n            } else {\n                return (lResult ^ lX8 ^ lY8);\n            }\n        }\n\n        function F(x, y, z) { return (x & y) | ((~x) & z); }\n        function G(x, y, z) { return (x & z) | (y & (~z)); }\n        function H(x, y, z) { return (x ^ y ^ z); }\n        function I(x, y, z) { return (y ^ (x | (~z))); }\n\n        function FF(a, b, c, d, x, s, ac) {\n            a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));\n            return AddUnsigned(RotateLeft(a, s), b);\n        };\n\n        function GG(a, b, c, d, x, s, ac) {\n            a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));\n            return AddUnsigned(RotateLeft(a, s), b);\n        };\n\n        function HH(a, b, c, d, x, s, ac) {\n            a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));\n            return AddUnsigned(RotateLeft(a, s), b);\n        };\n\n        function II(a, b, c, d, x, s, ac) {\n            a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));\n            return AddUnsigned(RotateLeft(a, s), b);\n        };\n\n        function ConvertToWordArray(string) {\n            var lWordCount;\n            var lMessageLength = string.length;\n            var lNumberOfWords_temp1 = lMessageLength + 8;\n            var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;\n            var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;\n            var lWordArray = Array(lNumberOfWords - 1);\n            var lBytePosition = 0;\n            var lByteCount = 0;\n            while (lByteCount < lMessageLength) {\n                lWordCount = (lByteCount - (lByteCount % 4)) / 4;\n                lBytePosition = (lByteCount % 4) * 8;\n                lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));\n                lByteCount++;\n            }\n            lWordCount = (lByteCount - (lByteCount % 4)) / 4;\n            lBytePosition = (lByteCount % 4) * 8;\n            lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);\n            lWordArray[lNumberOfWords - 2] = lMessageLength << 3;\n            lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;\n            return lWordArray;\n        };\n\n        function WordToHex(lValue) {\n            var WordToHexValue = \"\", WordToHexValue_temp = \"\", lByte, lCount;\n            for (lCount = 0; lCount <= 3; lCount++) {\n                lByte = (lValue >>> (lCount * 8)) & 255;\n                WordToHexValue_temp = \"0\" + lByte.toString(16);\n                WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);\n            }\n            return WordToHexValue;\n        };\n\n        function Utf8Encode(string) {\n            string = string.replace(/\\r\\n/g, \"\\n\");\n            var utftext = \"\";\n\n            for (var n = 0; n < string.length; n++) {\n\n                var c = string.charCodeAt(n);\n\n                if (c < 128) {\n                    utftext += String.fromCharCode(c);\n                }\n                else if ((c > 127) && (c < 2048)) {\n                    utftext += String.fromCharCode((c >> 6) | 192);\n                    utftext += String.fromCharCode((c & 63) | 128);\n                }\n                else {\n                    utftext += String.fromCharCode((c >> 12) | 224);\n                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                    utftext += String.fromCharCode((c & 63) | 128);\n                }\n\n            }\n\n            return utftext;\n        };\n\n        var x = Array();\n        var k, AA, BB, CC, DD, a, b, c, d;\n        var S11 = 7, S12 = 12, S13 = 17, S14 = 22;\n        var S21 = 5, S22 = 9, S23 = 14, S24 = 20;\n        var S31 = 4, S32 = 11, S33 = 16, S34 = 23;\n        var S41 = 6, S42 = 10, S43 = 15, S44 = 21;\n\n        string = Utf8Encode(string);\n        x = ConvertToWordArray(string);\n        a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;\n\n        for (k = 0; k < x.length; k += 16) {\n            AA = a; BB = b; CC = c; DD = d;\n            a = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);\n            d = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);\n            c = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);\n            b = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);\n            a = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);\n            d = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);\n            c = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);\n            b = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);\n            a = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);\n            d = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);\n            c = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);\n            b = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);\n            a = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);\n            d = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);\n            c = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);\n            b = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);\n            a = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);\n            d = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);\n            c = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);\n            b = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);\n            a = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);\n            d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);\n            c = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);\n            b = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);\n            a = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);\n            d = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);\n            c = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);\n            b = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);\n            a = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);\n            d = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);\n            c = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);\n            b = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);\n            a = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);\n            d = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);\n            c = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);\n            b = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);\n            a = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);\n            d = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);\n            c = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);\n            b = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);\n            a = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);\n            d = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);\n            c = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);\n            b = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);\n            a = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);\n            d = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);\n            c = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);\n            b = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);\n            a = II(a, b, c, d, x[k + 0], S41, 0xF4292244);\n            d = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);\n            c = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);\n            b = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);\n            a = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);\n            d = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);\n            c = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);\n            b = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);\n            a = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);\n            d = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);\n            c = II(c, d, a, b, x[k + 6], S43, 0xA3014314);\n            b = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);\n            a = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);\n            d = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);\n            c = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);\n            b = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);\n            a = AddUnsigned(a, AA);\n            b = AddUnsigned(b, BB);\n            c = AddUnsigned(c, CC);\n            d = AddUnsigned(d, DD);\n        }\n        var temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);\n        return temp.toLowerCase();\n    },\n\n}\n","import * as _GAME from '../all_modules';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Message extends cc.Component {\n\n    @property(cc.Node) Play_with_message: cc.Node = null;\n    onLoad(){\n        // const nodeAvata = _GAME.utils.getChildByPath(this.Play_with_message,'avata');\n        // nodeAvata.avarNodeOrgSize = {};\n        // nodeAvata.avarNodeOrgSize.width = nodeAvata.width;\n        // nodeAvata.avarNodeOrgSize.height = nodeAvata.height;\n    }\n    async initBase64Picture(target: cc.Node) {\n        if (!target.activeInHierarchy) {\n            target.parent.active = true;\n            target.parent.parent.active = true;\n        }\n\n        // _log(target);\n        const cameraNode = new cc.Node();\n        target.addChild(cameraNode);\n        cameraNode.position = target.position;\n        let camera = cameraNode.addComponent(cc.Camera);\n        camera.cullingMask = 0xffffffff;\n        let texture = new cc.RenderTexture();\n        texture.initWithSize(target.width, target.height);\n        camera.targetTexture = texture;\n        camera.zoomRatio = 3.27;\n        // camera.zoomRatio = 1;\n\n        let width = texture.width;\n        let height = texture.height;\n        let _canvas = document.createElement('canvas');\n        _canvas.width = width;\n        _canvas.height = height;\n\n        let ctx = _canvas.getContext('2d');\n        camera.render(target);\n        let data = texture.readPixels();\n        // write the render data\n\n        let rowBytes = width * 4;\n        for (let row = 0; row < height; row++) {\n            let srow = height - 1 - row;\n            let data2 = new Uint8ClampedArray(data.buffer, srow * width * 4, rowBytes);\n            let imageData = new ImageData(data2, width, 1);\n            ctx.putImageData(imageData, 0, row);\n        }\n        var dataURL = _canvas.toDataURL();\n\n        setTimeout(() => target.parent.active = false, 2000);\n        return dataURL;\n    }\n\n    async initPayload(target: cc.Node, content: string, ctaText: string, extraData?: any) {\n        try {\n            const base64Image = await this.initBase64Picture(target);\n            const payload: FBInstant.CustomUpdatePayload = {\n                action: 'CUSTOM',\n                // text: _GAME.language.generateMsgTextObject(content),\n                text: content,\n                // cta: _GAME.language.generateMsgTextObject(ctaText),\n                cta: ctaText,\n                image: base64Image,\n                template: 'play_turn',\n                strategy: 'IMMEDIATE',\n                data: extraData,\n                notification: 'PUSH',\n            };\n            return payload;\n        } catch (error) {\n            throw error;\n        }\n    }\n    async sendMessagePlayWith(){\n        try {\n            // const nodeAvata = _GAME.utils.getChildByPath(this.Play_with_message,'avata');\n            // nodeAvata.getComponent(cc.Sprite).spriteFrame = window.user_avata;\n            // setTimeout(()=>{\n            //     nodeAvata.width = nodeAvata.avarNodeOrgSize.width;\n            //     nodeAvata.height = nodeAvata.avarNodeOrgSize.height;\n            // }, 1000)\n\n            const nodeNameUser = this.Play_with_message.getChildByName('lb_username');\n            // nodeNameUser.getComponent(cc.Label).string = _GAME.user.name;\n            _GAME.utils.setLabelText(nodeNameUser,_GAME.user.name);\n\n            const nodePointUser = this.Play_with_message.getChildByName('user_score');\n            _GAME.utils.setLabelText(nodePointUser,_GAME.utils.localizeNumber(_GAME.user.score));\n            // nodePointUser.getComponent(cc.Label).string = _GAME.utils.localizeNumber(_GAME.user.score);\n            const content = _GAME.user.name +' has '+_GAME.user.score+' when  playing Hexa 7';//langFileMsg.content(_GAME.user.name);\n            const ctaText = '';//langFileMsg.cta();\n            const payload = await this.initPayload(this.Play_with_message, content, ctaText);\n            await FBInstant.updateAsync(payload);\n        } catch (error) {\n            _log('sendMessageGiftRequest', error);\n        }\n    },\n\n    // setNodeImageFromURL(node: cc.Node, url: string) {\n    //     return new Promise((resolve, reject) => {\n    //         const frame = new cc.SpriteFrame(url);\n    //         let count = 0;\n    //         let call = setInterval(() => {\n    //             if (frame.textureLoaded()) {\n    //                 clearInterval(call);\n    //                 node.getComponent(cc.Sprite).spriteFrame = frame;\n    //                 resolve();\n    //             }\n    //             count += 20;\n    //             if (count >= 30000) {\n    //                 clearInterval(call);\n    //                 reject();\n    //             }\n    //         }, 20);\n    //     });\n    // }\n}\n","import * as _GAME from '../all_modules';\n\nexport const promo = {\n    countScale: 0,\n    init() {\n        // adjust leaderboard UI due to configs.isShowPromoGames\n        cc.find('Canvas/layer_leaderboard/content_bg/middle_container/promo_panel').active = window.canPromo; //_GAME.configs.isShowPromoGames;\n        cc.find('Canvas/layer_leaderboard/content_bg/middle_container/leaderboard/leaderboard_content').height = window.canPromo ? 375 : 573; //_GAME.configs.isShowPromoGames ? 375 : 573;\n    },\n    renderButtonByIcon() {\n        const promoPanel = cc.find('Canvas/layer_leaderboard/content_bg/middle_container/promo_panel');\n        if (promoPanel) {\n            if (_GAME.configs.listIdPromoGame) {\n                promoPanel.children.map((item, index) => {\n                    _GAME.utils.addButtonComp(item, () => {\n                        _GAME.utilsFB.log('ev_click_button_promo_game', 1, { Position: index });\n                        _GAME.social.switchPromoGame(_GAME.configs.listIdPromoGame[index]);\n                    });\n\n                })\n            }\n        }\n\n\n        // this.countScale = 0;\n        // this.actionIconPromo();\n    },\n    actionIconPromo() {\n        const promoPanel = cc.find('Canvas/layer_leaderboard/content_bg/middle_container/promo_panel');\n        const itemScale = promoPanel.children[this.countScale];\n        if (itemScale) {\n            _GAME.fx.bubble(itemScale, () => {\n                _GAME.utils.setTimeout(() => {\n                    this.countScale++;\n                    if (this.countScale > 2) this.countScale = 0;\n                    this.actionIconPromo();\n                }, 500);\n            });\n        }\n    }\n}","import * as _GAME from '../all_modules';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Share extends cc.Component {\n    @property(cc.Node) SharePhoto_Normal: cc.Node = null;\n\n    async initBase64Picture(target: cc.Node) {\n        if (!target.activeInHierarchy) {\n            target.parent.active = true;\n            target.parent.parent.active = true;\n        }\n\n        const cameraNode = new cc.Node();\n        target.addChild(cameraNode);\n        cameraNode.position = target.position;\n        let camera = cameraNode.addComponent(cc.Camera);\n        camera.cullingMask = 0xffffffff;\n        let texture = new cc.RenderTexture();\n        texture.initWithSize(target.width, target.height);\n        camera.targetTexture = texture;\n        camera.zoomRatio = 2.5;\n        // camera.zoomRatio = 1;\n\n        let width = texture.width;\n        let height = texture.height;\n        let _canvas = document.createElement('canvas');\n        _canvas.width = width;\n        _canvas.height = height;\n\n        let ctx = _canvas.getContext('2d');\n        camera.render(target);\n        let data = texture.readPixels();\n        // write the render data\n\n        let rowBytes = width * 4;\n        for (let row = 0; row < height; row++) {\n            let srow = height - 1 - row;\n            let data2 = new Uint8ClampedArray(data.buffer, srow * width * 4, rowBytes);\n            let imageData = new ImageData(data2, width, 1);\n            ctx.putImageData(imageData, 0, row);\n        }\n        var dataURL = _canvas.toDataURL();\n        _log(target, texture, camera, _canvas);\n\n        setTimeout(() => target.parent.active = false, 2000);\n\n        return dataURL;\n    }\n\n    async initPayload(target: cc.Node, content: string, extraData?: any) {\n        try {\n            const base64Image = await this.initBase64Picture(target);\n            const payload: FBInstant.SharePayload = {\n                intent: 'SHARE',\n                image: base64Image,\n                text: content,\n                data: extraData,\n            };\n            return payload;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async sharePostNormal() {\n        try {\n            const payload = await this.initPayload(this.SharePhoto_Normal, \"\");\n            _log(payload);\n            await FBInstant.shareAsync(payload);\n        } catch (error) {\n            _log(error);\n        }\n    }\n\n}\n","import * as _GAME from '../all_modules';\nimport Share from \"../social/share\";\nimport Message from '../social/message';\n\nexport const social = {\n    init() {\n        _GAME.login.addLoginDataField('subscribeInfo');\n        _GAME.login.addLoginDataField('shortcutInfo');\n        _GAME.login.addCallback(data => {\n            this.subscribeInfo = data.hasOwnProperty('subscribeInfo') ? data.subscribeInfo : 5;\n            this.shortcutInfo = data.hasOwnProperty('shortcutInfo') ? data.shortcutInfo : 5;\n        })\n    },\n\n    share(userScore) {\n        if(cc.find('Canvas/shares').active == false) cc.find('Canvas/shares').active =true;\n        _GAME.utils.setLabelText(\n            cc.find('Canvas/shares/sharepicture/label_score'),\n            _GAME.utils.localizeNumber(userScore)\n        );\n        cc.find('Canvas/shares').getComponent(Share).sharePostNormal();\n    },\n    sendMessageAfterQuit() {\n        if(cc.find(\"Canvas/messages\").active == false) cc.find(\"Canvas/messages\").active = true;\n        cc.find(\"Canvas/messages\").getComponent(Message).sendMessagePlayWith();\n    },\n\n    askBotSubscribe(callback) {\n        // _log(`this.subscribeInfo=${this.subscribeInfo}`);\n        const finalCallback = () => callback && callback();\n        if (!window.FBInstant) return finalCallback();\n        if (!_GAME.utilsFB.isSupportedAPI(\"player.canSubscribeBotAsync\") || !_GAME.utilsFB.isSupportedAPI(\"player.subscribeBotAsync\")) return finalCallback() || _log(' askBotSubscribe :: isSupportedAPI > not supported');\n        if (this.subscribeInfo == 'accepted' || this.subscribeInfo <= 0) return finalCallback();\n        this.subscribeInfo--;\n        _GAME.data.saveData({ subscribeInfo: this.subscribeInfo });\n\n        FBInstant.player.canSubscribeBotAsync().then(can_subscribe => {\n            if (!can_subscribe) return finalCallback() || _log(` askBotSubscribe :: can_subscribe = ${can_subscribe} `);\n            FBInstant.player.subscribeBotAsync().then(() => {\n                this.subscribeInfo = 'accepted';\n                _GAME.data.saveData({ subscribeInfo: this.subscribeInfo });\n                finalCallback();\n\n            }).catch(e => finalCallback());\n        }).catch(e => finalCallback() || _log(` askBotSubscribe :: canSubscribeBotAsync().then(fail) => `, e));\n    },\n\n\n    askShortcut(callback) {\n        // _log(`this.shortcutInfo=${this.shortcutInfo}`);\n        const finalCallback = () => callback && callback();\n        if (!window.FBInstant) return finalCallback();\n        if (!_GAME.utilsFB.isSupportedAPI(\"canCreateShortcutAsync\") || !_GAME.utilsFB.isSupportedAPI(\"createShortcutAsync\")) return finalCallback();\n        if (this.shortcutInfo == 'accepted' || this.shortcutInfo <= 0) return finalCallback();\n        this.shortcutInfo--;\n        _GAME.data.saveData({ shortcutInfo: this.shortcutInfo });\n\n        FBInstant.canCreateShortcutAsync().then(canCreateShortcut => {\n            if (!canCreateShortcut) return finalCallback();\n            FBInstant.createShortcutAsync().then(() => {\n                this.shortcutInfo = 'accepted';\n                _GAME.data.saveData({ shortcutInfo: this.shortcutInfo });\n                finalCallback();\n\n            }).catch((e) => finalCallback() || _log(' createShortcutAsync :: ', e));\n        }).catch((e) => finalCallback() || _log(' canCreateShortcutAsync :: ', e));\n    },\n\n\n    postSessionScore() {\n        if (!window.FBInstant) return;\n        if (_GAME.user.score <= (_GAME.game.bestSessionScore || 0)) return;\n        _GAME.game.bestSessionScore = _GAME.user.score;\n        _log(` postSessionScore called score = ${_GAME.game.bestSessionScore}`);\n        FBInstant.postSessionScore(_GAME.game.bestSessionScore);\n    },\n\n\n    createContext(playerId, callbackSuccess, callbackFail) {\n        _log(` about to create context with player ${playerId}`);\n        if (!window.FBInstant) {\n            if (callbackSuccess) { callbackSuccess(); }\n            return;\n        }\n\n        const logContextResult = (result, error) => {\n            if (result) _log('Success ====> ', result);\n            if (error) _log('Fail  ====> ', error);\n        }\n        FBInstant.context.createAsync(playerId).then(\n            () => {\n                if (callbackSuccess) { callbackSuccess(); }\n                logContextResult('success');\n            },\n            (e) => {\n                if (callbackFail) { callbackFail(e); }\n                logContextResult('fail', e);\n            }\n        );\n    },\n    invite(callback) {\n        try {\n            FBInstant.context.chooseAsync().then(() => {\n                // this.sendMessageAfterQuit();\n                if (callback) callback(FBInstant.context.getID());\n            }).catch(err => {\n                _log(err);\n                if (callback) callback()\n            });\n        } catch (errX) {\n            _log(errX);\n            if (callback) callback()\n        }\n    },\n    switchPromoGame(idGame) {\n        FBInstant.switchGameAsync(idGame).catch(function(e) {\n            // Handle game change failure\n            console(\"gameChangeError: \", e);\n        });\n    }\n};","import * as _GAME from '../all_modules';\nexport const tutBom= {\n    \n    init(){\n        _GAME.login.addCallback(data => {\n            this.isDoneTutBom = data.isDoneTutBom;\n        });\n    },\n    checkDoneTutBom(){\n        if(this.isDoneTutBom) {\n            return true;\n        }\n\n        return false;\n    },\n    startTut(){\n        if(_GAME.configs.off_power_item)return;\n        if(this.showing) return;\n        _GAME.utilsFB.log('ev_start_tut_bom',1);\n        _GAME.ui.showLayer('layer_tut');\n        _GAME.tutBom.startHandAction();\n        this.showing = true;\n        _GAME.tutBom.showTextHinding();\n    },\n    startHandAction(){\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        hand.stopAllActions();\n        _GAME.utils.setGlobalPositionToNode(hand, cc.v2(cc.find('Canvas/play_area/btn_bomb').x+10,cc.find('Canvas/play_area/btn_bomb').y));\n        const nodeContainer  = cc.find('Canvas/play_area/new_item_container');\n        _GAME.utils.setGlobalPositionToNode(cc.find('Canvas/layer_tut/text_motivate'),cc.v2(nodeContainer.x,nodeContainer.y+150));\n        hand.angle = 120;\n        hand.runAction(\n            cc.repeatForever(\n                cc.sequence(\n                    cc.moveTo(1,cc.v2(hand.x,hand.y+70)),\n                    cc.moveTo(1,cc.v2(hand.x,hand.y+40))\n                )\n            )\n        );\n    },\n    endTut() {\n        // stop hand fx\n        if(_GAME.configs.off_power_item)return;\n        _GAME.utilsFB.log('ev_end_tut_bom',1);\n        _GAME.tutBom.setTextToMotivate(()=>{\n            _GAME.ui.hideLayer('layer_tut');\n            // save to fb db that user done tut\n            this.showing = false;\n            this.isDoneTutBom = true;\n            _GAME.data.saveData({ isDoneTutBom: '1' });\n        });\n    },\n\n\n    checkHideTutHand() {\n        if (this.isDoneTutBom) return;\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        hand.stopAllActions();\n        hand.x = 9999;\n    },\n\n    checkShowTutHand() {\n        if (this.isDoneTutBom) return;\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        _GAME.tut.startHandAction();\n    },\n    showTextHinding(){\n        let nodeLabel = cc.find('Canvas/layer_tut/hinding');\n        if(nodeLabel.active == false) nodeLabel.active = true;\n        _GAME.utils.setLabelText(nodeLabel,'Try this to clear block');\n    },\n    hideTextHiding(){\n        let nodeLabel = cc.find('Canvas/layer_tut/hinding');\n        if(nodeLabel.active == true) nodeLabel.active = false;\n    },\n    setTextToMotivate(callback){\n        let textMotivate = cc.find('Canvas/layer_tut/text_motivate');\n        let newNodeMotivate = cc.instantiate(textMotivate);\n        _GAME.utils.setLabelText(newNodeMotivate,'GOOD');\n        if(newNodeMotivate.active == false)newNodeMotivate.active = true;\n        newNodeMotivate.parent = textMotivate.parent;\n        newNodeMotivate.runAction(\n            cc.sequence(\n                cc.spawn(\n                    cc.scaleTo(0.5,2),\n                    cc.fadeTo(0.5,255)\n                ),\n                cc.spawn(\n                    cc.delayTime(0.6),     \n                    cc.sequence(\n                        cc.scaleTo(0.15,2.5),\n                        cc.scaleTo(0.15,2),\n                        cc.scaleTo(0.15,2.5),\n                        cc.scaleTo(0.15,2),\n                    )\n                ),\n                cc.spawn(\n                    cc.moveTo(0.3,cc.v2(newNodeMotivate.x,newNodeMotivate.y+100)),\n                    cc.fadeTo(0.3,0)\n                ),\n                cc.callFunc(()=>{\n                    newNodeMotivate.destroy();\n                    if(callback)callback();\n                })\n            )\n        )\n    }\n}","import * as _GAME from '../all_modules';\nexport const tutRelocated = {\n    init(){\n        _GAME.login.addCallback(data => {\n            this.isDoneTutRelocated = data.isDoneTutRelocated;\n        });\n    },\n    checkDoneTutRelocated(){\n        if(this.isDoneTutRelocated) return true;\n        return false;\n    },\n    startTut(){\n        if(_GAME.configs.off_power_item)return;\n        if(this.showing) return;\n        this.showing = true;\n        _GAME.utilsFB.log(`ev_start_tut_relocated`,1)\n        _GAME.ui.showLayer('layer_tut');\n        _GAME.tutRelocated.startHandAction();\n        _GAME.tutRelocated.showTextHinding();\n    },\n    startHandAction(){\n        // console.log('vao day chưa ');\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        hand.stopAllActions();\n        // let poiterPreviousPosition = cc.v2(cc.find('Canvas/play_area/btn_relocated').x+40,cc.find('Canvas/play_area/btn_relocated').y+40);\n        // let poiterNextPosition = cc.v2(cc.find('Canvas/play_area/btn_relocated').x+60,cc.find('Canvas/play_area/btn_relocated').y+60);\n        // _GAME.utils.setGlobalPositionToNode(hand,poiterPreviousPosition );\n        // const nodeContainer  = cc.find('Canvas/play_area/new_item_container');\n        // _GAME.utils.setGlobalPositionToNode(cc.find('Canvas/layer_tut/text_motivate'),cc.v2(nodeContainer.x + 100,nodeContainer.y+150));\n\n        // hand.angle = 80;\n        // hand.runAction(\n        //     cc.repeatForever(\n        //         cc.sequence(\n        //             cc.moveTo(0.8,poiterNextPosition),\n        //             cc.moveTo(0.8,poiterPreviousPosition)\n        //         )\n        //     )\n        // );\n        let positionShow = cc.v2(cc.find('Canvas/play_area/btn_relocated').x+10,cc.find('Canvas/play_area/btn_relocated').y);\n        _GAME.utils.setGlobalPositionToNode(hand, positionShow);\n        const nodeContainer  = cc.find('Canvas/play_area/new_item_container');\n        _GAME.utils.setGlobalPositionToNode(cc.find('Canvas/layer_tut/text_motivate'),cc.v2(nodeContainer.x,nodeContainer.y+150));\n        hand.angle = 120;\n        hand.runAction(\n            cc.repeatForever(\n                cc.sequence(\n                    cc.moveTo(1,cc.v2(hand.x,hand.y+70)),\n                    cc.moveTo(1,cc.v2(hand.x,hand.y+40))\n                )\n            )\n        );\n    },\n    endTut() {\n        if(_GAME.configs.off_power_item)return;\n        _GAME.utilsFB.log(`ev_end_tut_relocated`,1)\n        // stop hand fx\n        _GAME.tutRelocated.setTextToMotivate(()=>{\n            _GAME.ui.hideLayer('layer_tut');\n\n            // stop highlight target cell\n            // const targetCell = cc.find(`Canvas/play_area/map/Image_HexBlock_${this.targetCell}/bg`);\n            // targetCell.opacity = targetCell.orgOpacity;\n            this.showing = false;\n            // save to fb db that user done tut\n            this.isDoneTutRelocated = true;\n            _GAME.data.saveData({ isDoneTutRelocated: '1' });\n        });\n    },\n\n\n    checkHideTutHand() {\n        if (this.isDoneTutRelocated) return;\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        hand.stopAllActions();\n        hand.x = 9999;\n    },\n\n    checkShowTutHand() {\n        if (this.isDoneTutRelocated) return;\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        _GAME.tut.startHandAction();\n    },\n    showTextHinding(){\n        let nodeLabel = cc.find('Canvas/layer_tut/hinding');\n        if(nodeLabel.active == false) nodeLabel.active = true;\n        _GAME.utils.setLabelText(nodeLabel,'Too hard ? Try this !');\n    },\n    hideTextHiding(){\n        let nodeLabel = cc.find('Canvas/layer_tut/hinding');\n        if(nodeLabel.active == true) nodeLabel.active = false;\n    },\n    setTextToMotivate(callback){\n        let textMotivate = cc.find('Canvas/layer_tut/text_motivate');\n        let newNodeMotivate = cc.instantiate(textMotivate);\n        _GAME.utils.setLabelText(newNodeMotivate,'GOOD');\n        if(newNodeMotivate.active == false)newNodeMotivate.active = true;\n        newNodeMotivate.parent = textMotivate.parent;\n        newNodeMotivate.runAction(\n            cc.sequence(\n                cc.spawn(\n                    cc.scaleTo(0.5,2),\n                    cc.fadeTo(0.5,255)\n                ),\n                cc.spawn(\n                    cc.delayTime(0.6),     \n                    cc.sequence(\n                        cc.scaleTo(0.15,2.5),\n                        cc.scaleTo(0.15,2),\n                        cc.scaleTo(0.15,2.5),\n                        cc.scaleTo(0.15,2),\n                    )\n                ),\n                cc.spawn(\n                    cc.moveTo(0.3,cc.v2(newNodeMotivate.x,newNodeMotivate.y+100)),\n                    cc.fadeTo(0.3,0)\n                ),\n                cc.callFunc(()=>{\n                    newNodeMotivate.destroy();\n                    if(callback)callback();\n                })\n            )\n        )\n    }\n}","import * as _GAME from '../all_modules'\n\nexport const tutRolated = {\n    \n    init(){\n        _GAME.login.addCallback(data => {\n            this.isDoneTutRolated = data.isDoneTutRolated;\n        });\n    },\n    checkDoneTutRolated(){\n        if(this.isDoneTutRolated) return true;\n        return false;\n    },\n    startTut(){\n        if(_GAME.configs.off_power_item)return;\n        if(this.showing) return;\n        this.showing = true;\n        _GAME.utilsFB.log(`ev_start_tut_rolated`,1);\n        _GAME.ui.showLayer('layer_tut');\n        _GAME.tutRolated.startHandAction();\n        _GAME.tutRolated.showTextHinding();\n    },\n    startHandAction(){\n        // console.log('vao day chưa ');\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        hand.stopAllActions();\n        _GAME.utils.setGlobalPositionToNode(hand, cc.find('Canvas/play_area/new_item_container'));\n        _GAME.utils.setGlobalPositionToNode(cc.find('Canvas/layer_tut/text_motivate'),cc.v2(hand.x,hand.y+150));\n       \n        hand.runAction(\n            cc.repeatForever(\n                cc.sequence(\n                    cc.moveTo(1,cc.v2(hand.x+50,hand.y-50)),\n                    cc.moveTo(1,cc.v2(hand.x,hand.y))\n                )\n            )\n        );\n    },\n    endTut() {\n        if(_GAME.configs.off_power_item)return;\n        _GAME.utilsFB.log(`ev_end_tut_rolated`,1);\n        // stop hand fx\n        _GAME.tutRolated.setTextToMotivate(()=>{\n            _GAME.ui.hideLayer('layer_tut');\n\n            // stop highlight target cell\n            // const targetCell = cc.find(`Canvas/play_area/map/Image_HexBlock_${this.targetCell}/bg`);\n            // targetCell.opacity = targetCell.orgOpacity;\n            this.showing = false;\n            // save to fb db that user done tut\n            this.isDoneTutRolated = true;\n            _GAME.data.saveData({ isDoneTutRolated: '1' });\n        });\n    },\n\n\n    checkHideTutHand() {\n        if (this.isDoneTutRolated) return;\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        hand.stopAllActions();\n        hand.x = 9999;\n    },\n\n    checkShowTutHand() {\n        if (this.isDoneTutRolated) return;\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        _GAME.tut.startHandAction();\n    },\n    showTextHinding(){\n        let nodeLabel = cc.find('Canvas/layer_tut/hinding');\n        if(nodeLabel.active == false) nodeLabel.active = true;\n        _GAME.utils.setLabelText(nodeLabel,'Tab here to switch block');\n    },\n    hideTextHiding(){\n        let nodeLabel = cc.find('Canvas/layer_tut/hinding');\n        if(nodeLabel.active == true) nodeLabel.active = false;\n    },\n    setTextToMotivate(callback){\n        let textMotivate = cc.find('Canvas/layer_tut/text_motivate');\n        let newNodeMotivate = cc.instantiate(textMotivate);\n        _GAME.utils.setLabelText(newNodeMotivate,'GOOD');\n        if(newNodeMotivate.active == false)newNodeMotivate.active = true;\n        newNodeMotivate.parent = textMotivate.parent;\n        newNodeMotivate.runAction(\n            cc.sequence(\n                cc.spawn(\n                    cc.scaleTo(0.5,2),\n                    cc.fadeTo(0.5,255)\n                ),\n                cc.spawn(\n                    cc.delayTime(0.6),     \n                    cc.sequence(\n                        cc.scaleTo(0.15,2.5),\n                        cc.scaleTo(0.15,2),\n                        cc.scaleTo(0.15,2.5),\n                        cc.scaleTo(0.15,2),\n                    )\n                ),\n                cc.spawn(\n                    cc.moveTo(0.3,cc.v2(newNodeMotivate.x,newNodeMotivate.y+100)),\n                    cc.fadeTo(0.3,0)\n                ),\n                cc.callFunc(()=>{\n                    newNodeMotivate.destroy();\n                    if(callback)callback();\n                })\n            )\n        )\n    }\n}","import * as _GAME from '../all_modules';\nexport const tutTriple = {\n    pointToShowTut :300,\n    init(){\n        _GAME.login.addCallback(data => {\n            this.isDoneTutTriple = data.isDoneTutTriple;\n        });\n    },\n    checkDoneTutTriple(){\n        if(this.isDoneTutTriple) {\n            return true;\n        }\n            return false;\n    },\n    startTut(){\n        if(_GAME.configs.off_power_item)return;\n        if(this.showing) return;\n        _GAME.utilsFB.log('ev_start_tut_triple',1);\n        _GAME.ui.showLayer('layer_tut');\n        _GAME.tutTriple.startHandAction();\n        _GAME.tutTriple.showTextHinding();\n        this.showing = true;\n        \n    },\n    startHandAction(){\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        hand.stopAllActions();\n        let positionShow = cc.v2(cc.find('Canvas/play_area/btn_triple').x+10,cc.find('Canvas/play_area/btn_triple').y);\n        _GAME.utils.setGlobalPositionToNode(hand, positionShow);\n        const nodeContainer  = cc.find('Canvas/play_area/new_item_container');\n        _GAME.utils.setGlobalPositionToNode(cc.find('Canvas/layer_tut/text_motivate'),cc.v2(nodeContainer.x,nodeContainer.y+150));\n        hand.angle = 120;\n        hand.runAction(\n            cc.repeatForever(\n                cc.sequence(\n                    cc.moveTo(1,cc.v2(hand.x,hand.y+70)),\n                    cc.moveTo(1,cc.v2(hand.x,hand.y+40))\n                )\n            )\n        );\n    },\n    endTut() {\n        // stop hand fx\n        if(_GAME.configs.off_power_item)return;\n        _GAME.utilsFB.log('ev_end_tut_triple',1);\n        _GAME.tutTriple.setTextToMotivate(()=>{\n            _GAME.ui.hideLayer('layer_tut');\n\n            // stop highlight target cell\n            // const targetCell = cc.find(`Canvas/play_area/map/Image_HexBlock_${this.targetCell}/bg`);\n            // targetCell.opacity = targetCell.orgOpacity;\n    \n            // save to fb db that user done tut\n            this.showing = false;\n            this.isDoneTutTriple = true;\n            _GAME.data.saveData({ isDoneTutTriple: '1' });\n        });\n    },\n\n\n    checkHideTutHand() {\n        if (this.isDoneTutTriple) return;\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        hand.stopAllActions();\n        hand.x = 9999;\n    },\n\n    checkShowTutHand() {\n        if (this.isDoneTutTriple) return;\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        _GAME.tut.startHandAction();\n    },\n    showTextHinding(){\n        let nodeLabel = cc.find('Canvas/layer_tut/hinding');\n        if(nodeLabel.active == false) nodeLabel.active = true;\n        _GAME.utils.setLabelText(nodeLabel,'Try X3 your score');\n    },\n    hideTextHiding(){\n        let nodeLabel = cc.find('Canvas/layer_tut/hinding');\n        if(nodeLabel.active == true) nodeLabel.active = false;\n    },\n    setTextToMotivate(callback){\n        let textMotivate = cc.find('Canvas/layer_tut/text_motivate');\n        let newNodeMotivate = cc.instantiate(textMotivate);\n        _GAME.utils.setLabelText(newNodeMotivate,'GOOD');\n        if(newNodeMotivate.active == false)newNodeMotivate.active = true;\n        newNodeMotivate.parent = textMotivate.parent;\n        newNodeMotivate.runAction(\n            cc.sequence(\n                cc.spawn(\n                    cc.scaleTo(0.5,2),\n                    cc.fadeTo(0.5,255)\n                ),\n                cc.spawn(\n                    cc.delayTime(0.6),     \n                    cc.sequence(\n                        cc.scaleTo(0.15,2.5),\n                        cc.scaleTo(0.15,2),\n                        cc.scaleTo(0.15,2.5),\n                        cc.scaleTo(0.15,2),\n                    )\n                ),\n                cc.spawn(\n                    cc.moveTo(0.3,cc.v2(newNodeMotivate.x,newNodeMotivate.y+100)),\n                    cc.fadeTo(0.3,0)\n                ),\n                cc.callFunc(()=>{\n                    newNodeMotivate.destroy();\n                    if(callback)callback();\n                })\n            )\n        )\n    }\n}","import * as _GAME from '../all_modules';\n\nexport const tut = {\n\n    // map state for tut\n    tutMapState: {\n        9: 1,\n        11: 1\n    },\n    targetCell: 10,\n\n    init() {\n        _GAME.login.addCallback(data => {\n            this.isTutDone = data.isTutDone;\n            if (!data.isTutDone) this.startTut();\n        });\n    },\n\n    startTut() {\n        // start handFx\n        _GAME.ui.showLayer('layer_tut');\n        _GAME.tut.startHandAction();\n    },\n\n    startHandAction() {\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        hand.stopAllActions();\n        _GAME.utils.setGlobalPositionToNode(hand, cc.find('Canvas/play_area/new_item_container'));\n\n        const targetCell = cc.find(`Canvas/play_area/map/Image_HexBlock_${this.targetCell}/bg`);\n        const targetCellGlobalPos = _GAME.utils.getGlobalPosition(targetCell);\n        const targetCellPosDiff = _GAME.utils.global2LocalPosDiff(hand, targetCellGlobalPos.x, targetCellGlobalPos.y);\n        targetCellPosDiff.y - 20;\n\n        const animTime = 1;\n        hand.runAction(cc.repeatForever(\n            cc.sequence(\n                cc.moveBy(animTime, targetCellPosDiff).easing(cc.easeOut(1)),\n                cc.delayTime(0.8),\n                cc.moveBy(0, targetCellPosDiff.mul(-1)),\n                cc.moveBy(0.3, cc.v2(0, -10)),\n                cc.moveBy(0.15, cc.v2(0, 10)),\n            )\n        ));\n\n        // highlight target cell\n        if (targetCell.orgOpacity) targetCell.opacity = targetCell.orgOpacity;\n        targetCell.orgOpacity = targetCell.opacity;\n        targetCell.opacity *= 3;\n    },\n\n    endTut() {\n        _GAME.utilsFB.log(`ev_done_tutorial`);\n\n        // stop hand fx\n        _GAME.ui.hideLayer('layer_tut');\n\n        // stop highlight target cell\n        const targetCell = cc.find(`Canvas/play_area/map/Image_HexBlock_${this.targetCell}/bg`);\n        targetCell.opacity = targetCell.orgOpacity;\n\n        // save to fb db that user done tut\n        this.isTutDone = true;\n        _GAME.data.saveData({ isTutDone: '1' });\n    },\n\n\n    checkHideTutHand() {\n        if (this.isTutDone) return;\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        hand.stopAllActions();\n        hand.x = 9999;\n    },\n\n    checkShowTutHand() {\n        if (this.isTutDone) return;\n        const hand = cc.find('Canvas/layer_tut/handTutorial');\n        _GAME.tut.startHandAction();\n    },\n\n    checkDoneTut() {\n        if (this.isTutDone) return;\n        this.endTut();\n    },\n\n}","import * as _GAME from '../all_modules';\n\nexport const uiChallenge={\n    challengedFriendArr: [],\n    countCancelChallenge: {\n        key: '',\n        value: 0\n    },\n    init() {\n        _GAME.login.addLoginDataField(\"countSaving\");\n        _GAME.login.addCallback(data => {\n            if (data) {\n                let nDate = new Date();\n                if (!data.countSaving) {\n                    let [date, month, year] = nDate.toLocaleDateString().split(\"/\");\n                    let key = `${date}/${month}/${year}`;\n                    _GAME.uiChallenge.countCancelChallenge.key = key;\n                    _GAME.uiChallenge.countCancelChallenge.value = 0;\n                    _GAME.data.saveData({ 'countSaving': _GAME.uiChallenge.countCancelChallenge });\n                } else {\n                    let dataCountCancelChallenge = data.countSaving;\n                    if (!dataCountCancelChallenge) {\n                        let [date, month, year] = nDate.toLocaleDateString().split(\"/\");\n                        let key = `${date}/${month}/${year}`;\n                        _GAME.uiChallenge.countCancelChallenge.key = key;\n                        _GAME.uiChallenge.countCancelChallenge.value = 0;\n                        _GAME.data.saveData({ 'countSaving': _GAME.uiChallenge.countCancelChallenge });\n                    } else {\n                        let key = dataCountCancelChallenge.key;\n                        // console.log('loginData  Key ', key);\n                        let [dataDate, dataMonth, dataYear] = key.split('/');\n                        let [date, month, year] = nDate.toLocaleDateString().split(\"/\")\n                        if (dataYear == year) {\n                            if (dataMonth == month) {\n                                if (dataDate == date) {\n                                    _GAME.uiChallenge.countCancelChallenge.key = key;\n                                    _GAME.uiChallenge.countCancelChallenge.value = dataCountCancelChallenge.value;\n                                } else {\n                                    _GAME.uiChallenge.countCancelChallenge.key = `${date}/${month}/${year}`;\n                                    _GAME.uiChallenge.countCancelChallenge.value = 0;\n                                }\n                            } else {\n                                _GAME.uiChallenge.countCancelChallenge.key = `${date}/${month}/${year}`;\n                                _GAME.uiChallenge.countCancelChallenge.value = 0;\n                            }\n                        } else {\n                            _GAME.uiChallenge.countCancelChallenge.key = `${date}/${month}/${year}`;\n                            _GAME.uiChallenge.countCancelChallenge.value = 0;\n                        }\n                        // console.log('loginData   ', _GAME.uiChallenge.countCancelChallenge);\n                    }\n                }\n            }\n        });\n    },\n    setDataChallenge(callback) {\n        const you = cc.find('Canvas/layer_challenge/content/bg_left');\n        const friend = cc.find('Canvas/layer_challenge/content/bg_right');\n        const myScore = cc.find('Canvas/layer_challenge/content/lb_score');\n        _GAME.utils.setLabelText(myScore, _GAME.user.score+'!', true);\n        _GAME.uiChallenge.setDirectorData(you, _GAME.user,true);\n        this.selectedFriend = _GAME.friend.getRandomFriendInList();\n        if (this.selectedFriend) {\n            _GAME.uiChallenge.setDirectorData(friend, this.selectedFriend, false);\n        } else {\n            // _GAME.uiChallenge.closeChallenge(() => _GAME.uiGameOver.openPanelGameOver);\n        }\n        if (callback) callback();\n    },\n    setDirectorData(node, data, isCrown) {\n        if (node) {\n            if (data) {\n                const avata = node.getChildByName('avata');\n                const score = node.getChildByName('lb_point');\n                const name = node.getChildByName('lb_name');\n                const crown = node.getChildByName('crown');\n                console.log('data.name   ',data.name, '===> data.score  ' ,data.score);\n                _GAME.utils.setLabelTextPrice(score, data.score);\n                _GAME.utils.setLabelText(name, data.name);\n                crown.active = isCrown;\n                cc.assetManager.loadRemote(data.photo, (err, texture) => {\n                    if (!err) {\n                        let ava = new cc.SpriteFrame(texture);\n                        avata.getComponent(cc.Sprite).spriteFrame = ava;\n                        avata.width = 198;\n                        avata.height = 200;\n                    }\n                });\n            }\n        }\n    },\n    onClickCancel() {\n        _GAME.uiChallenge.closeChallenge(() => {;\n            _GAME.uiChallenge.saveCountCancel();\n            _GAME.uiGameOver.openPanelGameOver(true);\n            // _GAME.logic.replayNewGame();\n            // _GAME.ui.resetListTouch();\n            // _GAME.mapControl.replayNewGame();\n        });\n    },\n    saveCountCancel() {\n        let nDate = new Date();\n        let [date, month, year] = nDate.toLocaleDateString().split(\"/\");\n        let key = `${date}/${month}/${year}`\n        if (_GAME.uiChallenge.countCancelChallenge) {\n            if (key == _GAME.uiChallenge.countCancelChallenge.key) {\n                _GAME.uiChallenge.countCancelChallenge.value++;\n                _GAME.data.saveData({ 'countSaving': _GAME.uiChallenge.countCancelChallenge });\n            }\n        }\n    },\n    resetCountCancel() {\n        let nDate = new Date();\n        let [date, month, year] = nDate.toLocaleDateString().split(\"/\");\n        let key = `${date}/${month}/${year}`\n        if (_GAME.uiChallenge.countCancelChallenge) {\n            if (key == _GAME.uiChallenge.countCancelChallenge.key) {\n                _GAME.uiChallenge.countCancelChallenge.value = 0;\n                _GAME.data.saveData({ 'countSaving': _GAME.uiChallenge.countCancelChallenge });\n            }\n        }\n    },\n    runActionShowItem() {\n        const mainContent = cc.find('Canvas/Chalenge_scene/content/main_content');\n        // const promoContent = cc.find('Canvas/Chalenge_scene/content/promo_content');\n        // if (_GAME.config.promoEndGame) {\n        //     if (window.canPromo) {\n        //         promoContent.active = true;\n        //     }\n\n        // } else {\n        //     promoContent.active = false;\n        // }\n        // mainContent.position = _GAME.config.challengePosition[_GAME.config.promoEndGame];\n\n        const textGreate = cc.find('Canvas/layer_challenge/content/header/lb_top');\n        _GAME.fx.showTextGreate(textGreate);\n\n        const start1 = cc.find('Canvas/layer_challenge/content/header/star_left');\n        const start2 = cc.find('Canvas/layer_challenge/content/header/star_center');\n        const start3 = cc.find('Canvas/layer_challenge/content/header/star_right');\n        _GAME.fx.animStar([start1, start2, start3]);\n\n        const youAvata = cc.find('Canvas/layer_challenge/content/bg_left/avata');\n        const friendAvata = cc.find('Canvas/layer_challenge/content/bg_right/avata');\n        _GAME.fx.effectForInfo(youAvata, -100);\n        _GAME.fx.effectForInfo(friendAvata, 100);\n\n        const btnPlay = cc.find('Canvas/layer_challenge/content/btn_c_play');\n        const btnPlayAnother = cc.find('Canvas/layer_challenge/content/btn_c_play_another');\n        const btnCancel = cc.find('Canvas/layer_challenge/content/btn_c_cancel');\n        _GAME.fx.effectForButton(btnPlay, 1);\n        _GAME.fx.effectForButton(btnPlayAnother, 1.5);\n        _GAME.fx.effectForButton(btnCancel, 2.75);\n    }\n}","import * as _GAME from '../all_modules';\n\nexport const uiPowerItem = {\n    triplePoint: false,\n    totalBom:0,\n    totalRelocated:0,\n    totalTriple:0,\n    init(){\n        \n        _GAME.login.addLoginDataField('TotalBom');\n        _GAME.login.addLoginDataField('TotalRelocated');\n        _GAME.login.addLoginDataField('TotalTriple');\n\n        this.bgTotalBom = cc.find('Canvas/play_area/btn_bomb/bg_total_bom');\n        this.bgTotalRotate = cc.find('Canvas/play_area/btn_relocated/bg_total_relocated');\n        this.bgTotalTriple = cc.find('Canvas/play_area/btn_triple/bg_total_triple');\n\n        _GAME.login.addCallback(data=>{\n            _GAME.uiPowerItem.totalBom = (_GAME.uiPowerItem.totalBom && _GAME.uiPowerItem.totalBom != 0)?_GAME.uiPowerItem.totalBom:0;\n            _GAME.uiPowerItem.totalRelocated = (_GAME.uiPowerItem.totalRelocated && _GAME.uiPowerItem.totalRelocated != 0)?_GAME.uiPowerItem.totalRelocated:0;\n            _GAME.uiPowerItem.totalTriple = (_GAME.uiPowerItem.totalTriple && _GAME.uiPowerItem.totalTriple != 0)?_GAME.uiPowerItem.totalTriple:0;\n            if(data.isNewUser){\n                _GAME.uiPowerItem.totalBom = 2;\n                _GAME.uiPowerItem.totalRelocated = 2;\n                _GAME.uiPowerItem.totalTriple = 2;\n            }else{\n                _GAME.uiPowerItem.totalBom = (data.TotalBom) ? data.TotalBom : 0;\n                _GAME.uiPowerItem.totalRelocated = (data.TotalRelocated) ? data.TotalRelocated : 0;\n                _GAME.uiPowerItem.totalTriple = (data.TotalTriple) ? data.TotalTriple : 0;\n            }\n            _GAME.data.saveData({'TotalBom':_GAME.uiPowerItem.totalBom});\n            _GAME.data.saveData({'TotalRelocated':_GAME.uiPowerItem.totalRelocated});\n            _GAME.data.saveData({'TotalTriple':_GAME.uiPowerItem.totalTriple});\n            _GAME.uiPowerItem.updatePowerItem();\n        });\n\n        this.btnBom = cc.find('Canvas/play_area/btn_bomb'); \n        this.btnRotate = cc.find('Canvas/play_area/btn_relocated'); \n        this.btnTriple = cc.find('Canvas/play_area/btn_triple'); \n\n        _GAME.utils.addButtonComp(this.btnBom,()=>_GAME.uiPowerItem.onClickBom());\n        _GAME.utils.addButtonComp(this.btnRotate,()=>_GAME.uiPowerItem.onClickRelocated());\n        _GAME.utils.addButtonComp(this.btnTriple,()=>_GAME.uiPowerItem.onClickTriple());\n        if(_GAME.configs.off_power_item){\n            this.btnBom.active = false;\n            this.btnRotate.active = false;\n            this.btnTriple.active = false;\n        }\n\n    },\n    updatePowerItem(){\n        if(this.bgTotalBom){\n            this.bgTotalBom.children.map((item)=>{\n                item.active = false;\n            });\n            if(_GAME.uiPowerItem.totalBom && _GAME.uiPowerItem.totalBom > 0){\n                this.bgTotalBom.active = true;\n                this.bgTotalBom.getChildByName('total').active = true;\n                _GAME.utils.setLabelText(this.bgTotalBom.getChildByName('total'),_GAME.uiPowerItem.totalBom);\n            }else{\n                this.bgTotalBom.active = true;\n                this.bgTotalBom.getChildByName('video').active = true;\n            }\n        }\n        if(this.bgTotalRotate){\n            this.bgTotalRotate.children.map((item)=>{\n                item.active = false;\n            });\n            if(_GAME.uiPowerItem.totalRelocated && _GAME.uiPowerItem.totalRelocated > 0){\n                this.bgTotalRotate.active = true;\n                this.bgTotalRotate.getChildByName('total').active = true;\n                _GAME.utils.setLabelText(this.bgTotalRotate.getChildByName('total'),_GAME.uiPowerItem.totalRelocated);\n            }else{\n                this.bgTotalRotate.active = true;\n                this.bgTotalRotate.getChildByName('video').active = true;\n            }\n        }\n        if(this.bgTotalTriple){\n\n            this.bgTotalTriple.children.map((item)=>{\n                item.active = false;\n            });\n            if(_GAME.uiPowerItem.totalTriple && _GAME.uiPowerItem.totalTriple > 0){\n                this.bgTotalTriple.active = true;\n                this.bgTotalTriple.getChildByName('total').active = true;\n                _GAME.utils.setLabelText(this.bgTotalTriple.getChildByName('total'),_GAME.uiPowerItem.totalTriple);\n            }else{\n                if(_GAME.game.triplePoint){\n                    this.bgTotalTriple.active =  false;\n                }else{\n                    this.bgTotalTriple.active =  true;\n                    this.bgTotalTriple.getChildByName('video').active = true;\n                }\n            }\n        }\n    },\n    \n    onClickBom(){\n        _GAME.ui.showLayer('layer_anim');\n        _GAME.utilsFB.log('power_item_bom_click',1);\n        if(_GAME.uiPowerItem.totalBom && _GAME.uiPowerItem.totalBom > 0){\n            _GAME.utilsFB.log('power_item_bom_using_success',1);\n            _GAME.game.actionPowerItemBom(()=> _GAME.uiPowerItem.updatePowerItem());\n        }else{\n            _GAME.utilsFB.log('power_item_bom_open_ads',1);\n            if(_GAME.configs.off_inter_ads){\n                _GAME.utilsFB.log('power_item_bom_fail',1);\n                _GAME.ui.showAlert(\n                    `Oops!\\n\\nSomething went wrong`,\n                    () => _GAME.uiPowerItem.addItemBom(),\n                );\n            }else{\n                _GAME.video.showVideo(\n                    ()=>{\n                        _GAME.utilsFB.log('power_item_bom_watch_video_success',1);\n                        _GAME.uiPowerItem.addItemBom();\n                    },\n                    (result,isFormal)=>{\n                        if(!isFormal){\n                            _GAME.utilsFB.log('power_item_bom_quit',1);\n                            _GAME.ui.showAlert(\n                                'BOM FAil : '+result.message,\n                                () =>  _GAME.uiPowerItem.addItemBom()\n                            );\n                        }else{\n                            _GAME.utilsFB.log('power_item_bom_fail',1);\n                            _GAME.ui.showAlert(\n                                `Oops!\\n\\nSomething went wrong`,\n                                () => _GAME.ui.hideLayer('layer_anim')\n                            );\n                        }\n                      \n                        \n                    }\n                );\n            }\n            \n        }\n    },\n    addItemBom(){\n        _GAME.uiPowerItem.totalBom +=1;\n        _GAME.data.saveData({'TotalBom':_GAME.uiPowerItem.totalBom});\n        _GAME.ui.showLayer('layer_anim');\n        _GAME.game.actionPowerItemBom();\n        _GAME.uiPowerItem.updatePowerItem();\n        _GAME.uiPowerItem.flyingMove(\n            cc.find('Canvas/play_area/btn_bomb'),\n            ()=>{},\n            'plus'\n        )\n    },\n    onClickRelocated(){\n        _GAME.ui.showLayer('layer_anim');\n        _GAME.utilsFB.log('power_item_relocated_click',1);\n        if(_GAME.uiPowerItem.totalRelocated && _GAME.uiPowerItem.totalRelocated > 0){\n            _GAME.utilsFB.log('power_item_relocated_using_success',1);\n            _GAME.game.actionPowerItemRelocated(()=> _GAME.uiPowerItem.updatePowerItem());\n           \n        }else{\n            _GAME.utilsFB.log('power_item_relocated_open_ads',1);\n            if(_GAME.configs.off_inter_ads){\n                _GAME.utilsFB.log('power_item_relocated_fail',1);\n                _GAME.ui.showAlert(\n                    `Oops!\\n\\nSomething went wrong`,\n                    () => _GAME.uiPowerItem.addItemRelocated()\n                );\n            }else{\n                _GAME.video.showVideo(\n                    ()=>{\n                        _GAME.utilsFB.log('power_item_relocated_watch_video_success',1);\n                        _GAME.uiPowerItem.addItemRelocated();\n                    },\n                    (result,isFormal)=>{\n\n                        // console.log('isFormal    ' ,isFormal);\n                        if(!isFormal){\n                            _GAME.utilsFB.log('power_item_relocated_quit',1);\n                            _GAME.ui.showAlert(\n                                'RELOCATED FAil : '+result.message,\n                                () =>_GAME.uiPowerItem.addItemRelocated()\n                            );\n                        }else{\n                            _GAME.utilsFB.log('power_item_relocated_fail',1);\n                            _GAME.ui.showAlert(\n                                `Oops!\\n\\nSomething went wrong`,\n                                () => _GAME.ui.hideLayer('layer_anim')\n                            );\n                        }\n                      \n                    }\n                );\n            }\n        }\n    },\n    addItemRelocated(){\n        _GAME.uiPowerItem.totalRelocated +=1;\n        _GAME.data.saveData({'TotalRelocated':_GAME.uiPowerItem.totalRelocated});\n        _GAME.ui.showLayer('layer_anim');\n        _GAME.uiPowerItem.updatePowerItem();\n        _GAME.game.actionPowerItemRelocated();\n        _GAME.uiPowerItem.flyingMove(\n            cc.find('Canvas/play_area/btn_relocated'),\n            ()=>{},\n            'plus'\n        )\n    },\n    onClickTriple(){\n        if(_GAME.game.triplePoint) return;\n        _GAME.ui.showLayer('layer_anim');\n        _GAME.utilsFB.log('power_item_triple_click',1);\n        if(_GAME.uiPowerItem.totalTriple && _GAME.uiPowerItem.totalTriple > 0){\n            _GAME.utilsFB.log('power_item_triple_using_success',1);\n            _GAME.game.actionPowerItemTriple();\n        }else{\n            _GAME.utilsFB.log('power_item_triple_open_ads',1);\n            if(_GAME.configs.off_inter_ads){\n                _GAME.utilsFB.log('power_item_triple_fail',1);\n                _GAME.ui.showAlert(\n                    `Oops!\\n\\nSomething went wrong`,\n                    () =>  _GAME.uiPowerItem.addItemTriple()\n                );\n            }else{\n                \n                _GAME.video.showVideo(\n                    ()=>{\n                        _GAME.utilsFB.log('power_item_triple_watch_video_success',1);\n                        _GAME.uiPowerItem.addItemTriple()\n                    },\n                    (result,isFormal)=>{\n                        // console.log('isFormal    ' ,isFormal);\n                        if(!isFormal){\n                            _GAME.utilsFB.log('power_item_triple_quit',1);\n                            _GAME.ui.showAlert(\n                                'TRIPLE FAil : '+result.message,\n                                () =>_GAME.uiPowerItem.addItemTriple()\n                            );\n                        }else{\n                            _GAME.utilsFB.log('power_item_triple_fail',1);\n                            _GAME.ui.showAlert(\n                                `Oops!\\n\\nSomething went wrong`,\n                                () => _GAME.ui.hideLayer('layer_anim')\n                            );\n                        }\n                        \n                        \n                    }\n                );\n            }\n           \n        }\n    },\n    addItemTriple(){\n        _GAME.uiPowerItem.totalTriple +=1;\n        _GAME.data.saveData({'TotalTriple':_GAME.uiPowerItem.totalTriple});\n        _GAME.uiPowerItem.updatePowerItem();\n        _GAME.uiPowerItem.flyingMove(\n            cc.find('Canvas/play_area/btn_triple'),\n            ()=>{},\n            'plus'\n        )\n        _GAME.utils.setTimeout(()=>{\n            _GAME.game.actionPowerItemTriple();\n        },1000);\n    },\n    validateBoomSuccess(){\n        _GAME.uiPowerItem.totalBom--;\n        _GAME.data.saveData({'TotalBom':_GAME.uiPowerItem.totalBom});\n        _GAME.uiPowerItem.updatePowerItem();\n    },\n    validateTripleSuccess(){\n        _GAME.uiPowerItem.totalTriple--;\n        _GAME.data.saveData({'TotalTriple':_GAME.uiPowerItem.totalTriple});\n        _GAME.uiPowerItem.updatePowerItem();\n    },\n    validateRelocatedSuccess(){\n        _GAME.uiPowerItem.totalRelocated--;\n        _GAME.data.saveData({'TotalRelocated':_GAME.uiPowerItem.totalRelocated});\n        _GAME.uiPowerItem.updatePowerItem();\n    },\n    flyingMove(nodeParent,callback,key){\n        const nodeClone = cc.find('Canvas/play_area/clone_fly');\n        if(nodeClone){\n            let clone = cc.instantiate(nodeClone);\n            if(nodeParent)nodeParent.addChild(clone);\n            if(key == 'plus'){\n                // clone.getComponent(cc.Label).string = '+1';\n                _GAME.utils.setLabelText(clone,'+1');\n            }else if(key == 'minus'){\n                // clone.getComponent(cc.Label).string = '-1';\n                _GAME.utils.setLabelText(clone,'-1');\n            }\n            clone.scale = 2;\n            clone.x = 0;\n            clone.y = 0;\n            if(clone.active == false) clone.active = true;\n            _GAME.fx.nodeMoveAndHidden(clone,callback);\n        }\n    }\n}","import * as _GAME from '../all_modules';\n    \nexport const ui = {\n    hideNagTimer: null,\n    hideLoadingRealServerTimer: null,\n\n    init() {\n       _GAME.ui.initButtonHandler();\n    },\n\n    initButtonHandler() {\n        //  =============================\n        //leaderboard > brag top\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_leaderboard/header/btn_brag'),\n            (e) => {\n                _GAME.utilsFB.log(`ev_click_button_brag_top`);\n                _GAME.social.share(_GAME.user.score);\n            }\n        );\n\n        //leaderboard > brag bottom\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_leaderboard/content_bg/bottom_container/btn_share'),\n            (e) => {\n                _GAME.utilsFB.log(`ev_click_button_brag_bottom`);\n                _GAME.social.share(_GAME.user.score);\n            }\n        );\n\n        //leaderboard > bottom replay\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_leaderboard/content_bg/bottom_container/btn_replay'),\n            (e) => {\n                _GAME.utilsFB.log(`ev_click_button_replay_leaderboard`);\n                _GAME.ui.hideLayer('layer_leaderboard');\n                // _GAME.game.replay(() => _GAME.interAd.checkRequireMentShowAdd(() => _GAME.interAd.show('gameOverReplay')));\n                _GAME.game.replay();\n            }\n        );\n\n        //leaderboard > bottom invite\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_leaderboard/content_bg/bottom_container/btn_invite'),\n            (e) => {\n                _GAME.utilsFB.log(`ev_click_button_invite_leaderboard`);\n                _GAME.social.invite(contextId=>{\n                    _GAME.social.playerIdSendMessage = contextId;\n                });\n            }\n        );\n\n\n        //leaderboard > tab friends\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_leaderboard/content_bg/middle_container/leaderboard/tabs/friends'),\n            (e) => _GAME.leaderboard.onClickTab('friends'),\n            false\n        );\n\n        //leaderboard > tab global\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_leaderboard/content_bg/middle_container/leaderboard/tabs/global'),\n            (e) => _GAME.leaderboard.onClickTab('global'),\n            false\n        );\n\n\n        // =====================================\n        // pause > replay\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_pause/btn_restart'),\n            (e) => {\n                _GAME.utilsFB.log(`ev_click_button_replay_pause`);\n                _GAME.interAd.showInterAds('Canvas/layer_pause/btn_restart',()=>{\n                    _GAME.game.triplePoint = false;\n                    _GAME.fx.effectTriple(false);\n                    _GAME.ui.hideLayer('layer_pause');\n                    _GAME.game.replay();\n                });\n                // _GAME.game.replay(() => _GAME.interAd.checkRequireMentShowAdd(() => _GAME.interAd.show('gameOverReplay')));\n            }\n        );\n\n        // pasue > continue\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_pause/btn_continue'),\n            (e) => {\n                _GAME.utilsFB.log(`ev_click_button_continue_pause`);\n                _GAME.ui.hideLayer('layer_pause');\n            }\n        )\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_pause/btn_localize'),\n            ()=>{\n                console.log('Clickk Localize');\n                _GAME.localize.onClickChangeLocalize();\n            }\n        )\n        // _GAME.utils.addButtonComp(\n        //     cc.find('Canvas/layer_pause/btn_sound_on'),\n        //     (e) => {\n        //         _GAME.utilsFB.log(`ev_click_button_sound_on`);\n        //         _GAME.audio.updateUi\n        //         // _GAME.ui.hideLayer('layer_pause');\n        //     }\n        // )\n        // _GAME.utils.addButtonComp(\n        //     cc.find('Canvas/layer_pause/btn_sound_off'),\n        //     (e) => {\n        //         _GAME.utilsFB.log(`ev_click_button_sound_off`);\n        //         // _GAME.ui.hideLayer('layer_p ause');\n        //     }\n        // )\n      \n\n        // game play > btn pause\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/play_area/btn_pause'),\n            (e) => {\n              \n                if (!_GAME.tut.isTutDone) return;\n                if (_GAME.tutTriple.showing) return;\n                if (_GAME.tutBom.showing) return;\n                if (_GAME.tutRolated.showing) return;\n                if (_GAME.tutRelocated.showing) return;\n                _GAME.utilsFB.log(`ev_click_button_pause`);\n                _GAME.ui.showLayer('layer_pause');\n            }\n        );\n     \n\n\n        // ======================================\n        // alert => (OK) close\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_alert/btn_ok'),\n            (e) => {\n                _GAME.ui.hideLayer('layer_alert');\n                if (_GAME.ui.alertCloseCallback) {\n                    _GAME.ui.alertCloseCallback();\n                    _GAME.utils.setTimeout(()=>{\n                        _GAME.ui.alertCloseCallback = null;\n                    },1000);\n                }\n            }\n        );\n        // ======================================\n        // result => \n        _GAME.fx.bubbleForever(cc.find('Canvas/layer_result/btn_brag'));\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_result/btn_replay'),\n            ()=>{\n                _GAME.utilsFB.log(`ev_click_button_replay_result`);\n                _GAME.ui.hideLayer('layer_result');\n                _GAME.game.replay();\n                _GAME.interAd.checkToShowReplayAd();\n            }\n        );\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_result/btn_brag'),\n            ()=>{\n                _GAME.utilsFB.log(`ev_click_button_brag_result`);\n                _GAME.social.share(_GAME.user.score);\n            }\n        );\n        // ======================================\n        // challenge => \n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_challenge/content/btn_c_play'),\n            ()=>{\n                _GAME.utilsFB.log(`ev_click_button_context`);\n                _GAME.social.createContext(\n                    _GAME.uiChallenge.selectedFriend.id,\n                    () => {\n                        _GAME.social.playerIdSendMessage = _GAME.uiChallenge.selectedFriend.id;\n                        _GAME.ui.hideLayer('layer_challenge');\n                        // _GAME.social.sendMessageAfterQuit();\n                        _GAME.uiChallenge.resetCountCancel();\n                        _GAME.game.replay();\n                    },\n                )\n            }\n        );\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_challenge/content/btn_c_play_another'),\n            ()=>{\n                _GAME.utilsFB.log(`ev_click_button_invite_another_friend`);\n                _GAME.social.invite(contextId => {\n                    _GAME.social.playerIdSendMessage = contextId;\n                    _GAME.ui.hideLayer('layer_challenge');\n                    _GAME.game.replay();\n\n                    _GAME.uiChallenge.resetCountCancel();\n                    \n\n                    _log(` onBtnPlayWithAnother >> _GAME.challenge.resetChallengCancelTimeArr(); `)\n                        // _GAME.challenge.resetChallengCancelTimeArr();\n                });\n            }\n        );\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_challenge/content/btn_c_cancel'),\n            ()=>{\n                _GAME.utilsFB.log(`ev_click_button_cancel_comback_result`);\n                _GAME.ui.hideLayer('layer_challenge')\n                _GAME.uiChallenge.saveCountCancel();\n                _GAME.uiChallenge.countCancelChallenge ++;\n                _GAME.utils.setTimeout(()=>{\n                    _GAME.ui.showLayer('layer_result');\n                },200);\n            }\n        );\n\n        // bind button video continue\n        const btnSaveMe = cc.find('Canvas/layer_video_continue/btn_save_me');\n        _GAME.fx.bubbleForever(btnSaveMe);\n        _GAME.utils.addButtonComp(\n            btnSaveMe,\n            () => {\n                _GAME.ui.hideLayer('layer_video_continue');\n                _GAME.utilsFB.log(`ev_click_video_continue`);\n                if (_GAME.game.videoContinueLeft == 1) _GAME.utilsFB.log(`ev_click_video_continue_3rd`);\n                if(_GAME.configs.off_inter_ads){\n                    _GAME.ui.showAlert(\n                        `Oops!\\n\\nSomething went wrong`,\n                        //_GAME.video.isErrRewardNotCompleted(err) ? `Oops!\\n\\n Video is skipped\\n You're not saved!` : `Oops!\\n\\nSomething went wrong`,\n                        () => _GAME.game.onVideoContinueSuccess(),\n                    );\n                }else{\n                    _GAME.video.showVideo(_GAME.game.onVideoContinueSuccess, _GAME.game.onVideoContinueFail);\n                }\n            }\n        );\n\n        _GAME.utils.addButtonComp(\n            cc.find('Canvas/layer_video_continue/btn_cancel'),\n            () => {\n                _GAME.utilsFB.log(`ev_cancel_video_continue`);\n                _GAME.ui.hideLayer('layer_video_continue');\n                _GAME.game.realGameOver();\n            }\n        );\n    },\n\n    // show/hide layers\n    showLayer(layerName) {\n        const layerNode = cc.find(`Canvas/${layerName}`);\n        if (layerNode) layerNode.active = true;\n    },\n\n    hideLayer(layerName) {\n        const layerNode = cc.find(`Canvas/${layerName}`);\n        if (layerNode) layerNode.active = false;\n        \n    },\n\n    // common popups ==========\n    showAlert(content, closeCallback) {\n        _GAME.ui.showLayer(\"layer_alert\");\n        _GAME.utils.setLabelText(cc.find('Canvas/layer_alert/label_message'), content);\n        _GAME.ui.alertCloseCallback = closeCallback;\n    },\n\n    showLoading() {\n        _GAME.ui.showLayer(\"layer_loading\");\n        // auto turn off loading if shown more than 10 secs but not being turned off\n        if (_GAME.ui.hideLoadingTimer) clearTimeout(_GAME.ui.hideLoadingTimer);\n        _GAME.ui.hideLoadingTimer = setTimeout(() => _GAME.ui.hideLoading(), 10000);\n    },\n\n    hideLoading() {\n        _GAME.ui.hideLayer(\"layer_loading\");\n        if (_GAME.ui.hideLoadingTimer) clearTimeout(_GAME.ui.hideLoadingTimer);\n    },\n\n    // showCongratz(rewards, callback) {\n    //     cc.find(\"Canvas/congratulation_result\").getComponent(CongratulationResult).show(rewards, callback);\n    // },\n\n    // showConfirm(questionString, callbackYes, callbackNo) {\n    //     const confirmComp = cc.find('Canvas/popup_confirm').getComponent('popup_confirm');\n    //     confirmComp.callbackYes = callbackYes || null;\n    //     confirmComp.callbackNo = callbackNo || null;\n    //     confirmComp.setQuestionLabel(questionString);\n    //     _GAME.popup.showPopup(\"popup_confirm\");\n    // },\n\n    // ============= nag screen ==============================\n    showNagScreen(compName) {\n        cc.find('Canvas/nag_screen').active = true;\n        // console.warn(`SHOW NAG_SCREEN BY ${compName} `);\n\n        // auto turn off nagscreen if shown more than 10 secs but not being turned off\n        // if (_GAME.ui.hideNagTimer) clearTimeout(_GAME.ui.hideNagTimer);\n        // _GAME.ui.hideNagTimer = setTimeout(() => _GAME.ui.hideNagScreen(), 1000);\n    },\n\n    hideNagScreen(compName) {\n        cc.find('Canvas/nag_screen').active = false;\n        // if (_GAME.ui.hideNagTimer) clearTimeout(_GAME.ui.hideNagTimer);\n        // console.warn(` HIDE NAG_SCREEN BY ${compName} `);\n    },\n\n\n    // ====== supportive\n    disableButton(but) {\n        if (!but.getComponent(cc.Button)) _log('KHoong ton tai button component');\n        if (but.getComponent(cc.Button)) but.getComponent(cc.Button).enabled = false;\n        but.opacity = parseInt(0.3 * 255);\n    },\n\n    enableButton(but) {\n        if (but.getComponent(cc.Button)) but.getComponent(cc.Button).enabled = true;\n        but.opacity = 255;\n    },\n\n\n    showCompliment(text) {\n        const container = cc.find('Canvas/play_area/labels/compliment');\n        const label = container.getChildByName('label');\n        _GAME.utils.setLabelText(label, text);\n        container.stopAllActions();\n        container.scale = 0;\n        container.runAction(cc.sequence(\n            cc.scaleTo(0.2, 1.15).easing(cc.easeOut(3)),\n            cc.scaleTo(0.1, 1).easing(cc.easeIn(1)),\n            cc.delayTime(2),\n            cc.scaleTo(0.1, 1.15).easing(cc.easeOut(1)),\n            cc.scaleTo(0.2, 0).easing(cc.easeIn(3)),\n        ));\n    },\n    updateScore(score) {\n        const playAreaLabelScore = cc.find('Canvas/play_area/labels/label_score');\n        const userScoreResult = cc.find('Canvas/layer_result/score');\n        playAreaLabelScore.runAction(cc.sequence(\n            cc.scaleTo(0.1, 1.5),\n            cc.callFunc(() => _GAME.utils.setLabelText(playAreaLabelScore, _GAME.utils.localizeNumber(99999) + '')),\n            cc.scaleTo(0.17, 1),\n        ));\n        _GAME.utils.setLabelText(userScoreResult, _GAME.utils.localizeNumber(score) + '')\n        _GAME.utils.setLabelText(\n            cc.find('Canvas/layer_leaderboard/label_your_score'),\n            _GAME.utils.localizeNumber(score) + '',\n        );\n    },\n    updateHighScore(){\n        const playAreaLabelBestScore  = cc.find('Canvas/play_area/labels/label_best_score');\n        const userBestScoreResultt = cc.find('Canvas/layer_result/best_score');\n        playAreaLabelBestScore.runAction(cc.sequence(\n            cc.scaleTo(0.1, 1.5),\n            cc.callFunc(() => _GAME.utils.setLabelText(playAreaLabelBestScore, _GAME.utils.localizeNumber(_GAME.user.bestScore) + '')),\n            cc.scaleTo(0.17, 1),\n        ));\n        _GAME.utils.setLabelText(userBestScoreResultt, _GAME.utils.localizeNumber(_GAME.user.bestScore)+ '');\n    },\n\n    \n\n\n}","import * as _GAME from '../all_modules';\nexport const user = {\n    id: 0,\n    name: 0,\n    score: 0,\n    bestScore: 0,\n\n    init() {\n        if (window.FBInstant) {\n            _GAME.user.id = FBInstant.player.getID();\n            _GAME.user.name = FBInstant.player.getName();\n            _GAME.user.photo = FBInstant.player.getPhoto();\n            window.canPromo = (FBInstant.getPlatform() == 'IOS') ? false : false;\n        } else {\n            _GAME.user.id = 'xxxxaa111';\n            _GAME.user.name = \"Tkgiet\";\n            _GAME.user.photo = '';//\"https://platform-lookaside.fbsbx.com/platform/instantgames/profile_pic.jpg?igpid=3945443978807076&height=256&width=256&ext=1587452957&hash=AeS0fb6W2zGFcKOE\";\n        }\n    },\n\n    initNewUser(data) {\n        Object.assign(data, {\n            LoginTime: 0,\n            PlayerExp: 0,\n            PlayerLevel: 0,\n        });\n\n        _GAME.data.saveData(data);\n    },\n\n}","import * as _GAME from '../all_modules';\n\nexport const utilsFB = {\n    init() {\n        _GAME.utilsFB.startLogSessionTime();\n        if (window.FBInstant) {\n            FBInstant.onPause(() => { }); // chi can goi ham de FB tick la` API da su dung\n            window.fbSupportedAPIs = FBInstant.getSupportedAPIs();\n            // console.table(FBInstant.getSupportedAPIs());\n        }\n    },\n\n\n    log(eventName, quantity = 1, dataObj) {\n        // _log(` logged fb-event ${eventName} `);\n        // _log('Event name ==> ', eventName, \" data object ==> \", dataObj);\n        if (!window.FBInstant) { return; }\n        FBInstant.logEvent(eventName, quantity, dataObj);\n    },\n\n\n    setSessionId(playerId) {\n        if (window.FBInstant) {\n            FBInstant.setSessionData({\n                player_id: playerId\n            });\n        }\n    },\n\n    isSupportedAPI(name) {\n        if (!window.FBInstant) return false;\n        const arr = FBInstant.getSupportedAPIs();\n        return arr.indexOf(name) != -1;\n    },\n\n\n    // log Time game play\n    startLogSessionTime() {\n        const logEventTimePassedTotal = (time) => {\n            // console.log('logEventTimePassedTotal     ',time);\n            _GAME.utilsFB.log(`ev_session_time_total`, 1, { timePassed: time });\n        }\n        const logEventTimePassed5 = (time)=>{\n            // console.log('logEventTimePassed5     ',time);\n            _GAME.utilsFB.log(`ev_session_time_5`, 1, { timePassed: time });\n        }\n        const logEventTimePassed10 = (time)=>{\n            // console.log('logEventTimePassed10     ',time);\n            _GAME.utilsFB.log(`ev_session_time_10`, 1, { timePassed: time });\n        }\n        const logEventTimePassed15 = (time)=>{\n            // console.log('logEventTimePassed15     ',time);\n            _GAME.utilsFB.log(`ev_session_time_15`, 1, { timePassed: time });\n        }\n        const logEventTimePassed20 = (time)=>{\n            // console.log('logEventTimePassed20     ',time);\n            _GAME.utilsFB.log(`ev_session_time_20`, 1, { timePassed: time });\n        }\n        const logEventTimePassed25 = (time)=>{\n            // console.log('logEventTimePassed25     ',time);\n            _GAME.utilsFB.log(`ev_session_time_25`, 1, { timePassed: time });\n        }\n        const logEventTimePassed30 = (time)=>{\n            // console.log('logEventTimePassed30     ',time);\n            _GAME.utilsFB.log(`ev_session_time_30`, 1, { timePassed: time });\n        }\n        logEventTimePassedTotal(0);\n        logEventTimePassed5(0);\n        logEventTimePassed10(0);\n        logEventTimePassed15(0);\n        logEventTimePassed20(0);\n        logEventTimePassed25(0);\n        logEventTimePassed30(0);\n        let passedTime = 0;\n        let passedTime5 = 0;\n        let passedTime10 = 0;\n        let passedTime15 = 0;\n        let passedTime20 = 0;\n        let passedTime25 = 0;\n        let passedTime30 = 0;\n        setInterval(() => {\n            passedTime += 30;\n            logEventTimePassedTotal(passedTime);\n        }, 30000);\n        setTimeout(() => {\n            passedTime5 += 5;\n            logEventTimePassed5(passedTime5);\n        }, 5000);\n        setTimeout(() => {\n            passedTime10 += 10;\n            logEventTimePassed10(passedTime10);\n        }, 10000);\n        setTimeout(() => {\n            passedTime15 += 15;\n            logEventTimePassed15(passedTime15);\n        }, 15000);\n        setTimeout(() => {\n            passedTime20 += 20;\n            logEventTimePassed20(passedTime20);\n        }, 20000);\n        setTimeout(() => {\n            passedTime25 += 25;\n            logEventTimePassed25(passedTime25);\n        }, 25000);\n        setTimeout(() => {\n            passedTime30 += 30;\n            logEventTimePassed30(passedTime30);\n        }, 30000);\n    },\n}","window._NO_CONSOLE_LOG = true;\n// window._NO_DEVICELOG = true;\n\n// ############## SOUND VOLUME\nwindow._soundVolume = 1; // value range = 0 -> 1\n\n// ############## COMMON GLOBAL VARS ###########################################\n//=== device info\nwindow._isANDROID = (cc.sys.os == cc.sys.OS_ANDROID);\nwindow._isIOS = (cc.sys.os == cc.sys.OS_IOS);\n\n//--- global logics\nwindow._max = Math.max;\nwindow._min = Math.min;\nwindow._round = Math.round;\nwindow._floor = Math.floor;\nwindow._ceil = Math.ceil;\nwindow._abs = Math.abs;\nwindow._random = Math.random;\nwindow._sqrt = Math.sqrt;\nwindow._atan2 = Math.atan2;\nwindow._PI = Math.PI;\nwindow._removeArrItem = (Arr, item) => {\n    const index = Arr.indexOf(item);\n    if (index == -1) { return; }\n    Arr.splice(index, 1);\n    return true;\n}\n\nwindow._time = () => (new Date()).getTime(); //-- get current time in milliseconds\nwindow._isString = (x) => { return typeof x === 'string'; };\nwindow._isFunction = (functionToCheck) => { return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]'; }\nwindow._log = (...args) => {\n    // return;\n    if (!window._NO_CONSOLE_LOG) { //---- for debug\n        try {\n            console.log(...args);\n        } catch (e) {}\n    }\n};","import * as _GAME from '../all_modules';\n\n\nlet uuidIndex = 1e5;\n\nexport const utils = {\n    textureCaches: {},\n\n    init() {\n        _GAME.utils.canvasNode = cc.find('Canvas');\n    },\n\n    // overwrite default _GAME.utils.setTimeout to use schedule - which is paused when user switch to another tab. This will make all animation synced since ccAction is scheduling-base\n    setTimeout(callback, timeInMillisecond = 0) {\n        const target = { _id: uuidIndex++, __instanceId: uuidIndex };\n        target.callback = () => { callback(target); }\n        cc.director.getScheduler().schedule(target.callback, target, timeInMillisecond / 1000, 0, 0, false);\n        return target;\n    },\n\n    clearTimeout(target) {\n        if (!target || !target._id || !target.callback) return;\n        cc.director.getScheduler().unschedule(target.callback, target);\n    },\n\n    addButtonComp(node, handlerFunc, isBubble = true, playSound = true) {\n        // if(node._components.length != 0){\n        //     console.log(_GAME.utils.getNodePath(node));               \n        \n        // }\n        setTimeout(() => { // make this process run later to prevent node not initalized yet\n            if (!node.getComponent('free_button_comp')) {\n                node.addComponent('free_button_comp');\n            }\n            \n            const butComp = node.addComponent(cc.Button);\n            butComp.transition = isBubble ? cc.Button.Transition.SCALE : null;\n            const eventHandler = new cc.Component.EventHandler();\n            eventHandler.target = node;\n            eventHandler.component = 'free_button_comp';\n            eventHandler.handler = 'freeHandler';\n            butComp.clickEvents.push(eventHandler);\n\n            node.freeButtonHandlerFunc = () => {\n                handlerFunc();\n                _GAME.audio.playSoundClickButton();\n            };\n        });\n    },\n\n\n    getNodePath(node) {\n        let pathArr = [node.name]\n        let parent = node.parent;\n        let safeCount = 0;\n        while (parent && safeCount++ < 50) {\n            if (!parent.parent) { break; }\n            pathArr.push(parent.name);\n            parent = parent.parent;\n        }\n        return pathArr.reverse().join('/');\n    },\n\n\n    getChildByPath(node, path) {\n        try {\n            let result = node;\n            path.split('/').map(childName => { result = result.getChildByName(childName) });\n            return result;\n        } catch (e) {\n            console.warn(` Error calling getChildByPath(${path}) : ${e.message} `);\n            return null;\n        }\n    },\n\n\n    getComponentName(mixedName) {\n        return mixedName.split('<')[1].replace('>', '');\n    },\n\n    // --- convert pos of single node to global pos, counted to all of node's parents positions & scales\n    setOrgPos(node) {\n        if (!node) { return }\n        if (!node.orgPos) { node.orgPos = node.getPosition(); }\n        node.setPosition(node.orgPos);\n    },\n\n\n    getGlobalPosition(node) {\n        let parent = node.parent,\n            x = node.x,\n            y = node.y,\n            safeCount = 0;\n        if (!parent) { _log(` parent=null // node = ${node} `); }\n        while (parent && parent.name != 'Canvas' && safeCount++ < 100) {\n            x = x * parent.scaleX + parent.x;\n            y = y * parent.scaleY + parent.y;\n            parent = parent.parent;\n        }\n        return cc.v2(x, y);\n    },\n\n    // --- get delta position that node must added to its local position to get given global position.\n    // --- example : const posDiff = _GAME.utils.global2LocalPosDiff(ABC, 100, 200);   ABC.x += posDiff.x; ABC.y += posDiff.y;\n    global2LocalPosDiff(node, gPosX, gPosY) {\n        let parent = node.parent,\n            parentArr = [],\n            safeCount = 0;\n        while (parent.name != 'Canvas' && safeCount++ < 100) {\n            parentArr.push(parent);\n            parent = parent.parent;\n        }\n        let x = gPosX,\n            y = gPosY;\n        parentArr.reverse().map(parent => {\n            x = (x - parent.x) / parent.scaleX;\n            y = (y - parent.y) / parent.scaleY;\n        });\n        return cc.v2(x - node.x, y - node.y);\n    },\n\n    setGlobalPositionToNode(sourceNode, targetNode) {\n        const gPos = _GAME.utils.getGlobalPosition(targetNode);\n        const posDiff = _GAME.utils.global2LocalPosDiff(sourceNode, gPos.x, gPos.y);\n        sourceNode.x += posDiff.x;\n        sourceNode.y += posDiff.y;\n        return gPos;\n    },\n\n\n    /**\n     * return random item from array & remove that item from array\n     * @param {*} Arr \n     * @param {*} removeItem \n     */\n\n    randomArrItem(Arr, removeItem = false) {\n        var iRandom = _floor(_random() * (Arr.length));\n        return (removeItem ? Arr.splice(iRandom, 1)[0] : Arr[iRandom]);\n    },\n\n    randomObjectProp: (obj, removeItem = false) => {\n        var arr = Array.from(Object.keys(obj)),\n            prop = _GAME.utils.randomArrItem(arr);\n        var val = obj[prop];\n        if (removeItem) { delete obj[prop]; }\n        return val;\n    },\n    getRandomInt(min,max) {\n            return min + Math.random() * (max - min);\n    }, \n    /* get random value from set of N ratio among N values\n    \tinput format = [\n    \t\t{ value: 'abc', ratio: 5 },\n    \t\t{ value: 'def', ratio: 15 },\n    \t\t{ value: 'ghi', ratio: 5 },\n    \t\t{ value: 'jkl', ratio: 6 },\n    \t\tetc\n    \t] */\n\n    /* Example : \n\t\t// test ================================================\n        const dataX = [\n\t\t\t{ value: 'abc', ratio: 5 },\n\t\t\t{ value: 'def', ratio: 15 },\n\t\t\t{ value: 'ghi', ratio: 5 },\n\t\t\t{ value: 'jkl', ratio: 50 },\n        ];\n        const resultArr=[];\n        for(let i = 0; i< 100; i++) resultArr.push( _GAME.utils.randomItemFromRatioSet( dataX ) );\n        resultArr.sort((A,B)=> A.value > B.value ? 1 : -1 );\n        console.table( resultArr );\n        // test ================================================  */\n\n    randomItemFromRatioSet(itemArr) {\n        let lastSum = 0;\n        const ratioScaleArr = [];\n        itemArr.map(item => {\n            lastSum += item.ratio;\n            ratioScaleArr.push(lastSum);\n        });\n        const rnd = parseInt(_random() * lastSum);\n        let keyIndex = 0;\n        ratioScaleArr.some((val, index) => {\n            if (rnd < val) {\n                keyIndex = index;\n                return true;\n            }\n        })\n        return itemArr[keyIndex];\n    },\n\n\n    /**\n     * return object {days, hours, minutes, seconds}\n     * @param {number} secs seconds\n     */\n    secondsToTime(secs) {\n        const days = Math.floor(secs / 86400);\n        const hours = Math.floor((secs % 86400) / 3600);\n        const minutes = Math.floor((secs % 3600) / 60);\n        const seconds = secs % 60;\n        return { days, hours, minutes, seconds };\n    },\n\n    /**\n     * - return a time string\n     * - example: 1 day or 2 hrs or 40 secs\n     * @param {number} secs seconds\n     */\n    secondsToTimeString(secs) {\n        const { days, hours, minutes, seconds } = this.secondsToTime(secs);\n        if (days > 0) { return days + ' day' + (days > 1 ? 's' : ''); }\n        if (hours > 0) { return hours + ' hr' + (hours > 1 ? 's' : ''); }\n        if (minutes > 0) { return minutes + ' min' + (minutes > 1 ? 's' : ''); }\n        return (seconds || 0) + ' sec' + (seconds > 1 ? 's' : '');\n    },\n\n    /**\n     * - return a time string\n     * - example: 1d or 01:11:01\n     * @param {number} secs seconds \n     */\n    secondsToTimeCountdown(secs) {\n        if (secs <= 0) {\n            return '00:00';\n        }\n        const { days, hours, minutes, seconds } = this.secondsToTime(secs);\n        if (days > 0) { return days + ' day' + (days > 1 ? 's' : ''); }\n\n        let ret = \"\";\n        if (hours > 0) ret = (\"0\" + hours).slice(-2) + ':';\n        ret += (\"0\" + minutes).slice(-2) + ':';\n        ret += (\"0\" + seconds).slice(-2);\n        return ret;\n    },\n\n\n    /**\n     * - Example: template = 'time remaining xxx - please wait'\n     * - xxx will be replaced with real time\n     * @param {cc.Node} node \n     * @param {number} targetUTC \n     * @param {function} timeoutCallback \n     * @param {string} template \n     */\n    setLabelCountDownTimer(node, targetUTC, timeoutCallback, template) {\n        let N = node;\n        if (_isString(N)) { N = cc.find(N); }\n        if (N.countDownTimerVar) {\n            clearInterval(N.countDownTimerVar);\n        }\n        const timerFunc = () => {\n            if (!N.parent) {\n                clearInterval(N.countDownTimerVar);\n                return;\n            }\n            const currentTime = _time();\n            const timeDiff = targetUTC - currentTime;\n            const timeDiffStr = _GAME.utils.secondsToTimeCountdown(_floor(timeDiff / 1000));\n            const str = (template || 'xxx').replace('xxx', timeDiffStr)\n            _GAME.utils.setLabelText(N, str);\n\n            if (timeDiff <= 0) {\n                clearInterval(N.countDownTimerVar);\n                if (timeoutCallback) {\n                    timeoutCallback();\n                }\n            };\n        }\n        N.countDownTimerVar = setInterval(timerFunc, 500);\n        timerFunc();\n    },\n\n\n\n    //--- wait for certain property of certain object to be true & call a callback\n    waitToRun(callback, propertyName, mainObject = window, interval = 0.1, maxTimeWait, timeoutCallback) {\n        let isRunSuccess = false;\n        const waitInterval = setInterval(() => {\n            if (propertyName.includes('()')) {\n                if (!mainObject[propertyName.replace('()', '')]()) {\n                    return;\n                }\n            } else if (!mainObject[propertyName]) {\n                return;\n            }\n            clearInterval(waitInterval);\n            isRunSuccess = true;\n            callback();\n        }, interval * 1000);\n\n        if (maxTimeWait) {\n            _GAME.utils.setTimeout(() => {\n                clearInterval(waitInterval);\n                if (timeoutCallback && !isRunSuccess) { timeoutCallback(); }\n            }, maxTimeWait * 1000);\n        }\n    },\n\n    extendObj: (orgObj, newObj, propArr) => {\n        propArr.map((prop) => { newObj[prop] = orgObj[prop]; });\n    },\n\n    //======== set node properties\n    setNodeProps: function(N, width, height, x, y, scale) {\n        width && (N.width = width);\n        height && (N.height = height);\n        x && (N.x = x);\n        y && (N.y = y);\n        scale && (N.scale = scale);\n    },\n\n    preloadImage(imgPath, callback) {\n        if (_GAME.utils.textureCaches[imgPath]) {\n            return callback && callback(_GAME.utils.textureCaches[imgPath]);\n        }\n\n        cc.loader.loadRes(imgPath, cc.SpriteFrame, (e, texture) => {\n            if (e) {\n                // _log(` utils.preloadImage > Error loading image from resource ${imgPath} `, e);\n                if (callback) callback(false);\n            } else {\n                _GAME.utils.textureCaches[imgPath] = texture;\n                if (callback) callback(texture);\n            }\n        });\n    },\n\n\n    copyTexture(sourceNode, destNode) {\n        const sComp = destNode.getComponent(cc.Sprite) || destNode.addComponent(cc.Sprite);\n        sComp.spriteFrame = sourceNode.getComponent(cc.Sprite).spriteFrame;\n    },\n\n\n    /**\n     * \n     * @param {cc.Node} node \n     * @param {string} url \n     */\n    setNodeImgFromUrl(node, url) {\n        node.isTextureFromURL = true;\n        if (!_GAME.utils.textureCaches[url]) {\n            _GAME.utils.textureCaches[url] = new cc.SpriteFrame(url);\n        }\n        _GAME.utils.setNodeImgFromSpriteFrame(node, _GAME.utils.textureCaches[url]);\n    },\n\n    /**\n     * \n     * @param {cc.Node} node \n     * @param {string} imgPath \n     */\n    setNodeImgFromResources(node, imgPath, isResetOrgSize = false, callback) {\n        // _log(` setNodeImgFromResources :: start loading [${imgPath}] ... `);\n        node.isTextureFromResource = true;\n        node.currentTexturePath = imgPath;\n        if (!_GAME.utils.textureCaches[imgPath]) {\n            // node.getComponent(cc.Sprite).enabled = false;\n            cc.loader.loadRes(imgPath, cc.SpriteFrame, (e, texture) => {\n                if (e) {\n                    return //_log(` Error loading image from resource ${imgPath} `, e);\n                } else {\n                    _GAME.utils.textureCaches[imgPath] = texture;\n                    // _log(` setNodeImgFromResources :: DONE loading [${imgPath}] >>>> `);\n                    if (node.currentTexturePath == imgPath) { // in case we set multiple textures to same node\n                        node.getComponent(cc.Sprite).enabled = true;\n                        _GAME.utils.setNodeImgFromSpriteFrame(node, _GAME.utils.textureCaches[imgPath], !isResetOrgSize, isResetOrgSize);\n                        if (callback) callback();\n                    }\n                }\n            });\n        } else {\n            // if(!_GAME.utils.textureCaches[imgPath].textureLoaded()){\n            // \tconsole.warn(` ERROR loaded image [${imgPath}] >> textureLoaded() = false `);\n            // }\n            node.getComponent(cc.Sprite).enabled = true;\n            _GAME.utils.setNodeImgFromSpriteFrame(node, _GAME.utils.textureCaches[imgPath], !isResetOrgSize, isResetOrgSize);\n            if (callback) callback();\n        }\n    },\n\n    /**\n     * \n     * @param {cc.Node} node \n     * @param {cc.SpriteFrame} frame \n     * @param {boolean} keepOldSize \n     * @param {boolean} isSizedToNewSFrame \n     */\n    setNodeImgFromSpriteFrame(node, frame, keepOldSize = true, isSizedToNewSFrame = false) {\n        const orgW = node.width,\n            orgH = node.height;\n        if (!node.getComponent(cc.Sprite)) { node.addComponent(cc.Sprite); }\n        // _log( `setNodeImgFromSpriteFrame > frame.textureLoaded() = ${frame.textureLoaded()}` );\n        _GAME.utils.waitToRun(() => {\n            // _log(` setNodeImgFromSpriteFrame > frame.textureLoaded() = true =>>>>>> [[node.getComponent(cc.Sprite).spriteFrame = frame]] `);\n            node.getComponent(cc.Sprite).spriteFrame = frame;\n            if (keepOldSize) {\n                node.width = (orgW != 0) ? orgW : frame._originalSize.width;\n                node.height = (orgH != 0) ? orgH : frame._originalSize.height;\n            } else {\n                if (frame._originalSize.width != 0) {\n                    node.width = frame._originalSize.width;\n                }\n                if (frame._originalSize.height != 0) {\n                    node.height = frame._originalSize.height;\n\n                }\n            }\n            if (isSizedToNewSFrame) {\n                const sFrame = node.getComponent(cc.Sprite).spriteFrame;\n                node.width = sFrame._originalSize.width;\n                node.height = sFrame._originalSize.height;\n            }\n        }, 'textureLoaded()', frame);\n    },\n\n    /**\n     * \n     * @param {cc.Node} node \n     * @param {*} img \n     * @param {boolean} keepOldSize \n     * @param {boolean} isSizedToNewSFrame \n     */\n    setNodeImg(node, img, keepOldSize = true, isSizedToNewSFrame = false) {\n        if (typeof img === \"string\") {\n            // _log(` img = ${img} //  this.isURL(img)=${this.isURL(img)}`);\n            if (this.isURL(img)) {\n                _GAME.utils.setNodeImgFromUrl(node, img);\n            } else {\n                _GAME.utils.setNodeImgFromResources(node, img, isSizedToNewSFrame);\n            }\n        } else if (img instanceof cc.SpriteFrame) {\n            // _log(` img.constructor.name == \"cc_SpriteFrame\" `);\n            _GAME.utils.setNodeImgFromSpriteFrame(node, img, keepOldSize, isSizedToNewSFrame);\n        } else if (img instanceof cc.Node) {\n            // _log(` img.constructor.name == \"cc.Node\" `);\n            const sComp = img.getComponent(cc.Sprite);\n            // _log(`  sComp = `, sComp)\n            if (!sComp) return;\n            _GAME.utils.setNodeImgFromSpriteFrame(node, sComp.spriteFrame, keepOldSize, isSizedToNewSFrame);\n        } else {\n            // console.warn(` setNodeImg > undefined image format > img.constructor = ${img.constructor.name}`);\n        }\n    },\n\n    /**\n     * \n     * @param {cc.Node} label \n     * @param {string} str \n     */\n    setLabelText(label, str) {\n        if (!label) { return; }\n        if(typeof str == 'string'){\n            // console.log(str,'===>',typeof str);\n            if(typeof str == 'number') {\n                label.getComponent(cc.Label).string = str;\n                return;\n            }\n            let newStr = '';\n            for (let index = 0; index < str.length; index++) {\n                let element = str[index];\n                if(element != ' '){\n                    newStr += element;\n                }\n            }\n            // console.log(newStr,'===>',typeof newStr);\n            let valueCompare = newStr.toUpperCase();\n            let value =_GAME.localize.convertPosition(valueCompare);\n            if(value.length != 0){\n                // console.log('==>',value);\n                label.getComponent(cc.Label).string = value;\n            }else{\n                label.getComponent(cc.Label).string = str;\n            }\n        }else{\n            label.getComponent(cc.Label).string = str;\n        }\n        \n    },\n\n    /**\n     * \n     * @param {cc.Node} label \n     * @param {string|number} num \n     */\n    setLabelTextBigNumber(label, num) {\n        if (!label) { return; }\n        if (isNaN(num)) { num = 0; }\n        label.getComponent(cc.Label).string = _GAME.utils.formatCurrency(num, 999999999999999);\n    },\n\n    /**\n     * \n     * @param {cc.Node} label \n     * @param {string|number} number \n     * @param {number} maxSize \n     */\n    setLabelTextPrice(label, number, maxSize) {\n        if (!label) { return; }\n        const isStartedWPlus = _isString(number) && number.startsWith('+')\n        const num = isStartedWPlus ? parseInt(number.replace('+', '')) : number;\n        let str = _GAME.utils.formatCurrency(num, maxSize);\n        label.getComponent(cc.Label).string = (isStartedWPlus ? '+' : '') + str;\n    },\n    setLabelTextShotcut: function(node, text) {\n        if (node) {\n            if (!text.length) return;\n            let newText = (text.length > 6) ? text.slice(0, 6) : text;\n            let compNode = node.getComponent(cc.Label);\n            compNode.string = newText + '...';\n        }\n    },\n\n    // move a node to another parent\n    moveNodeTo: function(node, newParent, copy = false) {\n        var N = (copy ? cc.instantiate(node) : node);\n        if (newParent) {\n            if (N.parent != newParent) {\n                N.removeFromParent(false);\n                newParent.addChild(N);\n            }\n        }\n        return N;\n    },\n\n    copyNodeTo: (node, newParent) => {\n        var N = _GAME.utils.moveNodeTo(node, newParent, true);\n\n        //=== maintain size of original nodes if copy (when copy, new node is created & set spriteFrame --> size is changed to spriteFrame size)\n        var originalSComps = node.getComponentsInChildren(cc.Sprite);\n        var newSComps = N.getComponentsInChildren(cc.Sprite);\n        originalSComps.map((comp, i) => {\n            var orgNode = comp.node,\n                newNode = newSComps[i].node;\n            _GAME.utils.extendObj(orgNode, newNode, ['width', 'height']);\n            if (orgNode.onTouchEnd) { newNode.on('touchend', orgNode.onTouchEnd); }\n        });\n\n        return N;\n    },\n\n\n    prefabToNode(name) {\n        const N = cc.instantiate(_GAME.prefabList[name]);\n        return N;\n    },\n\n    preloadPrefabToNode(prefabName, nodeName, parent) {\n        const node = _GAME.utils.prefabToNode(prefabName);\n        node.name = nodeName;\n        node.parent = parent;\n        node.setPosition(0, 0);\n        node.active = false;\n    },\n\n    /**\n     * return a string in 'en' format\n     * @param {number} value \n     */\n    formatNumber(value) {\n        return value.toLocaleString('en');\n    },\n\n    /**\n     * return a string of currency that formatted\n     * @param {number} value input value\n     * @param {number} maxSize maxsize of 99..9\n     */\n    formatCurrency(value, maxSize) {\n        const SUFFIXES = ['K', 'M', 'B', 'T', 'aa', 'ab', 'ad', 'ae', 'af'];\n        let x = Math.floor(value);\n        let endValueStr = \"\";\n        if (x > maxSize) {\n            for (let suffix of SUFFIXES) {\n                x /= 1000;\n                if (x < maxSize) {\n                    endValueStr = suffix;\n                    break;\n                }\n            }\n        }\n\n        return x.toFixed(0).replace(',', '.').replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') + endValueStr;\n    },\n\n    isURL(str) {\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n            '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n            '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n            '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n            '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n            '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n        return !!pattern.test(str);\n    },\n\n\n    singleTouchSet(N, touchStartFunc, touchMoveFunc, touchEndFunc) {\n        const scrW2 = cc.winSize.width / 2;\n        const scrH2 = cc.winSize.height / 2;\n        const callFuncWithEvent = (func, event) => {\n            const pos = event.touch.getLocation();\n            const realPos = cc.v2(pos.x - scrW2, pos.y - scrH2);\n            func(realPos, event);\n        }\n\n        // TEST MULTI-TOUCHES => GET TOUCH ID\n        N.on('touchstart', (event) => {\n            if (N.touchingID) { return; }\n            N.touchingID = event.touch._id + 1;\n            touchStartFunc && callFuncWithEvent(touchStartFunc, event);\n            // _log(` touchstart ID = ${N.touchingID} // target_name = ${event.target.name} // event.touch= `, event.touch);\n        });\n\n        touchMoveFunc && N.on('touchmove', (event) => {\n            var tID = event.touch._id + 1;\n            if (tID == N.touchingID) {\n                touchMoveFunc && callFuncWithEvent(touchMoveFunc, event);\n            }\n            // _log(` touchMove ID = ${tID} `, true);\n        });\n\n        var touchDestroy = (event) => {\n            var tID = event.touch._id + 1;\n            if (tID == N.touchingID) {\n                N.touchingID = null;\n                touchEndFunc && callFuncWithEvent(touchEndFunc, event);\n            }\n            // _log(` touchEnd ID = ${tID} `, true);\n        }\n\n        N.on('touchend', touchDestroy);\n        N.on('touchcancel', touchDestroy);\n    },\n\n\n    removeTouchHandler(node) {\n        node.isDraggable = false;\n        node.touchStartHandlerArr = node.touchMoveHandlerArr = node.touchEndHandlerArr = null;\n        node.off('touchstart');\n        node.off('touchend');\n        node.off('touchmove');\n        node.off('touchcancel');\n    },\n\n\n    localizeNumber: (text) => {\n        let local = '';\n        local = window.FBInstant ? FBInstant.getLocale() : 'en_US';\n\n        let txtFormat = '.';\n        switch (local) {\n            case 'en_US':\n            case 'en_GB':\n            case 'th_TH':\n                txtFormat = ',';\n                break;\n            case 'fr_FR':\n            case 'fr_CA':\n            case 'ru_RU':\n                txtFormat = ' ';\n                break;\n            case 'pl_PL':\n            case 'it_IT':\n            case 'hu_HU':\n                txtFormat = '';\n                break;\n        }\n\n        // console.log(local);\n        // console.log(txtFormat);\n\n        let s = \"\";\n        let g = text;\n        let count = 0;\n        let c = \"\";\n        while (g >= 10) {\n            if (count > 0 && count % 3 == 0) {\n                s = txtFormat + s;\n            }\n            let i = g % 10;\n            c = i + '';\n            s = c + s;\n            g = (g - i) / 10;\n            count++;\n        }\n        if (count > 0 && count % 3 == 0) {\n            s = txtFormat + s;\n        }\n        c = g + '';\n        s = c + s;\n        return s;\n    }\n\n\n}","import * as _GAME from '../all_modules';\n\nexport const video = {\n    isAvailable: false,\n    loadingVideo: false,\n    rewardedVideo: null,\n\n    init() {\n        if (!window.FBInstant) this.isAvailable = true;\n        _GAME.video.preloadVideo(() => {\n            _log(\"PRELOAD VIDEO OK\");\n            this.isAvailable = true;\n        }, (err) => {\n            _log(\"PRELOAD VIDEO ERROR\", err);\n        });\n    },\n\n    preloadVideo(successCallBack, failCallBack) {\n        if (!window.FBInstant) {\n            if (failCallBack) failCallBack({ code: \"OFFLINE\" });\n            return;\n        };\n\n        if (!_GAME.utilsFB.isSupportedAPI(\"getRewardedVideoAsync\")) {\n            if (failCallBack) failCallBack({ code: \"NOT_SUPPORTED\" });\n            return;\n        }\n\n        if (_GAME.video.loadingVideo) {\n            if (failCallBack) failCallBack({ code: \"LOADING\" });\n            return;\n        };\n\n        _GAME.video.loadingVideo = true;\n        FBInstant.getRewardedVideoAsync(_GAME.configs.videoRewardId)\n            .then(rewardedVideo => {\n                rewardedVideo.loadAsync().then(() => {\n                    _GAME.video.rewardedVideo = rewardedVideo;\n                    _GAME.video.loadingVideo = false;\n                    if (successCallBack) successCallBack();\n                }).catch(err => {\n                    _GAME.video.rewardedVideo = null;\n                    _GAME.video.loadingVideo = false;\n                    if (failCallBack) failCallBack(err);\n                });\n            }).catch(err => {\n                _GAME.video.rewardedVideo = null;\n                _GAME.video.loadingVideo = false;\n                if (failCallBack) failCallBack(err);\n            });\n    },\n\n    showVideo(orgSuccessCallBack, orgFailCallBack, videoPos = '') {\n        const successCallBack = () => {\n            // _GAME.ui.hideNagScreen();\n            if (orgSuccessCallBack) orgSuccessCallBack();\n        }\n        const failCallBack = (err,errorUser) => {\n            // _GAME.ui.hideNagScreen();\n            if (orgFailCallBack) orgFailCallBack(err,errorUser);\n        };\n        // _GAME.ui.showLoading();\n        if (!window.FBInstant) return successCallBack();\n\n        if (_GAME.video.rewardedVideo) {\n            _GAME.utilsFB.log(`ev_video_click_show`);\n            _GAME.video.rewardedVideo.showAsync().then(() => {\n                _GAME.utilsFB.log(\"ev_watch_video_success\", 1, {});\n\n                _GAME.utilsFB.log(`Ads-Total-Video`, 1, { videoPos });\n                _GAME.utilsFB.log(`Ads-Total`);\n\n                successCallBack();\n                _GAME.video.preloadVideo();\n            }).catch(err => {\n                console.log(\"VAO CASE NAY CO !!!\",err.code,' !!! ' ,err.message );\n                if (_GAME.video.isErrRewardNotCompleted(err)) {\n                    _GAME.utilsFB.log(`ev_video_err_reward_not_completed`);\n                } else {\n                    _GAME.utilsFB.log(`ev_video_err_other`);\n                }\n                failCallBack(err,_GAME.video.isErrRewardNotCompleted(err));\n                _GAME.video.preloadVideo();\n            });\n        } else if (_GAME.video.loadingVideo) {\n            _GAME.utils.setTimeout(() => _GAME.video.showVideo(successCallBack, failCallBack, videoPos), 200);\n        } else {\n            failCallBack({ code: \"VIDEO_IS_NULL\" });\n        }\n    },\n\n    isErrRewardNotCompleted(err) {\n        return err.code == 'USER_INPUT';\n    },\n\n}"],"file":"index.js"}